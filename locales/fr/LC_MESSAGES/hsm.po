# SOME DESCRIPTIVE TITLE.
# Copyright (C) Nitrokey
# This file is distributed under the same license as the Nitrokey
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nitrokey Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-26 16:22+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../hsm/creating-certificate-authority.rst:2
msgid "Creating a Certificate Authority"
msgstr ""

#: ../hsm/creating-certificate-authority.rst:4
msgid ""
"This article shows you how to setup your own private certificate "
"authority backed by a Nitrokey HSM. This certificate authority has no "
"automation and does not really scale. Other open source projects can be "
"referenced for automation and scalability."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:10
msgid "Choose Cryptographic Algorithms"
msgstr ""

#: ../hsm/creating-certificate-authority.rst:12
msgid ""
"I’m going to assume that you’re as paranoid as I am, so I will be using "
"the following command for generating private keys:"
msgstr ""

#: ../hsm/creating-certificate-authority.rst:19
msgid ""
"But, if you’re less paranoid that I am, you can safely choose the "
"following options:"
msgstr ""

#: ../hsm/creating-certificate-authority.rst:27
msgid ""
"Likewise, I will be using the sha512 algorithm throughout this article, "
"but sha256 can safely be used."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:31
msgid "Preparing to Start"
msgstr ""

#: ../hsm/creating-certificate-authority.rst:33
msgid "To start with, you need to pick a directory to store your CA."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:44
msgid "Install the necessary tools:"
msgstr ""

#: ../hsm/creating-certificate-authority.rst:55
msgid "Creating the Root Certificate Authority"
msgstr ""

#: ../hsm/creating-certificate-authority.rst:57
msgid ""
"We start by generating the private key for the certificate authority "
"directly on the Nitrokey HSM. This allows us to use the private key in "
"the future, but not access it."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:82
msgid ""
"Note the ID number (e0161cc8b6f5d66ac6835ecdecb623fc0506a675), we’ll need"
" it later."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:85
#: ../hsm/creating-certificate-authority.rst:250
msgid ""
"If you need the ID in the future, you can list the keys on the Nitrokey "
"HSM:"
msgstr ""

#: ../hsm/creating-certificate-authority.rst:92
#: ../hsm/creating-certificate-authority.rst:257
msgid ""
"We need to create a config file to generate a self-signed public "
"certificate."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:99
#: ../hsm/creating-certificate-authority.rst:264
msgid ""
"Fill out the request information in <angle brackets> with information for"
" your CA."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:160
msgid ""
"Generate the self-signed public certificate from the private key. Use the"
" private key id value from earlier."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:169
msgid ""
"Verify that the root certificate was generated correctly. Verify that "
"Signature-Algorithm matches above and below. Verify that Issuer and "
"Subject match, all root certificates are self signed. Verify that Key "
"Usage matches what was in the v3_ca information in our config file."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:220
msgid "Creating the Intermediate Certificate Authority"
msgstr ""

#: ../hsm/creating-certificate-authority.rst:222
msgid ""
"We continue by generating the private key for the intermediate "
"certificate authority directly on the Nitrokey HSM. This allows us to use"
" the private key in the future, but not access it."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:247
msgid ""
"Note the ID number (bcb48fe9b566ae61891aabbfde6a23d4ff3ab639), we’ll need"
" it later."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:292
msgid ""
"Generate the certificate signing request for the intermediate CA from the"
" intermediate CA’s private key. Use the private key ID value from "
"earlier."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:302
msgid ""
"Verify that the CSR was created correctly. Verify that your Subject is "
"correct. Verify that your Public Key and Signature Algorithm are correct."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:337
#: ../hsm/creating-certificate-authority.rst:548
msgid "We need to find out the fully qualified PKCS#11 URI for your private key:"
msgstr ""

#: ../hsm/creating-certificate-authority.rst:376
#, python-format
msgid ""
"In this instance, the fully qualified PKCS#11 URI is "
"``pkcs11:model=PKCS%2315%20emulated;manufacturer=www.CardContact.de;serial=DENK0104068;token"
"=SmartCard-"
"HSM%20%28UserPIN%29%00%00%00%00%00%00%00%00%00;id=%E0%16%1C%C8%B6%F5%D6%6A%C6%83%5E%CD%EC%B6%23%FC%05%06%A6%75;object=root;type=private``."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:379
msgid ""
"Now, we need to create a config file to use the private key of the root "
"certificate to sign the csr of the intermediate certificate."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:432
msgid "Then sign the intermediate certificate with the root certificate."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:472
msgid ""
"Verify that the root certificate was generated correctly. Verify that the"
" Issuer and Subject are different, and correct. Verify that the Key Usage"
" matches the config file. Verify that the signature algorithm are correct"
" above and below."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:522
msgid ""
"Verify that the intermediate certificate verifies against the root "
"certificate."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:530
msgid "Create a certificate chain file:"
msgstr ""

#: ../hsm/creating-certificate-authority.rst:536
msgid "You now have a certificate authority backed by an HSM."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:539
msgid "Sign a Server Certificate"
msgstr ""

#: ../hsm/creating-certificate-authority.rst:541
msgid ""
"Now that you have a certificate authority, you’d probably like to know "
"how to use it."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:544
msgid ""
"Create a CSR in the normal method for your application. Proper creation "
"of your certificate, including SAN, for your particular application is "
"outside the scope of this document."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:587
#, python-format
msgid ""
"In this instance, the fully qualified PKCS#11 URI is "
"``pkcs11:model=PKCS%2315%20emulated;manufacturer=www.CardContact.de;serial=DENK0104068;token"
"=SmartCard-"
"HSM%20%28UserPIN%29%00%00%00%00%00%00%00%00%00;id=%BC%B4%8F%E9%B5%66%AE%61%89%1A%AB%BF%DE%6A%23%D4%FF%3A%B6%39;object=intermediate;type=private``."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:590
msgid ""
"Create a config file to use the private key of the intermediate "
"certificate to sign the CSRs of your servers."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:646
msgid "Then run openssl to sign the server’s CSR."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:695
msgid "References"
msgstr ""

#: ../hsm/creating-certificate-authority.rst:697
msgid "I used the following resources to help in compiling this document."
msgstr ""

#: ../hsm/creating-certificate-authority.rst:699
msgid ""
"`How to initialize your Nitrokey HSM "
"<https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM#initialize-the-"
"device>`__"
msgstr ""

#: ../hsm/creating-certificate-authority.rst:701
msgid ""
"`How to create a root and intermediate CA <https://jamielinux.com/docs"
"/openssl-certificate-authority/create-the-root-pair.html>`__"
msgstr ""

#: ../hsm/creating-certificate-authority.rst:703
msgid ""
"`How to ensure the serial numbers of your intermediate CA and server "
"certs are up to spec <https://www.phildev.net/ssl/creating_ca.html>`__"
msgstr ""

#: ../hsm/creating-certificate-authority.rst:706
msgid ""
"`How to generate ECC private keys <https://dev.to/benjaminblack"
"/obtaining-an-elliptic-curve-dsa-certificate-with-lets-encrypt-51bc>`__"
msgstr ""

#: ../hsm/creating-certificate-authority.rst:708
msgid ""
"`How to find the PCKS11 URI from your HSM "
"<https://www.infradead.org/openconnect/pkcs11.html>`__"
msgstr ""

#: ../hsm/creating-certificate-authority.rst:710
msgid ""
"`Troubleshooting (forum) <https://support.nitrokey.com/t/pki-ca-nitrokey-"
"hsm-does-not-support-signing/2598/14>`__"
msgstr ""

#: ../hsm/creating-certificate-authority.rst:713
msgid ""
"This document was originally `written by lyntux "
"<https://gist.github.com/lyntux/f02c6c3414ce48bc8ea8ab6dcdba1623>`__."
msgstr ""

#: ../hsm/index.rst:2
msgid "Nitrokey HSM 2"
msgstr ""

#: ../hsm/index.rst:4
msgid "Choose your operating system:"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:2
msgid "Automatic Screen Lock at Removal"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:4
msgid ""
"This guide will walk you through the configuration of your computer, to "
"automatically lock your session when you remove the Nitrokey."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:7
msgid ""
"The configuration requires the creation of two files under two different "
"directories."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:11
msgid "Requirements"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:13
msgid ""
"Ubuntu 20.04 or Debian 10 (Buster), both with `Gnome Display Manager "
"<https://wiki.gnome.org/Projects/GDM>`__ installed."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:16
msgid "Nitrokey Pro 2, Nitrokey Storage 2, or Nitrokey HSM 2"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:19
msgid "Configuration"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:22
msgid "Create the ``.rules`` file"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:24
msgid "With your favorite text editor create a file called ``85-nitrokey.rules``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:31
msgid "Add the following line to the file"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:37
msgid "Save the file and quit the editor."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:39
msgid ""
"This file sets up a new hardware rule that executes the ``gnome-"
"screensaver-lock`` at removal of the Nitrokey device."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:42
msgid ""
"You should change the configuration according to the device you are using"
" as following:"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:45
msgid "Nitrokey Pro: ``ENV{PRODUCT}==\"20a0/4108/101\"``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:46
msgid "Nitrokey HSM: ``ENV{PRODUCT}==\"20a0/4230/101\"``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:47
msgid "Nitrokey Storage: ``ENV{PRODUCT}==\"20a0/4109/101\"``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:50
msgid "Create the ``gnome-screensaver-lock`` script"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:52
msgid ""
"With your favorite text editor create a file called ``gnome-screensaver-"
"lock``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:59
msgid "Add the following text"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:69
msgid ""
"In the first step, this script looks for the user-name of the gnome "
"session, i.e. ``user``."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:72
msgid ""
"When it is called at Nitrokey removal, the script queries ``user``, "
"switches to its session, and locks the screen by prompting the screen-"
"saver screen."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:77
msgid "Execute the script"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:79
msgid ""
"Once all set up, execute the script once, and it will lock the screen. It"
" does not matter if the Nitrokey is plugged or not for this first "
"execution."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:84
#: ../pro/smime-email-encryption-with-outlook.rst:36
#: ../pro/smime-email-encryption-with-thunderbird.rst:62
#: ../pro/smime-email-encryption.rst:78
msgid "Usage"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:86
msgid ""
"By now you can log back to your session by entering your password, and "
"(re)plug you Nitrokey if you did not do it before."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:89
msgid ""
"The next time(s) you unplug your Nitrokey from the computer, it will "
"automatically lock the screen."
msgstr ""

#: ../hsm/linux/index.rst:2
msgid "Nitrokey HSM with GNU/Linux"
msgstr ""

#: ../hsm/linux/index.rst:11
msgid ""
"Install `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`__. You need at "
"least version 0.19. You can find recent builds for debian-based systems "
"like Ubuntu `here <https://github.com/Nitrokey/opensc-build>`__ if your "
"system does not have the newest version of OpenSC. Alternatively, install"
" `this <https://www.cardcontact.de/download/sc-hsm-starterkit.zip>`__ "
"driver (`source <https://github.com/CardContact/sc-hsm-embedded>`__)."
msgstr ""

#: ../hsm/linux/index.rst:18 ../hsm/mac/index.rst:15
#: ../hsm/windows/index.rst:15
msgid ""
"If you didn’t do so already, change the default SO-PIN "
"(“3537363231383830”) to your own choices. See `these instructions "
"<https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM#initialize-the-"
"device>`__. Afterwards you can begin to `generate new keys "
"<https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM#generate-key-"
"pair>`__."
msgstr ""

#: ../hsm/linux/index.rst:24 ../hsm/mac/index.rst:21
#: ../hsm/windows/index.rst:21
msgid ""
"Your Nitrokey is now ready to use. `Checkout "
"<https://www.nitrokey.com/documentation/applications>`__ the various use "
"cases and supported applications."
msgstr ""

#: ../pro/login-to-windows-domain-computers-with-ms-active-directory.rst:2
msgid "Login to Windows Domain Computers With MS Active Directory"
msgstr ""

#: ../pro/login-to-windows-domain-computers-with-ms-active-directory.rst:4
msgid ""
"Download and install the latest `OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki>`__."
msgstr ""

#: ../pro/login-to-windows-domain-computers-with-ms-active-directory.rst:6
msgid ""
"Use a text editor to add the following settings to *C:\\Program "
"Files:\\OpenSC Project\\OpenSC\\opensc.conf*."
msgstr ""

#: ../pro/login-to-windows-domain-computers-with-ms-active-directory.rst:29
msgid ""
"Open a command terminal and enter “regedit”. Use regedit to import `this "
"file <https://www.nitrokey.com/sites/default/files/nk-hsm.reg>`__."
msgstr ""

#: ../pro/login-to-windows-domain-computers-with-ms-active-directory.rst:32
msgid ""
"Now you can enroll Nitrokeys for your users managed in Microsoft Active "
"Directory. You may either use Microsoft PKI, `gpgsm "
"<https://www.gnupg.org/documentation/manuals/gnupg/Howto-Create-a-Server-"
"Cert.html>`__, or `Smart Policy <http://www.mysmartlogon.com/products"
"/smart-policy.html>`__. The following steps describe the usage of Smart "
"Policy."
msgstr ""

#: ../pro/login-to-windows-domain-computers-with-ms-active-directory.rst:38
msgid ""
"`Download "
"<http://download.mysmartlogon.com/SmartPolicyv2/SmartPolicy%20-%20Stage%203.exe>`__"
" and install Smart Policy."
msgstr ""

#: ../pro/login-to-windows-domain-computers-with-ms-active-directory.rst:40
msgid "Select “Read a smart card”"
msgstr ""

#: ../pro/login-to-windows-domain-computers-with-ms-active-directory.rst:47
msgid "Select the certificate, mapping, and user."
msgstr ""

#: ../pro/login-to-windows-domain-computers-with-ms-active-directory.rst:54
msgid "Verify the device status via CRL."
msgstr ""

#: ../pro/login-to-windows-domain-computers-with-ms-active-directory.rst:61
msgid "Choose a Group Policy Object (GPO)."
msgstr ""

#: ../pro/login-to-windows-domain-computers-with-ms-active-directory.rst:68
msgid "Confirm applying the mapping."
msgstr ""

#: ../pro/login-to-windows-domain-computers-with-ms-active-directory.rst:75
msgid ""
"From now on, when logging on to your Windows computer you need to connect"
" the Nitrokey and enter your PIN."
msgstr ""

#: ../pro/smime-email-encryption.rst:2
msgid "S/MIME Email Encryption"
msgstr ""

#: ../pro/smime-email-encryption-with-outlook.rst:5
#: ../pro/smime-email-encryption-with-thunderbird.rst:5
#: ../pro/smime-email-encryption.rst:5
msgid "Prerequisites"
msgstr ""

#: ../pro/smime-email-encryption.rst:7
msgid "There are two widely used standards for email encryption."
msgstr ""

#: ../pro/smime-email-encryption.rst:9
msgid "OpenPGP/GnuPG is popular among individuals,"
msgstr ""

#: ../pro/smime-email-encryption.rst:11
msgid "S/MIME/X.509 is mostly used by enterprises."
msgstr ""

#: ../pro/smime-email-encryption.rst:13
msgid ""
"If you are in doubt which one to choose, you should use OpenPGP, see "
"`here <https://docs.nitrokey.com/pro/openpgp-email-encryption.html>`__. "
"This page describes the usage of S/MIME email encryption."
msgstr ""

#: ../pro/smime-email-encryption.rst:17
msgid ""
"You need to purchase a S/MIME certificate or may already got one by your "
"company. Furthermore, you need to install `OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki>`__ on your System. While "
"GNU/Linux users usually can install OpenSC over the package manager (e.g."
" ``sudo apt install opensc`` on Ubuntu), macOS and Windows users can "
"download the installation files from the `OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki>`__ page."
msgstr ""

#: ../pro/smime-email-encryption.rst:25
msgid ""
"**Note: Windows users with 64-bit system (standard) need to install both,"
" the 32-bit and the 64-bit version of OpenSC!**"
msgstr ""

#: ../pro/smime-email-encryption.rst:29
msgid "Import Existing Key and Certificate"
msgstr ""

#: ../pro/smime-email-encryption.rst:31
msgid ""
"The following instructions are based on the `wiki of OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki/OpenPGP-card>`__. We will assume, "
"that you already got a key-certificate pair as a .p12 file. Please have a"
" look at the wiki page, if you got a separate key and certificate file."
msgstr ""

#: ../pro/smime-email-encryption.rst:37
msgid ""
"To open the Windows command line please push the Windows-key and R-key. "
"Now type ‘cmd.exe’ in the text field and hit enter. To open a Terminal on"
" macOS or GNU/Linux please use the application search (e.g. spotlight on "
"macOS)."
msgstr ""

#: ../pro/smime-email-encryption.rst:42
msgid ""
"To make these commands as simple as possible, the .p12 file needs to be "
"in your home folder. On Windows this is usually ‘C:\\Users\\yourusername’"
" and on macOS and GNU/Linux system it will be ‘/home/yourusername’. If "
"you do not store the .p12 file there, you have to adapt the path in the "
"commands below. Please plug in the Nitrokey before submitting the "
"commands."
msgstr ""

#: ../pro/smime-email-encryption.rst:49
msgid ""
"Assuming that your key-certificate file reads ‘myprivate.p12’ the "
"commands for Windows looks like this:"
msgstr ""

#: ../pro/smime-email-encryption.rst:57
msgid "and on macOS and GNU/Linux it will be"
msgstr ""

#: ../pro/smime-email-encryption.rst:64
msgid ""
"The two commands copy the key-certificate pair to the slot 2 (needed for "
"decrypting emails) and slot 3 (needed for signing). The output looks on "
"both systems something like this:"
msgstr ""

#: ../pro/smime-email-encryption.rst:73
msgid ""
"Please note that there will be error messages that can be safely ignored "
"(see output example above). You now have the key-certificate pair loaded "
"on the Nitrokey."
msgstr ""

#: ../pro/smime-email-encryption.rst:80
msgid "You can find further information about the usage on these pages:"
msgstr ""

#: ../pro/smime-email-encryption.rst:82
msgid ""
"for using `S/MIME encryption on Thunderbird "
"<https://docs.nitrokey.com/pro/smime-email-encryption-with-"
"thunderbird.html>`__"
msgstr ""

#: ../pro/smime-email-encryption.rst:85
msgid ""
"for using `S/MIME encryption on Outlook <https://docs.nitrokey.com/pro"
"/smime-email-encryption-with-outlook.html>`__"
msgstr ""

#: ../pro/smime-email-encryption.rst:88
msgid ""
"for using `Evolution <https://help.gnome.org/users/evolution/stable/mail-"
"encryption.html.en>`__, an email client for the Gnome Desktop on Linux "
"systems"
msgstr ""

#: ../pro/smime-email-encryption.rst:93
msgid "Troubleshooting"
msgstr ""

#: ../pro/smime-email-encryption.rst:95
msgid ""
"On Windows: Did you install **both**, the 32-bit and the 64-bit version "
"of OpenSC?"
msgstr ""

#: ../pro/smime-email-encryption.rst:98
msgid ""
"Nitrokey Storage 2: You need to install OpenSC in version 0.18 or higher."
" You can find the files on the `OpenSC website "
"<https://github.com/OpenSC/OpenSC/releases>`__ for Windows and macOS user"
" or `here <https://github.com/Nitrokey/opensc-build>`__ for Debian/Ubuntu"
" users."
msgstr ""

#: ../pro/smime-email-encryption-with-thunderbird.rst:2
msgid "S/MIME Email Encryption with Thunderbird"
msgstr ""

#: ../pro/smime-email-encryption-with-thunderbird.rst:7
msgid ""
"If you do not have a S/MIME key-certificate pair installed on your "
"Nitrokey yet or if you did not installed OpenSC, please look at `this "
"page <https://docs.nitrokey.com/pro/smime-email-encryption.html>`__ "
"first."
msgstr ""

#: ../pro/smime-email-encryption-with-thunderbird.rst:12
msgid ""
"You need to have OpenSC installed on your System. Please have a look at "
"the `wiki page of the OpenSC project "
"<https://github.com/OpenSC/OpenSC/wiki>`__. While GNU/Linux users usually"
" can install OpenSC over the package manager (e.g. sudo apt update && "
"sudo apt install opensc on Ubuntu), macOS and Windows users can download "
"the installation files from the wiki page."
msgstr ""

#: ../pro/smime-email-encryption-with-outlook.rst:18
#: ../pro/smime-email-encryption-with-thunderbird.rst:21
msgid ""
"Windows users with 64-bit system (standard) need to install both, the "
"32-bit and the 64-bit version of OpenSC!"
msgstr ""

#: ../pro/smime-email-encryption-with-thunderbird.rst:25
msgid "Settings in Thunderbird"
msgstr ""

#: ../pro/smime-email-encryption-with-thunderbird.rst:27
msgid ""
"Before you can use the Nitrokey in Thunderbird you have to activate "
"S/MIME encryption in the account settings. You can achieve this by "
"clicking on the menu and go to ‘Preferences’ -> ‘Account Settings’ and "
"clicking on ‘Security’ in the account settings window."
msgstr ""

#: ../pro/smime-email-encryption-with-thunderbird.rst:37
msgid ""
"Click on “Security Devices” to import the right PCKS11 module. Click on "
"“Load” on the right-hand side. Now give the Module a name (like “OpenSC "
"Module”) and click on “Browse” to choose the location of the Module (see "
"below)."
msgstr ""

#: ../pro/smime-email-encryption-with-thunderbird.rst:47
msgid ""
"On Windows the right file lays under “C:\\Windows\\System32\\opensc-"
"pkcs11.dll”. On macOS and GNU/Linux the file should be in “/lib/pkcs11"
"/opensc-pkcs11.so” or “/usr/lib/pkcs11/opensc-pkcs11.so” or alike. Press "
"“OK” twice and you are back in security section of the account settings. "
"Now you can actually choose a certificate on the upper part of the "
"window. You should get asked for a PIN to unlock your Nitrokey. Please "
"type in your User PIN."
msgstr ""

#: ../pro/smime-email-encryption-with-thunderbird.rst:64
msgid ""
"When composing an email you can now choose to encrypt and sign the "
"message."
msgstr ""

#: ../hsm/mac/index.rst:2
msgid "Nitrokey HSM with macOS"
msgstr ""

#: ../hsm/mac/index.rst:11 ../hsm/windows/index.rst:11
msgid ""
"Install `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`__. "
"Alternatively, install `this <https://www.cardcontact.de/download/sc-hsm-"
"starterkit.zip>`__ driver (`source <https://github.com/CardContact/sc-"
"hsm-embedded>`__)."
msgstr ""

#: ../pro/smime-email-encryption-with-outlook.rst:2
msgid "S/MIME Email Encryption with Outlook"
msgstr ""

#: ../pro/smime-email-encryption-with-outlook.rst:7
msgid ""
"If you do not have a S/MIME key-certificate pair installed on your "
"Nitrokey yet, please look at `this page <https://docs.nitrokey.com/pro"
"/smime-email-encryption.html>`__ first."
msgstr ""

#: ../pro/smime-email-encryption-with-outlook.rst:12
msgid ""
"You need to have OpenSC installed on your System. Please have a look at "
"the `wiki page of the OpenSC project "
"<https://github.com/OpenSC/OpenSC/wiki>`__."
msgstr ""

#: ../pro/smime-email-encryption-with-outlook.rst:22
msgid "Settings in Outlook"
msgstr ""

#: ../pro/smime-email-encryption-with-outlook.rst:24
msgid ""
"Before you can use the Nitrokey in Outlook you have to activate S/MIME "
"encryption. You can achieve this by clicking on to ‘Start’ -> ‘Options’ "
"and clicking on ‘Trust Center’ in the options window. In section ‘Email "
"Security’ you can choose your S/MIME identity. Your certificate should "
"already be recognized by Outlook."
msgstr ""

#: ../pro/smime-email-encryption-with-outlook.rst:30
msgid "|img1|"
msgstr ""

#: ../pro/smime-email-encryption-with-outlook.rst:32
msgid "|img2|"
msgstr ""

#: ../pro/smime-email-encryption-with-outlook.rst:38
msgid ""
"When composing a mail you can now choose to encrypt and sign the message "
"in the ‘Options’ ribbon of the compose window."
msgstr ""

#: ../pro/smime-email-encryption-with-outlook.rst:41
msgid "|img3|"
msgstr ""

#: ../pro/smime-email-encryption-with-outlook.rst:45
msgid ""
"Outlook will only encrypt message to mail addresses which are saved in "
"your address book. So make sure, that the persons you want to write an "
"encrypted mail to have an entry in Outlook’s contacts. You can ask the "
"person to write you a signed mail, so that you can import the certificate"
" information."
msgstr ""

#: ../pro/smime-email-encryption-with-outlook.rst:47
msgid ""
"Depending on your certificate or the certificate of your partners you may"
" have to import a so-called root certificate. This is the certificate of "
"the party which issued the certificate you or your partner uses. You "
"should usually got informed if this is necessary."
msgstr ""

#: ../hsm/windows/index.rst:2
msgid "Nitrokey HSM with Windows"
msgstr ""

