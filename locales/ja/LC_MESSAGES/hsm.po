# SOME DESCRIPTIVE TITLE.
# Copyright (C) Nitrokey
# This file is distributed under the same license as the Nitrokey Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Nitrokey Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-05 12:32+0100\n"
"PO-Revision-Date: 2022-09-12 11:38+0000\n"
"Last-Translator: Erik Grun <erik@nitrokey.com>\n"
"Language-Team: Japanese <https://translate.nitrokey.com/projects/"
"nitrokey-documentation/documentation-hsm/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.10.1\n"

#: ../hsm/apache2-tls.rst:2
#: ../hsm/apache2-tls.rst:2
#: ../hsm/apache2-tls.rst:2
#: ../hsm/apache2-tls.rst:2
msgid "TLS Setup with Apache2"
msgstr "Apache2でのTLSセットアップ"

#: ../hsm/apache2-tls.rst:10
#: ../hsm/apache2-tls.rst:10
#: ../hsm/apache2-tls.rst:10
#: ../hsm/apache2-tls.rst:10
msgid "The very same concept as descriped here can be used for many applications using openssl as crypto-backend. The concept mostly boils down to: replace (secret) key-file with PKCS#11 URL referencing a key on a security token (Nitrokey)"
msgstr ""
"ここで説明されているのと全く同じコンセプトが、opensslをcrypto-backendとして使用する多くのアプリケーションに使用できます。コンセプトは"
"主に以下のようなものです：セキュリティトークン（Nitrokey）上のキーを参照するPKCS#11 URLで（秘密の）キーファイルを置き換える。"

#: ../hsm/apache2-tls.rst:17
#: ../hsm/import-keys-certs.rst:26
#: ../hsm/apache2-tls.rst:17
#: ../hsm/import-keys-certs.rst:26
#: ../hsm/pkcs11-url.rst:14
#: ../hsm/apache2-tls.rst:17
#: ../hsm/import-keys-certs.rst:26
#: ../hsm/pkcs11-url.rst:14
#: ../hsm/pkcs11-url.rst:14
#: ../hsm/apache2-tls.rst:17
#: ../hsm/import-keys-certs.rst:26
#: ../hsm/pkcs11-url.rst:14
msgid "Preparation"
msgstr "準備"

#: ../hsm/apache2-tls.rst:19
#: ../hsm/apache2-tls.rst:19
#: ../hsm/apache2-tls.rst:19
#: ../hsm/apache2-tls.rst:19
msgid "ensure that the `apache2` version is at least 2.4.42 for proper ``mod_ssl`` support"
msgstr "``mod_ssl``を適切にサポートするために、`apache2`のバージョンが最低でも2.4.42であることを確認してください。"

#: ../hsm/apache2-tls.rst:21
#: ../hsm/apache2-tls.rst:21
#: ../hsm/apache2-tls.rst:21
#: ../hsm/apache2-tls.rst:21
msgid "activate ``mod_ssl`` using ``a2enmod ssl``, if not already done"
msgstr "``mod_ssl``を、``a2enmod ssl``を使って、まだやっていなければ起動する。"

#: ../hsm/apache2-tls.rst:23
#: ../hsm/apache2-tls.rst:23
#: ../hsm/apache2-tls.rst:23
#: ../hsm/apache2-tls.rst:23
msgid "additionally ``openssl`` is needed and ``libengine-pkcs11-openssl`` see :doc:`PKCS#11 URL<pkcs11-url>`"
msgstr ""
"さらに``openssl``が必要で、``libengine-pkcs11-openssl``は :doc:`PKCS#11 "
"URL<pkcs11-url>` を参照してください。"

#: ../hsm/apache2-tls.rst:29
#: ../hsm/apache2-tls.rst:29
#: ../hsm/apache2-tls.rst:29
#: ../hsm/apache2-tls.rst:29
msgid "Configure Apache2 to Use a Security Key"
msgstr "セキュリティキーを使用するように Apache2 を設定する"

#: ../hsm/apache2-tls.rst:31
#: ../hsm/apache2-tls.rst:31
#: ../hsm/apache2-tls.rst:31
#: ../hsm/apache2-tls.rst:31
msgid "Basically the only thing to do is replace ``SSLCertificateFile`` with the proper PKCS#11 URL and delete any other references to keys or certificates. E.g., ``SSLCertificateKeyFile`` is not needed anymore."
msgstr ""
"基本的には、``SSLCertificateFile``を適切なPKCS#11のURLに置き換え、鍵や証明書への他の参照を削除するだけです。例えば、``S"
"SLCertificateKeyFile``はもう必要ありません。"

#: ../hsm/apache2-tls.rst:35
#: ../hsm/apache2-tls.rst:35
#: ../hsm/apache2-tls.rst:35
#: ../hsm/apache2-tls.rst:35
msgid "An example directive might look like this:"
msgstr "ディレクティブの例は次のようになります。"

#: ../hsm/apache2-tls.rst:41
#: ../hsm/apache2-tls.rst:41
#: ../hsm/apache2-tls.rst:41
#: ../hsm/apache2-tls.rst:41
msgid "The proper PKCS#11 URL can be extracted as documented in :doc:`PKCS#11 URL Generation<pkcs11-url>`"
msgstr ""
"適切なPKCS#11 URLは、 :doc:`PKCS#11 URL "
"Generation<pkcs11-url>`で説明されているように抽出することができます。"

#: ../hsm/apache2-tls.rst:43
#: ../hsm/apache2-tls.rst:43
#: ../hsm/apache2-tls.rst:43
#: ../hsm/apache2-tls.rst:43
msgid "Be sure to place the directive inside a `VirtualHost` configuration."
msgstr "このディレクティブは必ず `VirtualHost` の設定の中に入れてください。"

#: ../hsm/apache2-tls.rst:46
#: ../hsm/apache2-tls.rst:46
#: ../hsm/apache2-tls.rst:46
#: ../hsm/apache2-tls.rst:46
msgid "Provide PIN During Apache2 Startup"
msgstr "Apache2起動時のPINの提供"

#: ../hsm/apache2-tls.rst:48
#: ../hsm/apache2-tls.rst:48
#: ../hsm/apache2-tls.rst:48
#: ../hsm/apache2-tls.rst:48
msgid "Using the previously described method Apache2 will ask on every startup for the User-PIN, thus basically declining batch startup. Apache2 provides another directive to provide the PIN during startup."
msgstr ""
"前述の方法を使うと、Apache2 は起動の度に User-PIN を尋ねてきますので、 基本的にバッチ起動はしません。Apache2 は起動時に "
"PIN を提供する別のディレクティブを提供します。"

#: ../hsm/apache2-tls.rst:56
#: ../hsm/apache2-tls.rst:56
#: ../hsm/apache2-tls.rst:56
#: ../hsm/apache2-tls.rst:56
msgid "Apache2 expects an executable after ``|``, which will be executed during startup and it's output (trailing newline is expected) will be used as PIN. Obviously arbitrary complex PIN retrieval methods can be implemented using this approach. Although here a trivial example has been chosen to just ``echo`` the PIN during startup."
msgstr ""
"Apache2は、``|``の後に実行ファイルを期待しており、起動時に実行され、その出力(末尾の改行が期待される)がPINとして使用されます。明らかに、こ"
"のアプローチを使って、任意の複雑なPIN検索方法を実装することができます。しかし、ここでは、起動時に``echo``のPINを取得するだけの些細な例が選ば"
"れています。"

#: ../hsm/apache2-tls.rst:61
#: ../hsm/apache2-tls.rst:61
#: ../hsm/apache2-tls.rst:61
#: ../hsm/apache2-tls.rst:61
msgid "Further ``SSLPassPhraseDialog`` is a global directive, thus has to be placed in the global configuration scope in Apache2."
msgstr ""
"さらに、``SSLPassPhraseDialog``はグローバルなディレクティブなので、Apache2ではグローバルなコンフィギュレーションスコープに置"
"かなければなりません。"

#: ../hsm/apache2-tls.rst:66
#: ../hsm/apache2-tls.rst:66
#: ../hsm/apache2-tls.rst:66
#: ../hsm/apache2-tls.rst:66
msgid "This shown example is not a secure mechanism to pass your PIN, as it will be written in plain-text inside your configuration"
msgstr "この例では、PINが設定の中に平文で書き込まれるため、PINを渡すための安全なメカニズムではありません。"

#: ../hsm/apache2-tls.rst:69
#: ../hsm/apache2-tls.rst:69
#: ../hsm/apache2-tls.rst:69
#: ../hsm/apache2-tls.rst:69
msgid "See the `Apache2 mod_ssl documentation`_ for more details on this feature."
msgstr "この機能の詳細については、`Apache2 mod_ssl documentation`_を参照してください。"

#: ../hsm/apache2-tls.rst:72
#: ../hsm/apache2-tls.rst:72
#: ../hsm/apache2-tls.rst:72
#: ../hsm/apache2-tls.rst:72
msgid "Complete Apache2 Config Example"
msgstr "Apache2の完全な設定例"

#: ../hsm/apache2-tls.rst:73
#: ../hsm/apache2-tls.rst:73
#: ../hsm/apache2-tls.rst:73
#: ../hsm/apache2-tls.rst:73
msgid "A complete Apache2 (``VirtualHost``) config snippet might look like this:"
msgstr "完全なApache2（``VirtualHost``）のコンフィグ・スニペットは次のようになります。"

#: ../hsm/certificate-authority.rst:2
#: ../hsm/certificate-authority.rst:2
#: ../hsm/certificate-authority.rst:2
#: ../hsm/certificate-authority.rst:2
msgid "Creating a Certificate Authority"
msgstr "認証局の作成"

#: ../hsm/certificate-authority.rst:8
#: ../hsm/certificate-authority.rst:8
#: ../hsm/certificate-authority.rst:8
#: ../hsm/certificate-authority.rst:8
msgid "This article shows you how to setup your own private certificate authority backed by a Nitrokey HSM. This certificate authority has no automation and does not really scale. Other open source projects can be referenced for automation and scalability."
msgstr ""
"この記事では、Nitrokey HSMにバックアップされた独自のプライベート認証局をセットアップする方法を紹介します。この認証局は自動化されておらず、拡張"
"性もありません。自動化と拡張性については、他のオープンソースプロジェクトを参照してください。"

#: ../hsm/certificate-authority.rst:11
#: ../hsm/certificate-authority.rst:11
#: ../hsm/certificate-authority.rst:11
#: ../hsm/certificate-authority.rst:11
msgid "Choose Cryptographic Algorithms"
msgstr "暗号化アルゴリズムの選択"

#: ../hsm/certificate-authority.rst:13
#: ../hsm/certificate-authority.rst:13
#: ../hsm/certificate-authority.rst:13
#: ../hsm/certificate-authority.rst:13
msgid "I’m going to assume that you’re as paranoid as I am, so I will be using the following command for generating private keys:"
msgstr "ここでは、あなたが私と同じように偏執的であると仮定して、以下のコマンドを使って秘密鍵を生成することにします。"

#: ../hsm/certificate-authority.rst:19
#: ../hsm/certificate-authority.rst:19
#: ../hsm/certificate-authority.rst:19
#: ../hsm/certificate-authority.rst:19
msgid "But, if you’re less paranoid that I am, you can safely choose the following options:"
msgstr "しかし、私ほど妄想癖のない方であれば、安心して以下のオプションを選択することができます。"

#: ../hsm/certificate-authority.rst:26
#: ../hsm/certificate-authority.rst:26
#: ../hsm/certificate-authority.rst:26
#: ../hsm/certificate-authority.rst:26
msgid "Likewise, I will be using the sha512 algorithm throughout this article, but sha256 can safely be used."
msgstr "同様に、この記事ではsha512アルゴリズムを使用していますが、sha256も安全に使用できます。"

#: ../hsm/certificate-authority.rst:29
#: ../hsm/certificate-authority.rst:29
#: ../hsm/certificate-authority.rst:29
#: ../hsm/certificate-authority.rst:29
msgid "Preparing to Start"
msgstr "スタートの準備"

#: ../hsm/certificate-authority.rst:31
#: ../hsm/certificate-authority.rst:31
#: ../hsm/certificate-authority.rst:31
#: ../hsm/certificate-authority.rst:31
msgid "To start with, you need to pick a directory to store your CA."
msgstr "まず最初に、CAを保存するディレクトリを選ぶ必要があります。"

#: ../hsm/certificate-authority.rst:42
#: ../hsm/certificate-authority.rst:42
#: ../hsm/certificate-authority.rst:42
#: ../hsm/certificate-authority.rst:42
msgid "Install the necessary tools:"
msgstr "必要なツールをインストールします。"

#: ../hsm/certificate-authority.rst:52
#: ../hsm/certificate-authority.rst:52
#: ../hsm/certificate-authority.rst:52
#: ../hsm/certificate-authority.rst:52
msgid "For Windows download the official `OpenSC releases <https://github.com/OpenSC/OpenSC/releases>`_ and make sure you install `p11tool as described <https://github.com/thales-e-security/p11tool>`_. Using the PowerShell most commands should be identical as long as both tools and their binaries are within your ``PATH``."
msgstr ""
"Windows では、`OpenSC の公式リリース <https://github.com/OpenSC/OpenSC/releases>`_ "
"をダウンロードし、`p11tool を説明通りに <https://github.com/thales-e-security/p11tool>`_ インス"
"トールすることを確認してください。両方のツールとそのバイナリが``PATH`内にある限り、PowerShellを使用してほとんどのコマンドは同じになるはず"
"です。"

#: ../hsm/certificate-authority.rst:58
#: ../hsm/certificate-authority.rst:58
#: ../hsm/certificate-authority.rst:58
#: ../hsm/certificate-authority.rst:58
msgid "Creating the Root Certificate Authority"
msgstr "ルート認証局の作成"

#: ../hsm/certificate-authority.rst:60
#: ../hsm/certificate-authority.rst:60
#: ../hsm/certificate-authority.rst:60
#: ../hsm/certificate-authority.rst:60
msgid "We start by generating the private key for the certificate authority directly on the Nitrokey HSM. This allows us to use the private key in the future, but not access it."
msgstr ""
"まず、認証局の秘密鍵をNitrokey HSM上で直接生成します。これにより、将来的に秘密鍵を使用することはできますが、アクセスすることはできません。"

#: ../hsm/certificate-authority.rst:83
#: ../hsm/certificate-authority.rst:83
#: ../hsm/certificate-authority.rst:83
#: ../hsm/certificate-authority.rst:83
msgid "Note the ID number (e0161cc8b6f5d66ac6835ecdecb623fc0506a675), we’ll need it later."
msgstr "ID番号（e0161cc8b6f5d66ac6835ecdecb623fc0506a675）を覚えておいてください、後で必要になります。"

#: ../hsm/certificate-authority.rst:85
#: ../hsm/certificate-authority.rst:240
#: ../hsm/certificate-authority.rst:85
#: ../hsm/certificate-authority.rst:240
#: ../hsm/certificate-authority.rst:85
#: ../hsm/certificate-authority.rst:240
#: ../hsm/certificate-authority.rst:85
#: ../hsm/certificate-authority.rst:240
msgid "If you need the ID in the future, you can list the keys on the Nitrokey HSM:"
msgstr "将来的にIDが必要になった場合、Nitrokey HSMにキーをリストアップすることができます。"

#: ../hsm/certificate-authority.rst:91
#: ../hsm/certificate-authority.rst:246
#: ../hsm/certificate-authority.rst:91
#: ../hsm/certificate-authority.rst:246
#: ../hsm/certificate-authority.rst:91
#: ../hsm/certificate-authority.rst:246
#: ../hsm/certificate-authority.rst:91
#: ../hsm/certificate-authority.rst:246
msgid "We need to create a config file to generate a self-signed public certificate."
msgstr "自己署名付き公開証明書を生成するための設定ファイルを作成する必要があります。"

#: ../hsm/certificate-authority.rst:97
#: ../hsm/certificate-authority.rst:252
#: ../hsm/certificate-authority.rst:97
#: ../hsm/certificate-authority.rst:252
#: ../hsm/certificate-authority.rst:97
#: ../hsm/certificate-authority.rst:252
#: ../hsm/certificate-authority.rst:97
#: ../hsm/certificate-authority.rst:252
msgid "Fill out the request information in <angle brackets> with information for your CA."
msgstr "カリフォルニア州の情報を<angle brackets>内のリクエスト情報に入力してください。"

#: ../hsm/certificate-authority.rst:157
#: ../hsm/certificate-authority.rst:157
#: ../hsm/certificate-authority.rst:157
#: ../hsm/certificate-authority.rst:157
msgid "Generate the self-signed public certificate from the private key. Use the private key id value from earlier."
msgstr "秘密鍵から自己署名付き公開証明書を生成します。先ほどの秘密鍵のid値を使用します。"

#: ../hsm/certificate-authority.rst:165
#: ../hsm/certificate-authority.rst:165
#: ../hsm/certificate-authority.rst:165
#: ../hsm/certificate-authority.rst:165
msgid "Verify that the root certificate was generated correctly. Verify that Signature-Algorithm matches above and below. Verify that Issuer and Subject match, all root certificates are self signed. Verify that Key Usage matches what was in the v3_ca information in our config file."
msgstr ""
"ルート証明書が正しく生成されていることを確認する。Signature-Algorithm "
"が上下で一致していることを確認する。すべてのルート証明書が自己署名であるため、IssuerとSubjectが一致していることを確認する。Key "
"Usageが設定ファイルのv3_caの情報と一致していることを確認します。"

#: ../hsm/certificate-authority.rst:213
#: ../hsm/certificate-authority.rst:213
#: ../hsm/certificate-authority.rst:213
#: ../hsm/certificate-authority.rst:213
msgid "Creating the Intermediate Certificate Authority"
msgstr "中間認証局の作成"

#: ../hsm/certificate-authority.rst:215
#: ../hsm/certificate-authority.rst:215
#: ../hsm/certificate-authority.rst:215
#: ../hsm/certificate-authority.rst:215
msgid "We continue by generating the private key for the intermediate certificate authority directly on the Nitrokey HSM. This allows us to use the private key in the future, but not access it."
msgstr ""
"続けて、中間認証局の秘密鍵をNitrokey "
"HSM上で直接生成します。これにより、将来的に秘密鍵を使用することはできますが、アクセスすることはできません。"

#: ../hsm/certificate-authority.rst:238
#: ../hsm/certificate-authority.rst:238
#: ../hsm/certificate-authority.rst:238
#: ../hsm/certificate-authority.rst:238
msgid "Note the ID number (bcb48fe9b566ae61891aabbfde6a23d4ff3ab639), we’ll need it later."
msgstr "ID番号(bcb48fe9b566ae61891aabbfde6a23d4ff3ab639)をメモしてください。"

#: ../hsm/certificate-authority.rst:279
#: ../hsm/certificate-authority.rst:279
#: ../hsm/certificate-authority.rst:279
#: ../hsm/certificate-authority.rst:279
msgid "Generate the certificate signing request for the intermediate CA from the intermediate CA’s private key. Use the private key ID value from earlier."
msgstr "中間 CA の秘密鍵から中間 CA の証明書署名要求を生成する。先ほどの秘密鍵のID値を使用します。"

#: ../hsm/certificate-authority.rst:287
#: ../hsm/certificate-authority.rst:287
#: ../hsm/certificate-authority.rst:287
#: ../hsm/certificate-authority.rst:287
msgid "Verify that the CSR was created correctly. Verify that your Subject is correct. Verify that your Public Key and Signature Algorithm are correct."
msgstr "CSRが正しく作成されているか確認してください。Subjectが正しいことを確認する。公開鍵と署名アルゴリズムが正しいことを確認してください。"

#: ../hsm/certificate-authority.rst:320
#: ../hsm/certificate-authority.rst:525
#: ../hsm/certificate-authority.rst:320
#: ../hsm/certificate-authority.rst:525
#: ../hsm/certificate-authority.rst:320
#: ../hsm/certificate-authority.rst:525
#: ../hsm/certificate-authority.rst:320
#: ../hsm/certificate-authority.rst:525
msgid "We need to find out the fully qualified PKCS#11 URI for your private key:"
msgstr "秘密鍵の完全修飾された PKCS#11 URI を見つける必要があります。"

#: ../hsm/certificate-authority.rst:358
#: ../hsm/certificate-authority.rst:563
#: ../hsm/certificate-authority.rst:358
#: ../hsm/certificate-authority.rst:563
#: ../hsm/certificate-authority.rst:358
#: ../hsm/certificate-authority.rst:563
#: ../hsm/certificate-authority.rst:358
#: ../hsm/certificate-authority.rst:563
msgid "In this instance, the fully qualified PKCS#11 URI is:"
msgstr "この例では、完全に修飾されたPKCS#11 URIは"

#: ../hsm/certificate-authority.rst:364
#: ../hsm/certificate-authority.rst:364
#: ../hsm/certificate-authority.rst:364
#: ../hsm/certificate-authority.rst:364
msgid "Now, we need to create a config file to use the private key of the root certificate to sign the csr of the intermediate certificate."
msgstr "次に、ルート証明書の秘密鍵を使って中間証明書のcsrに署名するための設定ファイルを作成します。"

#: ../hsm/certificate-authority.rst:416
#: ../hsm/certificate-authority.rst:416
#: ../hsm/certificate-authority.rst:416
#: ../hsm/certificate-authority.rst:416
msgid "Then sign the intermediate certificate with the root certificate."
msgstr "そして、中間証明書をルート証明書で署名します。"

#: ../hsm/certificate-authority.rst:456
#: ../hsm/certificate-authority.rst:456
#: ../hsm/certificate-authority.rst:456
#: ../hsm/certificate-authority.rst:456
msgid "Verify that the root certificate was generated correctly. Verify that the Issuer and Subject are different, and correct. Verify that the Key Usage matches the config file. Verify that the signature algorithm are correct above and below."
msgstr ""
"ルート証明書が正しく生成されていることを確認する。Issuer と Subject が異なっており、正しいことを確認する。Key Usage "
"が設定ファイルと一致していることを確認する。署名アルゴリズムが上下ともに正しいことを確認する。"

#: ../hsm/certificate-authority.rst:503
#: ../hsm/certificate-authority.rst:503
#: ../hsm/certificate-authority.rst:503
#: ../hsm/certificate-authority.rst:503
msgid "Verify that the intermediate certificate verifies against the root certificate."
msgstr "中間証明書がルート証明書と照合していることを確認する。"

#: ../hsm/certificate-authority.rst:510
#: ../hsm/certificate-authority.rst:510
#: ../hsm/certificate-authority.rst:510
#: ../hsm/certificate-authority.rst:510
msgid "Create a certificate chain file:"
msgstr "サーティファイドチェーンファイルを作成します。"

#: ../hsm/certificate-authority.rst:516
#: ../hsm/certificate-authority.rst:516
#: ../hsm/certificate-authority.rst:516
#: ../hsm/certificate-authority.rst:516
msgid "You now have a certificate authority backed by an HSM."
msgstr "これで、HSMに支えられた認証局ができました。"

#: ../hsm/certificate-authority.rst:519
#: ../hsm/certificate-authority.rst:519
#: ../hsm/certificate-authority.rst:519
#: ../hsm/certificate-authority.rst:519
msgid "Sign a Server Certificate"
msgstr "サーバー証明書の署名"

#: ../hsm/certificate-authority.rst:521
#: ../hsm/certificate-authority.rst:521
#: ../hsm/certificate-authority.rst:521
#: ../hsm/certificate-authority.rst:521
msgid "Now that you have a certificate authority, you’d probably like to know how to use it."
msgstr "さて、認証局を手に入れたところで、その使い方を知りたいと思うでしょう。"

#: ../hsm/certificate-authority.rst:523
#: ../hsm/certificate-authority.rst:523
#: ../hsm/certificate-authority.rst:523
#: ../hsm/certificate-authority.rst:523
msgid "Create a CSR in the normal method for your application. Proper creation of your certificate, including SAN, for your particular application is outside the scope of this document."
msgstr ""
"お客様のアプリケーションに合わせた通常の方法でCSRを作成してください。お客様の特定の用途に合わせたSANを含む証明書の適切な作成は、本文書の範囲外です。"

#: ../hsm/certificate-authority.rst:569
#: ../hsm/certificate-authority.rst:569
#: ../hsm/certificate-authority.rst:569
#: ../hsm/certificate-authority.rst:569
msgid "Create a config file to use the private key of the intermediate certificate to sign the CSRs of your servers."
msgstr "中間証明書の秘密鍵を使って、サーバーのCSRに署名するための設定ファイルを作成します。"

#: ../hsm/certificate-authority.rst:624
#: ../hsm/certificate-authority.rst:624
#: ../hsm/certificate-authority.rst:624
#: ../hsm/certificate-authority.rst:624
msgid "Then run openssl to sign the server’s CSR."
msgstr "その後、opensslを実行して、サーバーのCSRに署名します。"

#: ../hsm/certificate-authority.rst:673
#: ../hsm/certificate-authority.rst:673
#: ../hsm/certificate-authority.rst:673
#: ../hsm/certificate-authority.rst:673
msgid "References"
msgstr "リファレンス"

#: ../hsm/certificate-authority.rst:675
#: ../hsm/certificate-authority.rst:675
#: ../hsm/certificate-authority.rst:675
#: ../hsm/certificate-authority.rst:675
msgid "I used the following resources to help in compiling this document."
msgstr "この資料を作成するにあたり、以下の資料を参考にしました。"

#: ../hsm/certificate-authority.rst:677
#: ../hsm/certificate-authority.rst:677
#: ../hsm/certificate-authority.rst:677
#: ../hsm/certificate-authority.rst:677
msgid "`How to initialize your Nitrokey HSM <https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM#initialize-the-device>`_"
msgstr ""
"`Nitrokey HSMを初期化する方法 <https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM"
"#initialize-the-device>`_。"

#: ../hsm/certificate-authority.rst:678
#: ../hsm/certificate-authority.rst:678
#: ../hsm/certificate-authority.rst:678
#: ../hsm/certificate-authority.rst:678
msgid "`How to create a root and intermediate CA <https://jamielinux.com/docs/openssl-certificate-authority/create-the-root-pair.html>`_"
msgstr ""
"`ルートおよび中間CAの作成方法 <https://jamielinux.com/docs/openssl-certificate-authority/"
"create-the-root-pair.html>`_。"

#: ../hsm/certificate-authority.rst:679
#: ../hsm/certificate-authority.rst:679
#: ../hsm/certificate-authority.rst:679
#: ../hsm/certificate-authority.rst:679
msgid "`How to ensure the serial numbers of your intermediate CA and server certs are up to spec <https://www.phildev.net/ssl/creating_ca.html>`_"
msgstr ""
"`中間認証局とサーバーの証明書のシリアル番号が仕様通りであることを確認する方法 <https://www.phildev.net/ssl/"
"creating_ca.html>`_。"

#: ../hsm/certificate-authority.rst:680
#: ../hsm/certificate-authority.rst:680
#: ../hsm/certificate-authority.rst:680
#: ../hsm/certificate-authority.rst:680
msgid "`How to generate ECC private keys <https://dev.to/benjaminblack/obtaining-an-elliptic-curve-dsa-certificate-with-lets-encrypt-51bc>`_"
msgstr ""
"`ECC秘密鍵の生成方法 <https://dev.to/benjaminblack/obtaining-an-elliptic-curve-dsa-"
"certificate-with-lets-encrypt-51bc>`_。"

#: ../hsm/certificate-authority.rst:681
#: ../hsm/certificate-authority.rst:681
#: ../hsm/certificate-authority.rst:681
#: ../hsm/certificate-authority.rst:681
msgid "`How to find the PCKS11 URI from your HSM <https://www.infradead.org/openconnect/pkcs11.html>`_"
msgstr ""
"` <https://www.infradead.org/openconnect/pkcs11.html>`_ "
"HSMからPCKS11のURIを見つける方法。"

#: ../hsm/certificate-authority.rst:682
#: ../hsm/certificate-authority.rst:682
#: ../hsm/certificate-authority.rst:682
#: ../hsm/certificate-authority.rst:682
msgid "`Troubleshooting (forum) <https://support.nitrokey.com/t/pki-ca-nitrokey-hsm-does-not-support-signing/2598/14>`_"
msgstr ""
"`トラブルシューティング（フォーラム） <https://support.nitrokey.com/t/"
"pki-ca-nitrokey-hsm-does-not-support-signing/2598/14>`_"

#: ../hsm/certificate-authority.rst:685
#: ../hsm/certificate-authority.rst:685
#: ../hsm/certificate-authority.rst:685
#: ../hsm/certificate-authority.rst:685
msgid "This document was originally `written by lyntux <https://gist.github.com/lyntux/f02c6c3414ce48bc8ea8ab6dcdba1623>`_"
msgstr ""
"この文書はもともと` lyntux <https://gist.github.com/lyntux/"
"f02c6c3414ce48bc8ea8ab6dcdba1623>`_によって書かれたものです。"

#: ../hsm/faq.rst:2
msgid "Nitrokey HSM FAQ"
msgstr "Nitrokey HSM FAQ"

#: ../shared-faqs/nitrokeys.rst:2
msgid "**Q:** Which Operating Systems are supported?"
msgstr "**Q:**どのようなOSに対応していますか？"

#: ../shared-faqs/nitrokeys.rst:2
msgid "Windows, Linux, and Mac OS X."
msgstr "Windows、Linux、Mac OS Xに対応しています。"

#: ../shared-faqs/nitrokeys.rst:5
msgid "**Q:** What can I use the Nitrokey for?"
msgstr "**Q:** Nitrokeyはどのような用途に使用できますか？"

#: ../shared-faqs/nitrokeys.rst:5
#, fuzzy
msgid "See the `frontpage`_ for an overview of supported use cases."
msgstr "サポートされているユースケースの概要については、`frontpage`_をご覧ください。"

#: ../hsm/faq.rst:17
msgid "**Q:** What is the maximum length of the PIN?"
msgstr "**Q:** PINの長さはどのくらいですか？"

#: ../hsm/faq.rst:9
msgid "Nitrokey uses PINs instead of passwords. The main difference is that the hardware limits the amount of tries to three while a limit doesn't exist for passwords. Because of this, a short PIN is still secure and there is not need to choose a long and complex PIN."
msgstr ""
"Nitrokeyは、パスワードの代わりにPINを使用します。主な違いは、ハードウェアが試行回数を3回に制限しているのに対し、パスワードには制限がないことで"
"す。このため、短い暗証番号でも安全であり、長くて複雑な暗証番号を選択する必要はありません。"

#: ../hsm/faq.rst:14
msgid "Nitrokey PINs can be up to 16 digits long and can consist of numbers, characters and special characters. Note: When using GnuPG or OpenSC, 32 character long PINs can be used but aren't supported by Nitrokey App."
msgstr ""
"NitrokeyのPINは最大16桁の長さで、数字、文字、特殊文字で構成することができます。注：GnuPGまたはOpenSCを使用する場合、32文字の長さ"
"のPINを使用できますが、Nitrokey Appではサポートされていません。"

#: ../hsm/faq.rst:27
msgid "**Q:** What is the User PIN for?"
msgstr "**Q:** ユーザーPINは何のためのものですか？"

#: ../hsm/faq.rst:20
msgid "The PIN is at least 6-digits long and is used to get access to the contect of the Nitrokey. This is the PIN you will use a lot in every day use"
msgstr "PINは少なくとも6桁の長さで、Nitrokeyのコンテクストにアクセスするために使用されます。このPINは、日常的によく使うものです。"

#: ../hsm/faq.rst:24
msgid "The PIN can have up to 16 digits and other characters (e.g. alphabetic and special characters). But as the PIN is blocked as soon three wrong PIN attempts were done, it is sufficiently secure to only have a 6 digits PIN."
msgstr ""
"暗証番号は、最大16桁の数字とその他の文字（アルファベットや特殊文字など）を使用することができます。しかし、暗証番号を3回間違えるとすぐにブロックされるた"
"め、6桁の暗証番号だけでも十分に安全です。"

#: ../hsm/faq.rst:34
msgid "**Q:** What is the SO PIN for?"
msgstr "**Q:** SOのPINは何のためにあるのですか？"

#: ../hsm/faq.rst:30
msgid "The SO PIN is used in the Nitrokey HSM only and is something like a \"master\" PIN with special properties. Please read this instructions carefully to understand the SO PIN of the Nitrokey HSM."
msgstr ""
"SO PINは、Nitrokey HSMでのみ使用され、特殊な性質を持つ\"master\"PINのようなものです。この説明書をよく読んで、"
"Nitrokey HSMのSO PINについて理解してください。"

#: ../hsm/faq.rst:34
msgid "The SO PIN has to be exactly 16 digits long."
msgstr "SO PINは正確に16桁の長さでなければなりません。"

#: ../hsm/faq.rst:38
msgid "**Q:** How many data objects (DF, EF) can be stored?"
msgstr "**Q:** データオブジェクト（DF, EF）はいくつまで保存できますか？"

#: ../hsm/faq.rst:37
msgid "76 KB EEPROM total, max. 150 x ECC-521 keys, max. 300 x ECC/AES-256 keys, max. 19 x RSA-4096 keys, max. 38 x RSA-2048 keys"
msgstr ""
"76KBのEEPROM合計、最大150 x ECC-521キー、最大300 x ECC/AES-256キー，最大．19個のRSA-4096キー"
"、最大1個のRSA-2048キー38個のRSA-2048キー"

#: ../hsm/faq.rst:41
msgid "**Q:** How many keys can I store?"
msgstr "**Q:** 鍵は何本まで保存できますか？"

#: ../hsm/faq.rst:41
msgid "Nitrokey HSM can store 20 RSA-2048 and 31 ECC-256 key pairs."
msgstr "Nitrokey HSMは20個のRSA-2048と31個のECC-256のキーペアを保存できます。"

#: ../hsm/faq.rst:49
msgid "**Q:** How fast is encryption and signing?"
msgstr "**Q：**暗号化や署名の速度はどのくらいですか？"

#: ../hsm/faq.rst:44
msgid "Key generation on-card: RSA 2048: 2 per minute"
msgstr "鍵の生成はカード上で行います。RSA 2048: 2個/分"

#: ../hsm/faq.rst:45
msgid "Key generation on-card: ECC 256: 10 per minute."
msgstr "鍵の生成はカード上で行います。ECC 256：毎分10回。"

#: ../hsm/faq.rst:46
msgid "Signature creation with off-card hash: RSA 2048; 100 per minute"
msgstr "オフカードハッシュによる署名作成RSA 2048; 100/分"

#: ../hsm/faq.rst:47
msgid "Signature creation with off-card hash: ECDSA 256: 360 per minute"
msgstr "オフカードハッシュでの署名作成ECDSA 256: 360/分"

#: ../hsm/faq.rst:48
msgid "Signature creation with on-card SHA-256 and 1 kb data: RSA 2048; 68 per minute"
msgstr "オンカードのSHA-256と1kbのデータで署名作成。RSA 2048; 68/分"

#: ../hsm/faq.rst:49
msgid "Signature creation with on-card SHA-256 and 1 kb data: ECDSA 256: 125 per minute"
msgstr "オンカードのSHA-256と1kbのデータで署名作成。ECDSA 256: 125/分"

#: ../hsm/faq.rst:53
msgid "**Q:** How can I distinguish a Nitrokey HSM1 from an Nitrokey HSM2?"
msgstr "**Q:** Nitrokey HSM1とNitrokey HSM2はどのようにして見分けることができますか？"

#: ../hsm/faq.rst:52
msgid "Use ``opensc-tool --list-algorithms`` and compare with the table below. Please also see `this thread`_ for the factsheets and more details."
msgstr ""
"``opensc-tool --list-"
"algorithms``を使って、下の表と比較してみてください。また、ファクトシートや詳細については`このスレッド`_をご覧ください。"

#: ../shared-faqs/algos.rst:3
msgid "**Q:** Which algorithms and maximum key length are supported?"
msgstr "**Q:**どのようなアルゴリズムと最大鍵長に対応していますか？"

#: ../shared-faqs/algos.rst:3
msgid "See the following table:"
msgstr "次の表を参照してください。"

#: ../shared-faqs/algos.rst:6
msgid "Start"
msgstr "スタート"

#: ../shared-faqs/algos.rst:6
msgid "Pro + Storage"
msgstr "プロ＋ストレージ"

#: ../shared-faqs/algos.rst:6
msgid "Pro 2 + Storage 2"
msgstr "Pro 2 + Storage 2"

#: ../shared-faqs/algos.rst:6
msgid "HSM"
msgstr "HSM"

#: ../shared-faqs/algos.rst:6
msgid "HSM2"
msgstr "HSM2"

#: ../shared-faqs/algos.rst:8
msgid "rsa1024"
msgstr "rsa1024"

#: ../shared-faqs/algos.rst:8
#: ../shared-faqs/algos.rst:8
#: ../shared-faqs/algos.rst:8
#: ../shared-faqs/algos.rst:8
#: ../shared-faqs/algos.rst:10
#: ../shared-faqs/algos.rst:10
#: ../shared-faqs/algos.rst:10
#: ../shared-faqs/algos.rst:10
#: ../shared-faqs/algos.rst:10
#: ../shared-faqs/algos.rst:12
#: ../shared-faqs/algos.rst:12
#: ../shared-faqs/algos.rst:12
#: ../shared-faqs/algos.rst:14
#: ../shared-faqs/algos.rst:14
#: ../shared-faqs/algos.rst:14
#: ../shared-faqs/algos.rst:16
#: ../shared-faqs/algos.rst:18
#: ../shared-faqs/algos.rst:20
#: ../shared-faqs/algos.rst:20
#: ../shared-faqs/algos.rst:20
#: ../shared-faqs/algos.rst:22
#: ../shared-faqs/algos.rst:22
#: ../shared-faqs/algos.rst:24
#: ../shared-faqs/algos.rst:24
#: ../shared-faqs/algos.rst:26
#: ../shared-faqs/algos.rst:26
#: ../shared-faqs/algos.rst:26
#: ../shared-faqs/algos.rst:28
#: ../shared-faqs/algos.rst:28
#: ../shared-faqs/algos.rst:30
#: ../shared-faqs/algos.rst:30
#: ../shared-faqs/algos.rst:32
#: ../shared-faqs/algos.rst:32
#: ../shared-faqs/algos.rst:32
#: ../shared-faqs/algos.rst:34
msgid "✓"
msgstr "✓"

#: ../shared-faqs/algos.rst:10
msgid "rsa2048"
msgstr "rsa2048"

#: ../shared-faqs/algos.rst:12
msgid "rsa3072"
msgstr "rsa3072"

#: ../shared-faqs/algos.rst:14
msgid "rsa4096"
msgstr "rsa4096"

#: ../shared-faqs/algos.rst:16
msgid "curve25519"
msgstr "カーブ25519"

#: ../shared-faqs/algos.rst:18
msgid "NIST-P 192"
msgstr "NIST-P 192"

#: ../shared-faqs/algos.rst:20
msgid "NIST-P 256"
msgstr "NIST-P 256"

#: ../shared-faqs/algos.rst:22
msgid "NIST-P 384-521"
msgstr "NIST-P 384-521"

#: ../shared-faqs/algos.rst:24
msgid "Brainpool 192"
msgstr "ブレインプール 192"

#: ../shared-faqs/algos.rst:26
msgid "Brainpool 256-320"
msgstr "ブレインプール 256-320"

#: ../shared-faqs/algos.rst:28
msgid "Brainpool 384-521"
msgstr "ブレインプール 384-521"

#: ../shared-faqs/algos.rst:30
msgid "secp192"
msgstr "secp192"

#: ../shared-faqs/algos.rst:32
msgid "secp256"
msgstr "secp256"

#: ../shared-faqs/algos.rst:34
msgid "secp521"
msgstr "secp521"

#: ../hsm/faq.rst:60
msgid "**Q:** How good is the Random Number Generator (RNG)?"
msgstr "**Q:** 乱数発生器（RNG）の性能はどのくらいですか？"

#: ../hsm/faq.rst:59
msgid "Nitrokey HSM uses the TRNG of JCOP 2.4.1r3 which has a quality of DRNG.2 (according to AIS 31 of the BSI)."
msgstr "Nitrokey HSMでは、DRNG.2の品質を持つJCOP 2.4.1r3のTRNGを使用しています（BSIのAIS 31による）。"

#: ../hsm/faq.rst:76
msgid "**Q:** Which API can I use?"
msgstr "**Q:** どのAPIを使用すればよいのでしょうか？"

#: ../hsm/faq.rst:63
msgid "OpenSC: Comprehensive instructions exist for OpenSC framework. There is nitrotool as a more comfortable frontend to OpenSC."
msgstr ""
"OpenSC: OpenSCフレームワークの包括的な説明書があります。OpenSCのより快適なフロントエンドとして、nitrotoolがあります。"

#: ../hsm/faq.rst:66
msgid "Embedded Systems: For systems with minimal memory footprint a read/only PKCS#11 module is provided by the sc-hsm-embedded project.  This PKCS#11 module is useful for deployments where key generation at the user's workplace is not required. The PKCS#11 module also supports major electronic signature cards available in the German market."
msgstr ""
"組み込みシステム。sc-sm-embedded プロジェクトでは、メモリ使用量を最小限に抑えたシステム向けに、読み取り専用の PKCS#11 "
"モジュールを提供しています。  この PKCS#11 "
"モジュールは、ユーザーの職場での鍵生成が必要ない場合に便利です。PKCS#11モジュールは、ドイツ市場で入手可能な主要な電子署名カードにも対応しています。"

#: ../hsm/faq.rst:72
msgid "OpenSCDP: The SmartCard-HSM is fully integrated with OpenSCDP, the open smart card development platform. See the public support scripts for details. To import existing keys you can use its SCSH or NitroKeyWrapper."
msgstr ""
"OpenSCDPSmartCard-HSMは、オープンなスマートカード開発プラットフォームであるOpenSCDPと完全に統合されています。詳細は、パブリッ"
"クサポートスクリプトをご覧ください。既存の鍵をインポートするには、SCSHまたはNitroKeyWrapperを使用できます。"

#: ../hsm/faq.rst:82
msgid "**Q:** Is the Nitrokey Pro Common Criteria or FIPS certified?"
msgstr "**Q:** Nitrokey ProはCommon CriteriaまたはFIPS認証を取得していますか？"

#: ../hsm/faq.rst:79
msgid "The security controler's hardware and operating system are Common Criteria certified (`Security Target`_; `HSM2 Report`_; See `here`_, click \"ICs, Smart Cards and Smart Card-Related Devices and Systems\" and search for \"NXP JCOP 3 P60\")."
msgstr ""
"セキュリティ・コントロール・システムのハードウェアとオペレーティング・システムはコモン・クライテリア認証を受けています（`Security "
"Target`_; `HSM2 Report`_; `こちら`_、\"IC, Smart Cards and Smart Card-Related "
"Devices and Systems\"をクリックし、\"NXP JCOP 3 P60\"を検索してください）。"

#: ../hsm/import-keys-certs.rst:2
#: ../hsm/import-keys-certs.rst:2
#: ../hsm/import-keys-certs.rst:2
#: ../hsm/import-keys-certs.rst:2
msgid "Importing Keys and Certificates"
msgstr "キーと証明書のインポート"

#: ../hsm/import-keys-certs.rst:8
#: ../hsm/import-keys-certs.rst:8
#: ../hsm/import-keys-certs.rst:8
#: ../hsm/import-keys-certs.rst:8
msgid "Generally the concept to import key-pairs and/or certificates is the following:"
msgstr "一般的に、鍵ペアや証明書をインポートするためのコンセプトは以下の通りです。"

#: ../hsm/import-keys-certs.rst:11
#: ../hsm/import-keys-certs.rst:11
#: ../hsm/import-keys-certs.rst:11
#: ../hsm/import-keys-certs.rst:11
msgid "Create a DKEK (Device Key Encryption Key) share"
msgstr "DKEK（デバイス・キー・エンクリプション・キー）共有の作成"

#: ../hsm/import-keys-certs.rst:12
#: ../hsm/import-keys-certs.rst:12
#: ../hsm/import-keys-certs.rst:12
#: ../hsm/import-keys-certs.rst:12
msgid "Initialize device and enable DKEK as \"Device Encryption Scheme\""
msgstr "デバイスを初期化し、DKEKをデバイス暗号化方式として有効にします。"

#: ../hsm/import-keys-certs.rst:13
#: ../hsm/import-keys-certs.rst:13
#: ../hsm/import-keys-certs.rst:13
#: ../hsm/import-keys-certs.rst:13
msgid "Import DKEK share into device"
msgstr "DKEKのシェアを機器に取り込む"

#: ../hsm/import-keys-certs.rst:14
#: ../hsm/import-keys-certs.rst:14
#: ../hsm/import-keys-certs.rst:14
#: ../hsm/import-keys-certs.rst:14
msgid "Import PKCS#12 container(s) into DKEK"
msgstr "PKCS#12コンテナのDKEKへのインポート"

#: ../hsm/import-keys-certs.rst:16
#: ../hsm/import-keys-certs.rst:16
#: ../hsm/import-keys-certs.rst:16
#: ../hsm/import-keys-certs.rst:16
msgid "This documentation covers only one specific use-case and should serve as an example for the overall workflow. For further information please read `this thread`_ and `this blog post`_."
msgstr ""
"このドキュメントは、1つの特定のユースケースのみをカバーしており、全体的なワークフローの例として役立つはずです。さらに詳しい情報については、`このスレッド"
"`_や`このブログ記事`_をご覧ください。"

#: ../hsm/import-keys-certs.rst:22
#: ../hsm/import-keys-certs.rst:22
#: ../hsm/import-keys-certs.rst:22
#: ../hsm/import-keys-certs.rst:22
msgid "This procedure will reset your Nitrokey HSM 2 device and all data on it will be deleted!"
msgstr "この手順では、Nitrokey HSM 2デバイスがリセットされ、デバイス上のすべてのデータが削除されます。"

#: ../hsm/import-keys-certs.rst:28
#: ../hsm/import-keys-certs.rst:28
#: ../hsm/import-keys-certs.rst:28
#: ../hsm/import-keys-certs.rst:28
msgid "make sure all the keys you would like to import are available as PKCS#12 containers (`.p12`) and you know the password, if needed"
msgstr ""
"インポートしたいすべての鍵がPKCS#12コンテナ（`."
"p12`）として利用可能であること、また必要に応じてパスワードがわかっていることを確認してください。"

#: ../hsm/import-keys-certs.rst:31
#: ../hsm/import-keys-certs.rst:31
#: ../hsm/import-keys-certs.rst:31
#: ../hsm/import-keys-certs.rst:31
msgid "be sure that nothing on the used Nitrokey HSM 2 is needed, it will be deleted during this procedure"
msgstr "使用したNitrokey HSM 2に必要なものが何もないことを確認してください。この手順で削除されます。"

#: ../hsm/import-keys-certs.rst:34
#: ../hsm/import-keys-certs.rst:34
#: ../hsm/import-keys-certs.rst:34
#: ../hsm/import-keys-certs.rst:34
msgid "download the latest `Smart Card Shell`_ and unpack it into your work-directory"
msgstr "最新の`Smart Card Shell`_をダウンロードして、作業ディレクトリに解凍します。"

#: ../hsm/import-keys-certs.rst:37
#: ../hsm/import-keys-certs.rst:37
#: ../hsm/import-keys-certs.rst:37
#: ../hsm/import-keys-certs.rst:37
msgid "Importing via the SCSH3 GUI"
msgstr "SCSH3のGUIからの読み込み"

#: ../hsm/import-keys-certs.rst:39
#: ../hsm/import-keys-certs.rst:39
#: ../hsm/import-keys-certs.rst:39
#: ../hsm/import-keys-certs.rst:39
msgid "Inside the unpacked directory you will find ``scsh3gui``, which can be started using ``bash scsh3gui`` (for windows double-click on: ``scsh3gui.cmd``)."
msgstr ""
"解凍されたディレクトリの中には、``scsh3gui``があり、``bash "
"scsh3gui``を使って起動することができます（Windowsの場合はダブルクリックしてください。``scsh3gui.cmd``）で起動できます。"

#: ../hsm/import-keys-certs.rst:42
#: ../hsm/import-keys-certs.rst:42
#: ../hsm/import-keys-certs.rst:42
#: ../hsm/import-keys-certs.rst:42
msgid "Once the SCSH3 Tool is open, you should see your Nitrokey HSM 2 inside the tree view. Please follow these steps to import:"
msgstr "SCSH3ツールを開くと、ツリービューの中にNitrokey HSM 2が表示されているはずです。以下の手順でインポートを行ってください。"

#: ../hsm/import-keys-certs.rst:45
#: ../hsm/import-keys-certs.rst:45
#: ../hsm/import-keys-certs.rst:45
#: ../hsm/import-keys-certs.rst:45
msgid "Start key-manager (File -> Keymanager)"
msgstr "キーマネージャの起動 (File -> Keymanager)"

#: ../hsm/import-keys-certs.rst:47
#: ../hsm/import-keys-certs.rst:47
#: ../hsm/import-keys-certs.rst:47
#: ../hsm/import-keys-certs.rst:47
msgid "Right-click \"Smartcard-HSM\" -> create DKEK share"
msgstr "Smartcard-HSM\" -> DKEK共有の作成」を右クリックします。"

#: ../hsm/import-keys-certs.rst:49
#: ../hsm/import-keys-certs.rst:49
#: ../hsm/import-keys-certs.rst:49
#: ../hsm/import-keys-certs.rst:49
msgid "Choose file location"
msgstr "ファイルの場所を選択"

#: ../hsm/import-keys-certs.rst:51
#: ../hsm/import-keys-certs.rst:51
#: ../hsm/import-keys-certs.rst:51
#: ../hsm/import-keys-certs.rst:51
msgid "Choose DKEK share password"
msgstr "DKEKの共有パスワードを選択"

#: ../hsm/import-keys-certs.rst:53
#: ../hsm/import-keys-certs.rst:53
#: ../hsm/import-keys-certs.rst:53
#: ../hsm/import-keys-certs.rst:53
msgid "Right-click \"Smartcard-HSM\" -> Initialize device"
msgstr "Smartcard-HSM\" -> デバイスの初期化」を右クリックします。"

#: ../hsm/import-keys-certs.rst:55
#: ../hsm/import-keys-certs.rst:55
#: ../hsm/import-keys-certs.rst:55
#: ../hsm/import-keys-certs.rst:55
msgid "Enter SO-PIN"
msgstr "SO-PINの入力"

#: ../hsm/import-keys-certs.rst:57
#: ../hsm/import-keys-certs.rst:57
#: ../hsm/import-keys-certs.rst:57
#: ../hsm/import-keys-certs.rst:57
msgid "(optional) Enter label and enter URL/Host"
msgstr "(オプション) ラベルを入力し、URL/Hostを入力する"

#: ../hsm/import-keys-certs.rst:59
#: ../hsm/import-keys-certs.rst:59
#: ../hsm/import-keys-certs.rst:59
#: ../hsm/import-keys-certs.rst:59
msgid "Select authentication method: \"User PIN\""
msgstr "認証方法を選択する： \"User PIN\""

#: ../hsm/import-keys-certs.rst:61
#: ../hsm/import-keys-certs.rst:61
#: ../hsm/import-keys-certs.rst:61
#: ../hsm/import-keys-certs.rst:61
msgid "Allow RESET RETRY COUNTER: \"Resetting and unblocking PIN with SO-PIN not allowed\""
msgstr "RESET RETRY COUNTERを許可する: \"SO-PINでのPINのリセットとブロック解除は許可されていません\"。"

#: ../hsm/import-keys-certs.rst:63
#: ../hsm/import-keys-certs.rst:63
#: ../hsm/import-keys-certs.rst:63
#: ../hsm/import-keys-certs.rst:63
msgid "Enter and confirm User PIN"
msgstr "ユーザーPINの入力と確認"

#: ../hsm/import-keys-certs.rst:65
#: ../hsm/import-keys-certs.rst:65
#: ../hsm/import-keys-certs.rst:65
#: ../hsm/import-keys-certs.rst:65
msgid "\"Select Device Key Encryption scheme\" -> \"DKEK shares\""
msgstr "\"Select Device Key Encryption scheme\" -> \"DKEK shares\""

#: ../hsm/import-keys-certs.rst:67
#: ../hsm/import-keys-certs.rst:67
#: ../hsm/import-keys-certs.rst:67
#: ../hsm/import-keys-certs.rst:67
msgid "Enter number of DKEK shares: 1"
msgstr "DKEKの株式数を入力してください。1"

#: ../hsm/import-keys-certs.rst:69
#: ../hsm/import-keys-certs.rst:69
#: ../hsm/import-keys-certs.rst:69
#: ../hsm/import-keys-certs.rst:69
msgid "Right-click DKEK set-up in progress -> \"Import DKEK share\""
msgstr "進行中のDKEKセットアップを右クリック -> \"Import DKEK share\""

#: ../hsm/import-keys-certs.rst:71
#: ../hsm/import-keys-certs.rst:71
#: ../hsm/import-keys-certs.rst:71
#: ../hsm/import-keys-certs.rst:71
msgid "Choose DKEK share file location"
msgstr "DKEKの共有ファイルの場所を選択"

#: ../hsm/import-keys-certs.rst:73
#: ../hsm/import-keys-certs.rst:73
#: ../hsm/import-keys-certs.rst:73
#: ../hsm/import-keys-certs.rst:73
msgid "Password for DKEK share"
msgstr "DKEK共有のパスワード"

#: ../hsm/import-keys-certs.rst:75
#: ../hsm/import-keys-certs.rst:75
#: ../hsm/import-keys-certs.rst:75
#: ../hsm/import-keys-certs.rst:75
msgid "Right-click \"SmartCard-HSM\" -> \"Import from PKCS#12\""
msgstr "SmartCard-HSM\" -> \"Import from PKCS#12\" を右クリックします。"

#: ../hsm/import-keys-certs.rst:77
#: ../hsm/import-keys-certs.rst:77
#: ../hsm/import-keys-certs.rst:77
#: ../hsm/import-keys-certs.rst:77
msgid "Enter number of shares -> 1"
msgstr "株式数の入力 -> 1"

#: ../hsm/import-keys-certs.rst:79
#: ../hsm/import-keys-certs.rst:79
#: ../hsm/import-keys-certs.rst:79
#: ../hsm/import-keys-certs.rst:79
msgid "Enter file location of DKEK share"
msgstr "DKEKの共有ファイルの場所を入力してください。"

#: ../hsm/import-keys-certs.rst:81
#: ../hsm/import-keys-certs.rst:81
#: ../hsm/import-keys-certs.rst:81
#: ../hsm/import-keys-certs.rst:81
msgid "Enter Password for DKEK share"
msgstr "DKEK共有のパスワード入力"

#: ../hsm/import-keys-certs.rst:83
#: ../hsm/import-keys-certs.rst:83
#: ../hsm/import-keys-certs.rst:83
#: ../hsm/import-keys-certs.rst:83
msgid "Select PKCS#12 container for import (Enter password, if set)"
msgstr "インポートするPKCS#12コンテナの選択（設定されている場合はパスワードの入力）"

#: ../hsm/import-keys-certs.rst:85
#: ../hsm/import-keys-certs.rst:85
#: ../hsm/import-keys-certs.rst:85
#: ../hsm/import-keys-certs.rst:85
msgid "Select Key"
msgstr "セレクトキー"

#: ../hsm/import-keys-certs.rst:87
#: ../hsm/import-keys-certs.rst:87
#: ../hsm/import-keys-certs.rst:87
#: ../hsm/import-keys-certs.rst:87
msgid "Select Name to be used (This is the Label used for the key on the device)"
msgstr ""
"Select Name to be used (This is the Label used for the key on the device)"

#: ../hsm/import-keys-certs.rst:89
#: ../hsm/import-keys-certs.rst:89
#: ../hsm/import-keys-certs.rst:89
#: ../hsm/import-keys-certs.rst:89
msgid "Import more keys, if needed"
msgstr "必要に応じてキーを増やす"

#: ../hsm/import-keys-certs.rst:91
#: ../hsm/import-keys-certs.rst:91
#: ../hsm/import-keys-certs.rst:91
#: ../hsm/import-keys-certs.rst:91
msgid "Once this is done, you can check that the keys have been successfully imported using:"
msgstr "これで、キーが正常に取り込まれたことが確認できます。"

#: ../hsm/import-keys-certs.rst:98
#: ../hsm/import-keys-certs.rst:98
#: ../hsm/import-keys-certs.rst:98
#: ../hsm/import-keys-certs.rst:98
msgid "In the resulting output you will find the imported keys labeled by the name you chose previously."
msgstr "出力結果には、インポートされたキーが以前に選択した名前で表示されています。"

#: ../hsm/index.rst:2
msgid "Nitrokey HSM 2"
msgstr "Nitrokey HSM 2"

#: ../hsm/index.rst:6
msgid "First check the:"
msgstr "をまず確認します。"

#: ../hsm/index.rst:14
msgid "or choose your operating system:"
msgstr "をクリックするか、お使いのOSを選択してください。"

#: ../hsm/linux/product_platform_heading.rst:3
#: ../hsm/linux/product_platform_heading.rst:3
#: ../hsm/linux/product_platform_heading.rst:3
#: ../hsm/linux/product_platform_heading.rst:3
#: ../hsm/linux/product_platform_heading.rst:3
#: ../hsm/linux/product_platform_heading.rst:3
#: ../hsm/linux/product_platform_heading.rst:3
#: ../hsm/linux/product_platform_heading.rst:3
#: ../hsm/linux/product_platform_heading.rst:3
msgid "(Nitrokey HSM 2 - Linux)"
msgstr "(Nitrokey HSM 2 - Linux)"

#: ../pro/linux/automatic-screen-lock.rst:2
msgid "Automatic Screen Lock at Removal"
msgstr "スクリーンロックの自動解除"

#: ../pro/linux/automatic-screen-lock.rst:8
msgid "This guide will walk you through the configuration of your computer, to automatically lock your session when you remove the Nitrokey."
msgstr "このガイドでは、Nitrokeyを取り外すと自動的にセッションがロックされるように、コンピュータの設定を説明します。"

#: ../pro/linux/automatic-screen-lock.rst:10
msgid "The configuration requires the creation of two files under two different directories."
msgstr "この設定では、2つの異なるディレクトリに2つのファイルを作成する必要があります。"

#: ../pro/linux/automatic-screen-lock.rst:13
msgid "Requirements"
msgstr "要求事項"

#: ../pro/linux/automatic-screen-lock.rst:15
msgid "Ubuntu 20.04 or Debian 10 (Buster), both with `Gnome Display Manager <https://wiki.gnome.org/Projects/GDM>`_ installed."
msgstr ""
"Ubuntu 20.04またはDebian 10 (Buster)で、どちらも`Gnome Display Manager <https://wiki."
"gnome.org/Projects/GDM>`_がインストールされています。"

#: ../pro/linux/automatic-screen-lock.rst:18
msgid "Nitrokey Pro 2, Nitrokey Storage 2, or Nitrokey HSM 2"
msgstr "Nitrokey Pro 2、Nitrokey Storage 2、またはNitrokey HSM 2"

#: ../pro/linux/automatic-screen-lock.rst:21
msgid "Configuration"
msgstr "構成"

#: ../pro/linux/automatic-screen-lock.rst:24
msgid "Create the ``.rules`` file"
msgstr "``.rules``のファイルを作成する。"

#: ../pro/linux/automatic-screen-lock.rst:26
msgid "With your favorite text editor create a file called ``85-nitrokey.rules``"
msgstr "お好きなテキストエディターで、``85-nitrokey.rules``というファイルを作成してください。"

#: ../pro/linux/automatic-screen-lock.rst:32
msgid "Add the following line to the file"
msgstr "ファイルに以下の行を追加します。"

#: ../pro/linux/automatic-screen-lock.rst:38
msgid "Save the file and quit the editor."
msgstr "ファイルを保存し、エディタを終了します。"

#: ../pro/linux/automatic-screen-lock.rst:40
msgid "This file sets up a new hardware rule that executes the ``gnome-screensaver-lock`` at removal of the Nitrokey device."
msgstr ""
"このファイルでは、Nitrokeyデバイスの取り外し時に``gnome-screensaver-"
"lock``を実行する新しいハードウェアルールを設定します。"

#: ../pro/linux/automatic-screen-lock.rst:42
msgid "You should change the configuration according to the device you are using as following:"
msgstr "お使いの機器に合わせて、以下のように設定を変更してください。"

#: ../pro/linux/automatic-screen-lock.rst:44
msgid "Nitrokey Pro: ``ENV{PRODUCT}==\"20a0/4108/101\"``"
msgstr "Nitrokeyプロ。``ENV{PRODUCT}==\"20a0/4108/101\"``"

#: ../pro/linux/automatic-screen-lock.rst:45
msgid "Nitrokey HSM: ``ENV{PRODUCT}==\"20a0/4230/101\"``"
msgstr "NitrokeyHSM：``ENV{PRODUCT}==\"20a0/4230/101\"``"

#: ../pro/linux/automatic-screen-lock.rst:46
msgid "Nitrokey Storage: ``ENV{PRODUCT}==\"20a0/4109/101\"``"
msgstr "Nitrokey Storage``ENV{PRODUCT}==\"20a0/4109/101\"``"

#: ../pro/linux/automatic-screen-lock.rst:49
msgid "Create the ``gnome-screensaver-lock`` script"
msgstr "``gnome-screensaver-lock``のスクリプトを作成します。"

#: ../pro/linux/automatic-screen-lock.rst:51
msgid "With your favorite text editor create a file called ``gnome-screensaver-lock``"
msgstr "お好きなテキストエディターで、``gnome-screensaver-lock``というファイルを作成してください。"

#: ../pro/linux/automatic-screen-lock.rst:57
msgid "Add the following text"
msgstr "以下のテキストを追加します。"

#: ../pro/linux/automatic-screen-lock.rst:67
msgid "In the first step, this script looks for the user-name of the gnome session, i.e. ``user``."
msgstr "最初のステップでは、このスクリプトはgnomeセッションのユーザ名を探します。すなわち、``user``です。"

#: ../pro/linux/automatic-screen-lock.rst:69
msgid "When it is called at Nitrokey removal, the script queries ``user``, switches to its session, and locks the screen by prompting the screen-saver screen."
msgstr ""
"Nitrokeyの取り外し時に呼び出されると、スクリプトは``user``を問い合わせ、そのセッションに切り替え、スクリーンセーバーの画面を促して画面をロ"
"ックします。"

#: ../pro/linux/automatic-screen-lock.rst:72
msgid "Execute the script"
msgstr "スクリプトの実行"

#: ../pro/linux/automatic-screen-lock.rst:74
msgid "Once all set up, execute the script once, and it will lock the screen. It does not matter if the Nitrokey is plugged or not for this first execution."
msgstr ""
"設定が完了したら、スクリプトを一度実行すると、画面がロックされます。この最初の実行では、Nitrokeyが接続されているかどうかは関係ありません。"

#: ../pro/linux/automatic-screen-lock.rst:77
#: ../pro/smime.rst:57
#: ../pro/smime-outlook.rst:36
#: ../pro/smime-thunderbird.rst:45
#: ../pro/smime.rst:57
#: ../pro/smime-outlook.rst:36
#: ../pro/smime-thunderbird.rst:45
#: ../pro/smime.rst:57
#: ../pro/smime-outlook.rst:36
#: ../pro/smime-thunderbird.rst:45
msgid "Usage"
msgstr "使用方法"

#: ../pro/linux/automatic-screen-lock.rst:79
msgid "By now you can log back to your session by entering your password, and (re)plug you Nitrokey if you did not do it before."
msgstr "これで、パスワードを入力してセッションにログインし、Nitrokeyを（再）挿入することができました。"

#: ../pro/linux/automatic-screen-lock.rst:81
msgid "The next time(s) you unplug your Nitrokey from the computer, it will automatically lock the screen."
msgstr "次回、Nitrokeyをコンピュータから外すと、自動的に画面がロックされます。"

#: ../pro/gpa.rst:2
#: ../pro/gpa.rst:2
#: ../pro/gpa.rst:2
msgid "Setup with Gnu Privacy Assistant (GPA)"
msgstr "Gnu Privacy Assistant（GPA）によるセットアップ"

#: ../pro/gpa.rst:4
#: ../pro/gpa.rst:4
#: ../pro/gpa.rst:4
msgid "This document describes how to use Gnu Privacy Assistant (GPA) to set up the Nitrokey for its first usage."
msgstr ""
"このドキュメントでは、Gnu Privacy Assistant（GPA）を使用して、Nitrokeyを初めて使用する際の設定方法を説明します。"

#: ../pro/gpa.rst:6
#: ../pro/gpa.rst:6
#: ../pro/gpa.rst:6
msgid "First you need to install Gnu Privacy Assistant (GPA). For Windows you should download and install the `GPG4Win <https://www.gpg4win.org/>`_ package which contains GPA. For Linux you should install the GPA package of your distribution (e.g. on Ubuntu: sudo apt-get install gpa )."
msgstr ""
"まず、Gnu Privacy Assistant (GPA)をインストールする必要があります。Windowsの場合は、GPAを含む`GPG4Win "
"<https://www.gpg4win.org/>`_パッケージをダウンロードしてインストールしてください。Linuxの場合は、お使いのディストリビュー"
"ションのGPAパッケージをインストールしてください（例：Ubuntuの場合：sudo apt-get install gpa ）。"

#: ../pro/gpa.rst:8
#: ../pro/gpa.rst:8
#: ../pro/gpa.rst:8
msgid "Start GPA and select the Card Manager; either by pressing the icon at the top or by choosing Card Manager in the Windows menu."
msgstr "GPAを起動し、上部のアイコンを押すか、Windowsのメニューから「カードマネージャー」を選択してください。"

#: ../pro/gpa.rst:13
#: ../pro/gpa.rst:13
#: ../pro/gpa.rst:13
msgid "The window of the Card Manager will appear. Enter your salutation, name and optional other information. While doing so you might be asked to enter the admin PIN."
msgstr ""
"Card Managerのウィンドウが表示されます。挨拶文、名前、その他の情報を入力してください。その際、管理用PINの入力を求められる場合があります。"

#: ../pro/gpa.rst:18
#: ../pro/gpa.rst:18
#: ../pro/gpa.rst:18
msgid "Confirm this window and enter the admin PIN in the next window."
msgstr "この画面を確認し、次の画面で管理者用暗証番号を入力します。"

#: ../pro/gpa.rst:23
#: ../pro/gpa.rst:23
#: ../pro/gpa.rst:23
msgid "In the Card Manager window you might need to scroll down until you see the buttons to change the PINs. The term PIN is used interchangeable with \"password\". Press the first button \"Change PIN\" in order to change the user password. Read and confirm the following information window."
msgstr ""
"Card Managerウィンドウでは、PINを変更するためのボタンが表示されるまで下にスクロールする必要があります。暗証番号は、パスワードと同じ意味で使"
"われています。ユーザーパスワードを変更するには、最初のボタン \"Change PIN\"を押してください。以下の情報ウィンドウを読み、確認してください。"

#: ../pro/gpa.rst:28
#: ../pro/gpa.rst:28
#: ../pro/gpa.rst:28
msgid "Choose and enter your own PIN with a minimum length of six characters. This PIN is required for the daily usage of the Nitrokey."
msgstr "6文字以上の暗証番号を選んで入力してください。このPINは、Nitrokeyを日常的に使用する際に必要です。"

#: ../pro/gpa.rst:33
#: ../pro/gpa.rst:33
#: ../pro/gpa.rst:33
msgid "Go back to the Card Manager window in step three. This time you choose the third button Change PIN in order to change the admin PIN. The admin PIN is required to change the information on the Nitrokey and to change the cryptographic keys. Proceed as described in steps four and five."
msgstr ""
"ステップ3のCard Managerウィンドウに戻ります。今回は、管理者用PINを変更するために、3番目のボタン「Change PIN」を選択します。管理"
"者PINは、Nitrokeyの情報を変更したり、暗号鍵を変更したりする際に必要となります。ステップ4と5で説明した通りに進めてください。"

#: ../pro/gpa.rst:35
#: ../pro/gpa.rst:35
#: ../pro/gpa.rst:35
msgid "After changing both the user and the admin PIN, you are back in the Card Manager window. Select \"Generate key\" in the \"Card\" menu."
msgstr ""
"ユーザーPINと管理者PINの両方を変更すると、Card Managerの画面に戻ります。Card\" メニューの \"Generate key\" "
"を選択します。"

#: ../pro/gpa.rst:40
#: ../pro/gpa.rst:40
#: ../pro/gpa.rst:40
msgid "Enter your name and e-mail address. You should keep \"backup\" enabled in order to create a backup file of your cryptographic keys. Optionally you might select an expiration date for your cryptographic keys."
msgstr ""
"お名前とメールアドレスを入力してください。暗号鍵のバックアップファイルを作成するために、\"backup\"を有効にしておく必要があります"
"。また、暗号鍵の有効期限を設定することもできます。"

#: ../pro/gpa.rst:45
#: ../pro/gpa.rst:45
#: ../pro/gpa.rst:45
msgid "Wait until the keys are generated successfully."
msgstr "キーが正常に生成されるまで待ちます。"

#: ../pro/gpa.rst:50
#: ../pro/gpa.rst:50
#: ../pro/gpa.rst:50
msgid "Enter a strong passphrase for your backup keys. We strongly recommend to store the backup file on a separate storage(e.g. CD-ROM) and on a safe location."
msgstr ""
"バックアップキーには、強力なパスフレーズを入力してください。バックアップファイルは、CD-"
"ROMなどの別のストレージに保存し、安全な場所に保管することを強くお勧めします。"

#: ../pro/gpa.rst:55
#: ../pro/gpa.rst:55
#: ../pro/gpa.rst:55
msgid "Congratulations, your Nitrokey is now ready to use. Please see the `applications <https://www.nitrokey.com/documentation/applications>`_ section for further information of its usage."
msgstr ""
"おめでとうございます！これでNitrokeyを使用することができます。使い方の詳細については、`応用編<https://www.nitrokey.com/"
"documentation/applications>`_のセクションをご覧ください。"

#: ../hsm/linux/index.rst:2
msgid "Nitrokey HSM with GNU/Linux"
msgstr "GNU/LinuxでのNitrokey HSM"

#: ../hsm/linux/index.rst:13
msgid "Install `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`_. You need at least version 0.19. You can find recent builds for debian-based systems like Ubuntu `here <https://github.com/Nitrokey/opensc-build>`_ if your system does not have the newest version of OpenSC. Alternatively, install `this <https://www.cardcontact.de/download/sc-hsm-starterkit.zip>`_ driver (`source <https://github.com/CardContact/sc-hsm-embedded>`_)."
msgstr ""
"`OpenSC <https://github.com/OpenSC/OpenSC/wiki>`_をインストールします。最低でもバージョン0."
"19が必要です。お使いのシステムにOpenSCの最新バージョンがない場合は、Ubuntuのようなdebian-"
"basedシステム用の最近のビルドを`こちら<https://github.com/Nitrokey/opensc-"
"build>`_で見つけることができます。あるいは、`この<https://www.cardcontact.de/download/sc-hsm-"
"starterkit.zip>`_ドライバ（`source <https://github.com/CardContact/sc-hsm-"
"embedded>`_）をインストールしてください。"

#: ../hsm/linux/index.rst:20
#: ../hsm/mac/index.rst:17
#: ../hsm/windows/index.rst:17
msgid "Define SO-PIN and PIN of your own choices. See `these instructions <https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM#initialize-the-device>`_. Afterwards you can begin to `generate new keys <https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM#generate-key-pair>`_."
msgstr ""
"SO-PINとPINを自分の好きなように定義する。`説明書 <https://github.com/OpenSC/OpenSC/wiki/"
"SmartCardHSM#initialize-the-device>`_を参照してください。その後、`新しいキーの生成 <https://github."
"com/OpenSC/OpenSC/wiki/SmartCardHSM#generate-key-pair>`_を始めることができます。"

#: ../hsm/linux/index.rst:25
#: ../hsm/mac/index.rst:22
#: ../hsm/windows/index.rst:22
msgid "Your Nitrokey is now ready to use. `Checkout <https://www.nitrokey.com/documentation/applications>`_ the various use cases and supported applications."
msgstr ""
"これであなたのNitrokeyは使用可能になりました。`チェックアウト <https://www.nitrokey.com/documentation/"
"applications>`_様々な使用例やサポートされているアプリケーションをご紹介します。"

#: ../hsm/pkcs11-url.rst:2
#: ../hsm/pkcs11-url.rst:2
#: ../hsm/pkcs11-url.rst:2
#: ../hsm/pkcs11-url.rst:2
msgid "PKCS#11 URL Generation"
msgstr "PKCS#11 URL生成"

#: ../hsm/pkcs11-url.rst:9
#: ../hsm/pkcs11-url.rst:9
#: ../hsm/pkcs11-url.rst:9
#: ../hsm/pkcs11-url.rst:9
msgid "Various applications use openssl to handle e.g., TLS certificates. This concept mostly allows simply replacing a file-path (for the secret) with a so-called **PKCS#11 URL** to use a secret from a e.g., Nitrokey."
msgstr ""
"様々なアプリケーションが、TLS証明書などの処理にopensslを使用しています。このコンセプトにより、(秘密の)ファイルパスをいわゆる**PKCS#"
"11 URL**に置き換えるだけで、例えばNitrokeyの秘密を使うことができます。"

#: ../hsm/pkcs11-url.rst:16
#: ../hsm/pkcs11-url.rst:16
#: ../hsm/pkcs11-url.rst:16
#: ../hsm/pkcs11-url.rst:16
msgid "ensure ``openssl`` is installed"
msgstr "``openssl``がインストールされていることを確認します。"

#: ../hsm/pkcs11-url.rst:18
#: ../hsm/pkcs11-url.rst:18
#: ../hsm/pkcs11-url.rst:18
#: ../hsm/pkcs11-url.rst:18
msgid "ensure ``openssl`` can use the PKCS#11 engine by installing ``libengine-pkcs11-openssl``"
msgstr ""
"``openssl``は、``libengine-"
"pkcs11-openssl``をインストールすることで、PKCS#11エンジンを使用することができます。"

#: ../hsm/pkcs11-url.rst:27
#: ../hsm/pkcs11-url.rst:27
#: ../hsm/pkcs11-url.rst:27
#: ../hsm/pkcs11-url.rst:27
msgid "install ``opensc`` and ``gnutls-bin`` for necessary tools"
msgstr "必要なツールとして``opensc``と``gnutls-bin``をインストールします。"

#: ../hsm/pkcs11-url.rst:29
#: ../hsm/pkcs11-url.rst:29
#: ../hsm/pkcs11-url.rst:29
#: ../hsm/pkcs11-url.rst:29
msgid "verify that your needed keys and/or certificates are available on your Nitrokey using ``pkcs15-tool -D``"
msgstr "``pkcs15-tool -D``を使って、必要な鍵や証明書がNitrokey上で利用可能であることを確認します。"

#: ../hsm/pkcs11-url.rst:31
#: ../hsm/pkcs11-url.rst:31
#: ../hsm/pkcs11-url.rst:31
#: ../hsm/pkcs11-url.rst:31
msgid "if you want to use ECC keys/mechanisms through ``libengine-pkcs11-openssl``, you'll have to ensure its version is at least 0.4.10"
msgstr ""
"``libengine-pkcs11-openssl``を通してECCキー/メカニズムを使用したい場合は、そのバージョンが少なくとも0.4."
"10であることを確認する必要があります'。"

#: ../hsm/pkcs11-url.rst:35
#: ../hsm/pkcs11-url.rst:35
#: ../hsm/pkcs11-url.rst:35
#: ../hsm/pkcs11-url.rst:35
msgid "List and Generate PKCS#11 URLs"
msgstr "PKCS#11 URLの一覧表示と生成"

#: ../hsm/pkcs11-url.rst:37
#: ../hsm/pkcs11-url.rst:37
#: ../hsm/pkcs11-url.rst:37
#: ../hsm/pkcs11-url.rst:37
msgid "Use the following command to get a list of available tokens (Nitrokeys):"
msgstr "利用可能なトークン（Nitrokeys）のリストを取得するには、次のコマンドを使用します。"

#: ../hsm/pkcs11-url.rst:44
#: ../hsm/pkcs11-url.rst:44
#: ../hsm/pkcs11-url.rst:44
#: ../hsm/pkcs11-url.rst:44
msgid "Choose the token (Nitrokey) URL you want to generate URL tokens for and use it like this:"
msgstr "URLトークンを生成したいトークン（Nitrokey）のURLを選び、以下のように使用します。"

#: ../hsm/pkcs11-url.rst:53
#: ../hsm/pkcs11-url.rst:53
#: ../hsm/pkcs11-url.rst:53
#: ../hsm/pkcs11-url.rst:53
msgid "If you inspect the tail of the URL you'll recognize: ``label``, ``id`` and more, these can be partly removed as long as the necessary objects can be uniquely identified using the resulting URL, see :doc:`TLS Apache2 Configuration<apache2-tls>` for an example using ``id`` only."
msgstr ""
"URLの末尾を調べてみると'がわかります。``label``、``id``などですが、結果のURLを使って必要なオブジェクトを一意に識別できる限り、これら"
"を部分的に削除することができます。``id``のみを使用した例については、doc:`TLS Apache2 "
"Configuration<apache2-tls>`を参照してください。"

#: ../pro/smime.rst:2
#: ../pro/smime.rst:2
#: ../pro/smime.rst:2
msgid "S/MIME Email Encryption"
msgstr "S/MIMEメール暗号化"

#: ../pro/smime.rst:9
#: ../pro/smime-outlook.rst:9
#: ../pro/smime-thunderbird.rst:9
#: ../pro/smime.rst:9
#: ../pro/smime-outlook.rst:9
#: ../pro/smime-thunderbird.rst:9
#: ../pro/smime.rst:9
#: ../pro/smime-outlook.rst:9
#: ../pro/smime-thunderbird.rst:9
msgid "Prerequisites"
msgstr "前提条件"

#: ../pro/smime.rst:11
#: ../pro/smime.rst:11
#: ../pro/smime.rst:11
msgid "There are two widely used standards for email encryption."
msgstr "電子メールの暗号化には、広く使われている2つの規格があります。"

#: ../pro/smime.rst:13
#: ../pro/smime.rst:13
#: ../pro/smime.rst:13
msgid "OpenPGP/GnuPG is popular among individuals,"
msgstr "個人ではOpenPGP/GnuPGが人気です。"

#: ../pro/smime.rst:15
#: ../pro/smime.rst:15
#: ../pro/smime.rst:15
msgid "S/MIME/X.509 is mostly used by enterprises."
msgstr "S/MIME/X.509は主に企業で使用されています。"

#: ../pro/smime.rst:17
#: ../pro/smime.rst:17
#: ../pro/smime.rst:17
msgid "If you are in doubt which one to choose, you should use OpenPGP, see `here <openpgp.html>`_. This page describes the usage of S/MIME email encryption."
msgstr ""
"どれを選べばいいのかわからない場合は、OpenPGPを使うべきで、`こちら<openpgp.html>`_を参照してください。このページでは、S/"
"MIMEのメール暗号化の使い方を説明しています。"

#: ../pro/smime.rst:19
#: ../pro/smime.rst:19
#: ../pro/smime.rst:19
msgid "You need to purchase a S/MIME certificate or may already got one by your company. Furthermore, you need to install `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`_ on your System. While GNU/Linux users usually can install OpenSC over the package manager (e.g. ``sudo apt install opensc`` on Ubuntu), macOS and Windows users can download the installation files from the `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`_ page."
msgstr ""
"S/MIME証明書を購入する必要がありますが、既に会社で取得している場合もあります。さらに、`OpenSC <https://github.com/"
"OpenSC/OpenSC/wiki>`_をお使いのシステムにインストールする必要があります。GNU/"
"Linuxユーザーは通常、パッケージマネージャを使ってOpenSCをインストールすることができますが（例：Ubuntuでは``sudo apt "
"install opensc``）、macOSやWindowsユーザーは`OpenSC <https://github.com/OpenSC/"
"OpenSC/wiki>`_ページからインストールファイルをダウンロードすることができます。"

#: ../pro/smime.rst:22
#: ../pro/smime-outlook.rst:17
#: ../pro/smime-thunderbird.rst:17
#: ../pro/smime.rst:22
#: ../pro/smime-outlook.rst:17
#: ../pro/smime-thunderbird.rst:17
#: ../pro/smime.rst:22
#: ../pro/smime-outlook.rst:17
#: ../pro/smime-thunderbird.rst:17
msgid "Windows users with 64-bit system (standard) need to install both, the 32-bit and the 64-bit version of OpenSC!"
msgstr "64ビットシステム（標準）のWindowsユーザーは、32ビット版と64ビット版の両方のOpenSC！をインストールする必要があります。"

#: ../pro/smime.rst:25
#: ../pro/smime.rst:25
#: ../pro/smime.rst:25
msgid "Import Existing Key and Certificate"
msgstr "既存の鍵と証明書のインポート"

#: ../pro/smime.rst:27
#: ../pro/smime.rst:27
#: ../pro/smime.rst:27
msgid "The following instructions are based on the `wiki of OpenSC <https://github.com/OpenSC/OpenSC/wiki/OpenPGP-card>`_. We will assume, that you already got a key-certificate pair as a .p12 file. Please have a look at the wiki page, if you got a separate key and certificate file."
msgstr ""
"以下の説明は、OpenSCの`wiki <https://github.com/OpenSC/OpenSC/wiki/OpenPGP-"
"card>`_に基づいています。ここでは、すでに鍵と証明書のペアを."
"p12ファイルとして入手していると仮定します。別の鍵と証明書のファイルを入手した場合は、wikiページを参照してください。"

#: ../pro/smime.rst:29
#: ../pro/smime.rst:29
#: ../pro/smime.rst:29
msgid "To open the Windows command line please push the Windows-key and R-key. Now type ‘cmd.exe’ in the text field and hit enter. To open a Terminal on macOS or GNU/Linux please use the application search (e.g. spotlight on macOS)."
msgstr ""
"Windowsのコマンドラインを開くには、WindowsキーとRキーを押してください。テキストフィールドに「cmd."
"exe」と入力してエンターキーを押します。macOSまたはGNU/"
"Linuxでターミナルを開くには、アプリケーション検索を使用してください（例：macOSのspotlight）。"

#: ../pro/smime.rst:31
#: ../pro/smime.rst:31
#: ../pro/smime.rst:31
msgid "To make these commands as simple as possible, the .p12 file needs to be in your home folder. On Windows this is usually ‘C:\\Users\\yourusername’ and on macOS and GNU/Linux system it will be ‘/home/yourusername’. If you do not store the .p12 file there, you have to adapt the path in the commands below. Please plug in the Nitrokey before submitting the commands."
msgstr ""
"これらのコマンドをできるだけシンプルにするために、.p12ファイルはあなたのホームフォルダーにある必要があります。Windowsでは通常、「C:"
"Users\\yourusername」、macOSやGNU/Linuxシステムでは「/home/yourusername」となります。この場所に."
"p12ファイルを保存していない場合は、以下のコマンドでパスを変更する必要があります。コマンドを実行する前に、Nitrokeyを接続してください。"

#: ../pro/smime.rst:33
#: ../pro/smime.rst:33
#: ../pro/smime.rst:33
msgid "Assuming that your key-certificate file reads ‘myprivate.p12’ the commands for Windows looks like this:"
msgstr "鍵・証明書のファイル名が「myprivate.p12」であるとすると、Windows用のコマンドは以下のようになります。"

#: ../pro/smime.rst:40
#: ../pro/smime.rst:40
#: ../pro/smime.rst:40
msgid "and on macOS and GNU/Linux it will be"
msgstr "となり、macOSとGNU/Linuxでは以下のようになります。"

#: ../pro/smime.rst:47
#: ../pro/smime.rst:47
#: ../pro/smime.rst:47
msgid "The two commands copy the key-certificate pair to the slot 2 (needed for decrypting emails) and slot 3 (needed for signing). The output looks on both systems something like this:"
msgstr ""
"この2つのコマンドは、鍵と証明書のペアをスロット2（メールの復号化に必要）とスロット3（署名に必要）にコピーします。両システムでの出力は以下のようになりま"
"す。"

#: ../pro/smime.rst:54
#: ../pro/smime.rst:54
#: ../pro/smime.rst:54
msgid "Please note that there will be error messages that can be safely ignored (see output example above). You now have the key-certificate pair loaded on the Nitrokey."
msgstr "エラーメッセージが表示されますが、無視してかまいません（上記の出力例を参照）。これで、Nitrokeyに鍵と証明書のペアが読み込まれました。"

#: ../pro/smime.rst:59
#: ../pro/smime.rst:59
#: ../pro/smime.rst:59
msgid "You can find further information about the usage on these pages:"
msgstr "このページでは、使用方法についての詳しい情報をご覧いただけます。"

#: ../pro/smime.rst:61
#: ../pro/smime.rst:61
#: ../pro/smime.rst:61
msgid "for using `S/MIME encryption on Thunderbird <smime-thunderbird.html>`_"
msgstr "Thunderbirdで`S/MIME暗号化を使用するための<smime-thunderbird.html>`_。"

#: ../pro/smime.rst:64
#: ../pro/smime.rst:64
#: ../pro/smime.rst:64
msgid "for using `S/MIME encryption on Outlook <smime-outlook.html>`_"
msgstr "Outlook上で`S/MIME暗号化を使用するための<smime-outlook.html><x id=\"60\"></x"

#: ../pro/smime.rst:67
#: ../pro/smime.rst:67
#: ../pro/smime.rst:67
msgid "for using `Evolution <https://help.gnome.org/users/evolution/stable/mail-encryption.html.en>`_, an email client for the Gnome Desktop on Linux systems"
msgstr ""
"LinuxシステムのGnomeデスクトップ用メールクライアントである`Evolution <https://help.gnome.org/users/"
"evolution/stable/mail-encryption.html.en>`_の使用について"

#: ../pro/smime.rst:72
#: ../pro/smime.rst:72
#: ../pro/smime.rst:72
msgid "Troubleshooting"
msgstr "トラブルシューティング"

#: ../pro/smime.rst:74
#: ../pro/smime.rst:74
#: ../pro/smime.rst:74
msgid "On Windows: Did you install **both**, the 32-bit and the 64-bit version of OpenSC?"
msgstr "Windowsの場合。OpenSCの32ビット版と64ビット版の両方をインストールしましたか？"

#: ../pro/smime.rst:77
#: ../pro/smime.rst:77
#: ../pro/smime.rst:77
msgid "Nitrokey Storage 2: You need to install OpenSC in version 0.18 or higher. You can find the files on the `OpenSC website <https://github.com/OpenSC/OpenSC/releases>`_ for Windows and macOS user or `here <https://github.com/Nitrokey/opensc-build>`_ for Debian/Ubuntu users."
msgstr ""
"Nitrokey Storage 2：OpenSCをバージョン0."
"18以上でインストールする必要があります。WindowsやmacOSのユーザーは`OpenSCのウェブサイト<https://github.com/"
"OpenSC/OpenSC/releases>`_で、Debian/Ubuntuのユーザーは`こちら<https://github.com/"
"Nitrokey/opensc-build>`_でファイルを見つけることができます。"

#: ../pro/smime-outlook.rst:2
#: ../pro/smime-outlook.rst:2
#: ../pro/smime-outlook.rst:2
msgid "S/MIME Email Encryption with Outlook"
msgstr "OutlookでのS/MIMEメール暗号化"

#: ../pro/smime-outlook.rst:11
#: ../pro/smime-outlook.rst:11
#: ../pro/smime-outlook.rst:11
msgid "If you do not have a S/MIME key-certificate pair installed on your Nitrokey yet, please look at `this page <smime.html>`_ first."
msgstr ""
"まだNitrokeyにS/MIMEの鍵と証明書のペアをインストールしていない場合は、まずこのページの` <smime.html>`_をご覧ください。"

#: ../pro/smime-outlook.rst:13
#: ../pro/smime-outlook.rst:13
#: ../pro/smime-outlook.rst:13
msgid "You need to have OpenSC installed on your System. Please have a look at the `wiki page of the OpenSC project <https://github.com/OpenSC/OpenSC/wiki>`_."
msgstr ""
"システムにOpenSCがインストールされている必要があります。OpenSCプロジェクトの`wikiページ<https://github.com/"
"OpenSC/OpenSC/wiki>`_を参照してみてください。"

#: ../pro/smime-outlook.rst:21
#: ../pro/smime-outlook.rst:21
#: ../pro/smime-outlook.rst:21
msgid "Settings in Outlook"
msgstr "Outlookの設定"

#: ../pro/smime-outlook.rst:23
#: ../pro/smime-outlook.rst:23
#: ../pro/smime-outlook.rst:23
msgid "Before you can use the Nitrokey in Outlook you have to activate S/MIME encryption. You can achieve this by clicking on to ‘Start’ -> ‘Options’ and clicking on ‘Trust Center’ in the options window. In section ‘Email Security’ you can choose your S/MIME identity. Your certificate should already be recognized by Outlook."
msgstr ""
"OutlookでNitrokeyを使用するには、S/MIMEの暗号化を有効にする必要があります。これを行うには、「スタート」-> "
"「オプション」をクリックし、オプションウィンドウで「Trust Center」をクリックします。メールセキュリティ」のセクションで、S/"
"MIMEのIDを選択します。あなたの証明書はすでにOutlookで認識されているはずです。"

#: ../pro/smime-outlook.rst:38
#: ../pro/smime-outlook.rst:38
#: ../pro/smime-outlook.rst:38
msgid "When composing a mail you can now choose to encrypt and sign the message in the ‘Options’ ribbon of the compose window."
msgstr "メール作成時に、作成画面の「オプション」リボンで、メッセージの暗号化と署名を選択できるようになりました。"

#: ../pro/smime-outlook.rst:45
#: ../pro/smime-outlook.rst:45
#: ../pro/smime-outlook.rst:45
msgid "Outlook will only encrypt message to mail addresses which are saved in your address book. So make sure, that the persons you want to write an encrypted mail to have an entry in Outlook’s contacts. You can ask the person to write you a signed mail, so that you can import the certificate information."
msgstr ""
"Outlookは、アドレス帳に保存されているメールアドレスへのメッセージのみを暗号化します。そのため、暗号化されたメールを送りたい相手が、Outlookの"
"連絡先に登録されていることを確認してください。相手に署名入りのメールを書いてもらうことで、証明書の情報を取り込むことができます。"

#: ../pro/smime-outlook.rst:47
#: ../pro/smime-outlook.rst:47
#: ../pro/smime-outlook.rst:47
msgid "Depending on your certificate or the certificate of your partners you may have to import a so-called root certificate. This is the certificate of the party which issued the certificate you or your partner uses. You should usually got informed if this is necessary."
msgstr ""
"自分の証明書やパートナーの証明書によっては、いわゆるルート証明書をインポートする必要があります。これは、あなたやあなたのパートナーが使用する証明書を発行し"
"た団体の証明書です。これが必要な場合は、通常、お客様にお知らせします。"

#: ../pro/smime-thunderbird.rst:2
#: ../pro/smime-thunderbird.rst:2
#: ../pro/smime-thunderbird.rst:2
msgid "S/MIME Email Encryption with Thunderbird"
msgstr "ThunderbirdでのS/MIMEメール暗号化"

#: ../pro/smime-thunderbird.rst:11
#: ../pro/smime-thunderbird.rst:11
#: ../pro/smime-thunderbird.rst:11
msgid "If you do not have a S/MIME key-certificate pair installed on your Nitrokey yet or if you did not installed OpenSC, please look at `this page <smime.html>`_ first."
msgstr ""
"まだNitrokeyにS/"
"MIMEの鍵と証明書のペアをインストールしていない場合や、OpenSCをインストールしていない場合は、まず`このページ<smime."
"html>`_をご覧ください。"

#: ../pro/smime-thunderbird.rst:13
#: ../pro/smime-thunderbird.rst:13
#: ../pro/smime-thunderbird.rst:13
msgid "You need to have `OpenSC installed <https://github.com/OpenSC/OpenSC/wiki>`_ on your System. While GNU/Linux users usually can install OpenSC over the package manager (e.g. ``sudo apt update && sudo apt install opensc`` on Ubuntu), macOS and Windows users can download the installation files from OpenSC directly."
msgstr ""
"お使いのシステムに`OpenSCがインストールされている必要があります<https://github.com/OpenSC/OpenSC/wiki>`_。"
"GNU/Linuxユーザーは通常、パッケージマネージャを使ってOpenSCをインストールすることができますが（例：Ubuntuでは``sudo apt "
"update && sudo apt install "
"opensc``）、macOSやWindowsユーザーはOpenSCから直接インストールファイルをダウンロードすることができます。"

#: ../pro/smime-thunderbird.rst:21
#: ../pro/smime-thunderbird.rst:21
#: ../pro/smime-thunderbird.rst:21
msgid "Settings in Thunderbird"
msgstr "サンダーバードの設定"

#: ../pro/smime-thunderbird.rst:23
#: ../pro/smime-thunderbird.rst:23
#: ../pro/smime-thunderbird.rst:23
msgid "Before you can use the Nitrokey in Thunderbird you have to activate S/MIME encryption in the account settings. You can achieve this by clicking on the menu and go to ‘Preferences’ -> ‘Account Settings’ and clicking on ‘Security’ in the account settings window."
msgstr ""
"ThunderbirdでNitrokeyを使用するには、アカウント設定でS/"
"MIME暗号化を有効にする必要があります。これを行うには、メニューをクリックして「環境設定」-> "
"「アカウント設定」に進み、アカウント設定ウィンドウで「セキュリティ」をクリックします。"

#: ../pro/smime-thunderbird.rst:30
#: ../pro/smime-thunderbird.rst:30
#: ../pro/smime-thunderbird.rst:30
msgid "Click on “Security Devices” to import the right PCKS11 module. Click on “Load” on the right-hand side. Now give the Module a name (like “OpenSC Module”) and click on “Browse” to choose the location of the Module (see below)."
msgstr ""
"右のPCKS11モジュールをインポートするために「Security "
"Devices」をクリックします。右側にある「Load」をクリックします。ここで、モジュールに名前を付け（「OpenSC "
"Module」のように）、「Browse」をクリックしてモジュールの場所を選択します（下図参照）。"

#: ../pro/smime-thunderbird.rst:37
#: ../pro/smime-thunderbird.rst:37
#: ../pro/smime-thunderbird.rst:37
msgid "On Windows the right file lays under “C:\\Windows\\System32\\opensc-pkcs11.dll”. On macOS and GNU/Linux the file should be in “/lib/pkcs11/opensc-pkcs11.so” or “/usr/lib/pkcs11/opensc-pkcs11.so” or alike. Press “OK” twice and you are back in security section of the account settings. Now you can actually choose a certificate on the upper part of the window. You should get asked for a PIN to unlock your Nitrokey. Please type in your User PIN."
msgstr ""
"Windows では、「C:WIndows\\System32\\opensc-pkcs11.dll」に格納されているファイルが正しいです。macOS "
"や GNU/Linux の場合は、「/lib/pkcs11/opensc-pkcs11.so」または「/usr/lib/pkcs11/opensc-"
"pkcs11.so」のような場所にあるはずです。OK」を2回押すと、アカウント設定のセキュリティセクションに戻ります。これで、ウィンドウの上部で証明書を選"
"択できるようになりました。Nitrokeyのロックを解除するためのPINを求められます。あなたのユーザーPINを入力してください。"

#: ../pro/smime-thunderbird.rst:47
#: ../pro/smime-thunderbird.rst:47
#: ../pro/smime-thunderbird.rst:47
msgid "When composing an email you can now choose to encrypt and sign the message."
msgstr "メール作成時に、メッセージの暗号化と署名を選択できるようになりました。"

#: ../hsm/mac/product_platform_heading.rst:3
#: ../hsm/mac/product_platform_heading.rst:3
#: ../hsm/mac/product_platform_heading.rst:3
#: ../hsm/mac/product_platform_heading.rst:3
#: ../hsm/mac/product_platform_heading.rst:3
#: ../hsm/mac/product_platform_heading.rst:3
#: ../hsm/mac/product_platform_heading.rst:3
#: ../hsm/mac/product_platform_heading.rst:3
msgid "(Nitrokey HSM 2 - macOS)"
msgstr "(Nitrokey HSM 2 - macOS)"

#: ../hsm/mac/index.rst:2
msgid "Nitrokey HSM with macOS"
msgstr "macOSでのNitrokey HSM"

#: ../hsm/mac/index.rst:13
#: ../hsm/windows/index.rst:13
msgid "Install `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`_. Alternatively, install `this <https://www.cardcontact.de/download/sc-hsm-starterkit.zip>`_ driver (`source <https://github.com/CardContact/sc-hsm-embedded>`_)."
msgstr ""
"`OpenSC <https://github.com/OpenSC/OpenSC/"
"wiki>`_をインストールします。あるいは、`この<https://www.cardcontact.de/download/sc-hsm-"
"starterkit.zip>`_ドライバー（`ソース<https://github.com/CardContact/sc-hsm-"
"embedded>`_）をインストールします。"

#: ../hsm/windows/product_platform_heading.rst:3
#: ../hsm/windows/product_platform_heading.rst:3
#: ../hsm/windows/product_platform_heading.rst:3
#: ../hsm/windows/product_platform_heading.rst:3
#: ../hsm/windows/product_platform_heading.rst:3
#: ../hsm/windows/product_platform_heading.rst:3
#: ../hsm/windows/product_platform_heading.rst:3
#: ../hsm/windows/product_platform_heading.rst:3
#: ../hsm/windows/product_platform_heading.rst:3
msgid "(Nitrokey HSM 2 - Windows)"
msgstr "(Nitrokey HSM 2 - Windows)"

#: ../hsm/windows/index.rst:2
msgid "Nitrokey HSM with Windows"
msgstr "Nitrokey HSM with Windows"

#: ../pro/smart-policy.rst:2
msgid "Login to Windows Domain Computers With MS Active Directory"
msgstr "MS Active DirectoryによるWindowsドメインコンピュータへのログイン"

#: ../pro/smart-policy.rst:8
msgid "Download and install the latest `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`_."
msgstr "最新の`OpenSC <https://github.com/OpenSC/OpenSC/wiki>`_をダウンロードしてインストールします。"

#: ../pro/smart-policy.rst:10
msgid "Use a text editor to add the following settings to *C:\\Program Files:\\OpenSC Project\\OpenSC\\opensc.conf*."
msgstr ""
"C:Program Files:\\OpenSC Project\\OpenSC\\opensc."
"conf*にテキストエディターで以下の設定を追加してください。"

#: ../pro/smart-policy.rst:49
msgid "Open a command terminal and enter “regedit”. Use regedit to import `this file <https://www.nitrokey.com/sites/default/files/nk-hsm.reg>`_."
msgstr ""
"コマンドターミナルを開き、「regedit」と入力します。regeditを使って、`このファイル<https://www.nitrokey.com/"
"sites/default/files/nk-hsm.reg>`_をインポートします。"

#: ../pro/smart-policy.rst:52
msgid "Now you can enroll Nitrokeys for your users managed in Microsoft Active Directory. You may either use Microsoft PKI, `gpgsm <https://www.gnupg.org/documentation/manuals/gnupg/Howto-Create-a-Server-Cert.html>`_, or `Smart Policy <https://www.mysmartlogon.com/products/smart-policy.html>`_. The following steps describe the usage of Smart Policy."
msgstr ""
"Microsoft Active Directory で管理されているユーザに対して、Nitrokeys を登録できるようになりました。"
"Microsoft PKI、`gpgsm <https://www.gnupg.org/documentation/manuals/gnupg/"
"Howto-Create-a-Server-Cert.html>`_、`Smart Policy <https://www.mysmartlogon."
"com/products/smart-policy.html>`_のいずれかを使用することができます。以下の手順で、Smart "
"Policyの使い方を説明します。"

#: ../pro/smart-policy.rst:58
msgid "`Download <http://download.mysmartlogon.com/SmartPolicyv2/SmartPolicy%20-%20Stage%203.exe>`_ and install Smart Policy."
msgstr ""
"` <http://download.mysmartlogon.com/SmartPolicyv2/SmartPolicy%20-%20Stage%203"
".exe>`_をダウンロードし、Smart Policyをインストールします。"

#: ../pro/smart-policy.rst:60
msgid "Select “Read a smart card”"
msgstr "\"Read a smart card \"を選択"

#: ../pro/smart-policy.rst:67
msgid "Select the certificate, mapping, and user."
msgstr "証明書、マッピング、ユーザーを選択します。"

#: ../pro/smart-policy.rst:74
msgid "Verify the device status via CRL."
msgstr "CRLでデバイスの状態を確認する。"

#: ../pro/smart-policy.rst:81
msgid "Choose a Group Policy Object (GPO)."
msgstr "グループ・ポリシー・オブジェクト（GPO）を選択します。"

#: ../pro/smart-policy.rst:88
msgid "Confirm applying the mapping."
msgstr "マッピングの適用を確認します。"

#: ../pro/smart-policy.rst:95
msgid "From now on, when logging on to your Windows computer you need to connect the Nitrokey and enter your PIN."
msgstr "今後、Windowsパソコンにログオンする際には、Nitrokeyを接続してPINを入力する必要があります。"
