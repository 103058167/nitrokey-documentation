# SOME DESCRIPTIVE TITLE.
# Copyright (C) Nitrokey
# This file is distributed under the same license as the Nitrokey Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: Nitrokey Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-06 01:52+0200\n"
"PO-Revision-Date: 2022-01-06 20:42+0000\n"
"Last-Translator: Anonymous <noreply@weblate.org>\n"
"Language-Team: Japanese <https://translate.nitrokey.com/projects/"
"nitrokey-documentation/documentation-to-be-integrated/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.10.1\n"

#: ../to-be-integrated.rst:1
msgid "# storage"
msgstr "# ストレージ"

#: ../to-be-integrated.rst:4
msgid "Configure Hidden Volumes:"
msgstr "Hidden Volumesの設定。"

#: ../to-be-integrated.rst:6
msgid "Unlock encrypted volume from the Nitrokey App menu. Select \"setup hidden volume\". Now you need to enter a new password twice to protect your hidden volume. The password strength is indicated below."
msgstr ""
"暗号化されたボリュームをNitrokeyアプリのメニューから解除します。隠しボリュームのセットアップ」を選択します。ここで、隠しボリュームを保護するための"
"新しいパスワードを2回入力する必要があります。パスワードの強度は以下の通りです。"

#: ../to-be-integrated.rst:10
msgid "Note: PINs can only be tried three times only which is why they can be short. Passwords like used for hidden devices can potentially be attacked unlimited which is why they need to be sufficiently strong."
msgstr ""
"注：暗証番号は3回しか試すことができないため、短くすることができます。隠されたデバイスに使用されるようなパスワードは、潜在的に無制限に攻撃される可能性があ"
"るため、十分に強力である必要があります。"

#: ../to-be-integrated.rst:17
msgid "Next you need to define the storage area being used. Hidden volumes are stored in the empty space of the encrypted volume. This is a critical choice because it could destroy data on the (not-hidden) encrypted volume and reveal the existience of the hidden volume."
msgstr ""
"次に、使用するストレージ領域を定義する必要があります。隠しボリュームは、暗号化されたボリュームの空き領域に保存されます。これは、(隠されていない)暗号化ボ"
"リューム上のデータを破壊し、隠しボリュームの存在を明らかにする可能性があるため、重要な選択です。"

#: ../to-be-integrated.rst:13
msgid "You should use one FAT32 partition on your encrypted volume as journaling filesystems, especially NTFS, may destroy the encrypted data. Copy some files to the encrypted volume prior to creating the hidden volume. Once you configured a hidden volume you shouldn't add or change files on the encrypted volume anymore. Identify the storage space your files consume on the encrypted volume. For example: 10% The hiden volume should start after your files on the encrypted volume. For example: 10% files + 10% buffer = 20% The hidden volume should end in a distance before the end of the storage. For example: 90%"
msgstr ""
"ジャーナリングファイルシステム(特に NTFS)は暗号化されたデータを破壊する可能性があるため、暗号化ボ リュームには FAT32 パーティションを 1 "
"つ使用してください。隠しボリュームを作成する前にいくつかのファイルを暗号化ボリュームにコピーしてください。隠しボリュームを設定した後は、暗号化ボリュームに"
"ファイルを追加したり変更したりしないでください。暗号化ボリューム上でファイルが消費するストレージスペースを特定する。例：10% "
"暗号化ボリューム上のファイルの後に隠しボリュームを開始する必要があります。例: 10%のファイル + 10%のバッファ = 20% "
"隠しボリュームはストレージの終わりの前の距離で終わるべきです。例えば、以下のようになります。"

#: ../to-be-integrated.rst:19
msgid "In case you use two or more hidden volumes, note that their storage area must not overlap. Otherwise they would override and destroy each other's data. Each hidden volume would require a different password."
msgstr ""
"2つ以上の隠しボリュームを使用する場合は、それぞれのストレージ領域が重ならないように注意してください。そうしないと、互いのデータが上書きされ、破壊されてし"
"まいます。それぞれの隠しボリュームには異なるパスワードが必要です。"

#: ../to-be-integrated.rst:21
msgid "Usage of Hidden Volumes:"
msgstr "隠しボリュームの使い方。"

#: ../to-be-integrated.rst:23
msgid "Select \"unlock encrypted volume\" and enter your User PIN. Select \"unlock hidden volume\" and enter any of the hidden volume's passwords. If this is the first time you may need to create a partition on the hidden volume. Windows will open an appropriate window and ask you to do so. On Linux and Mac OS you may need to open a partition manager and create a partition manually. You can create as many partitions as you want. We recommend FAT(32) if you want to access the partition from various operating systems. Make sure to unmount/eject all partitions on the hidden volumes before locking or disconnecting the Nitrokey."
msgstr ""
"暗号化されたボリュームの解除」を選択し、ユーザーPINを入力します。Unlock hidden volume\"を選択し、隠しボリューム'のパスワードのい"
"ずれかを入力します。今回が初めての場合は、隠しボリュームにパーティションを作成する必要があります。Windowsは適切なウィンドウを開き、そのように指示し"
"ます。LinuxやMac OSの場合は、パーティションマネージャを開いて手動でパーティションを作成する必要があります。パーティションは必要な数だけ作成でき"
"ます。様々なOSからパーティションにアクセスしたい場合は、FAT(32)をお勧めします。Nitrokeyをロックまたは切断する前に、必ず隠しボリューム上の"
"すべてのパーティションをアンマウント/イジェクトしてください。"

#: ../to-be-integrated.rst:28
msgid "Also see older but comprehensive Nitrokey Storage manual."
msgstr "また、古いですがNitrokey Storageの包括的なマニュアルもご覧ください。"

#: ../to-be-integrated.rst:32
msgid "# pro"
msgstr "# pro"

#: ../to-be-integrated.rst:36
msgid "PKCS#11 Driver"
msgstr "PKCS#11ドライバー"

#: ../to-be-integrated.rst:38
msgid "If you want to use S/MIME email encryption with Thunderbird, to use TrueCrypt/VeraCrypt, certificate-based SSL authentication with Firefox, PuTTY/KiTTY, OpenSSH, OpenSSL, or any other PKCS#11 compatible software, you should install OpenSC."
msgstr ""
"ThunderbirdでのS/MIMEメール暗号化、TrueCrypt/VeraCryptの使用、Firefoxでの証明書ベースのSSL認証、PuTTY/"
"KiTTY、OpenSSH、OpenSSL、その他のPKCS#11互換ソフトウェアを使用したい場合は、OpenSCをインストールする必要があります。"

#: ../to-be-integrated.rst:40
msgid "Note that a Nitrokey initialized with OpenSC doesn't work with GnuPG/OpenPGP. But the other way around works fine. If you want to use Nitrokey with both GnuPG and PKCS#11, generate the keys with GnuPG."
msgstr ""
"OpenSCで初期化されたNitrokeyは、GnuPG/OpenPGPでは動作しないことに注意してください。しかし、その逆の場合は問題なく動作します。N"
"itrokeyをGnuPGとPKCS#11の両方で使いたい場合は、GnuPGで鍵を生成してください。"

#: ../to-be-integrated.rst:42
msgid "Don't use PKCS#11 in parallel with GnuPG because both may interfere and unexpected issues may result. (There is another promising project scd-pkcs11 in development which may overcome this limitation eventually. Currently it's limit to the authentication certificate and not widely tested yet.)"
msgstr ""
"PKCS#11をGnuPGと並行して使用しないでください。両者が干渉して予期せぬ問題が発生する可能性があります。(別の有望なプロジェクト scd-"
"pkcs11 が開発されており、いずれこの制限を克服できるかもしれません。現在のところ、認証証明書に限定されており、まだ広くテストされていません)"

#: ../to-be-integrated.rst:44
msgid "Instructions, how to create a valid X.509 certificate with Nitrokey (1, 2, 3). These are general instructions how to use X.509 certificates. Alternative PKCS#11 Driver:"
msgstr ""
"Nitrokeyで有効なX.509証明書を作成する方法の説明（1、2、3）。これらは、X."
"509証明書を使用するための一般的な手順です。代替PKCS#11ドライバー。"

#: ../to-be-integrated.rst:47
msgid "The recommended PKCS#11 driver is OpenSC."
msgstr "推奨するPKCS#11ドライバーはOpenSCです。"

#: ../to-be-integrated.rst:49
msgid "Windows Mini Driver"
msgstr "Windowsミニドライバ"

#: ../to-be-integrated.rst:51
msgid "This Mini Driver allows to integrate Nitrokey with Window's certificate store. Subsequently all applications which use this certificate storage can be used with Nitrokey (e.g. Internet Explorer, Google Chrome web browser, Windows Login). To install the driver, you may need to allow the installation of unsigned drivers first. Aloaha"
msgstr ""
"このミニドライバは、NitrokeyとWindow'sの証明書ストアを統合することができます。これにより、この証明書ストアを使用するすべてのアプリケーショ"
"ンが、Nitrokeyで使用できるようになります（例：Internet Explorer、Google Chrome ウェブブラウザ、Windows "
"Login）。このドライバーをインストールするには、まず署名のないドライバーのインストールを許可する必要があります。アロハ"

#: ../to-be-integrated.rst:54
msgid "All applications of Aloaha are working with the Nitrokey. This includes a middleware to integrate Nitrokey with other PKCS#11 based applications and with Windows as well as applications to encrypt and sign PDFs and the hard disk."
msgstr ""
"アロハのすべてのアプリケーションは、Nitrokeyと連動しています。これには、Nitrokeyを他のPKCS#11ベースのアプリケーションやWindow"
"sと統合するミドルウェアや、PDFやハードディスクを暗号化して署名するアプリケーションも含まれます。"

#: ../to-be-integrated.rst:56
msgid "Alternative PKCS#11 Driver:"
msgstr "代替PKCS#11ドライバー。"

#: ../to-be-integrated.rst:58
msgid "The recommended PKCS#11 driver is OpenSC. Alternatively, you could use Peter Koch's PKCS#11 driver which has the following limitations:"
msgstr ""
"推奨される PKCS#11 ドライバは OpenSC です。代わりに、Peter "
"Koch'氏のPKCS#11ドライバーを使用することもできますが、以下のような制限があります。"

#: ../to-be-integrated.rst:60
msgid "No import of existing X.509 certificates. (Instead, keys have to be generated on the Nitrokey) The Linux version does not allow to generate keys. Modification of the password/PIN under Linux is not possible."
msgstr ""
"既存のX.509証明書のインポートはできません。(代わりにNitrokey上で鍵を生成する必要があります）Linux版では鍵の生成ができません。Linux"
"版では、パスワード/PINの変更はできません。"

#: ../to-be-integrated.rst:64
msgid "p11-glue"
msgstr "p11-glue"

#: ../to-be-integrated.rst:66
msgid "P11-glue uses PKCS#11 as glue between crypto libraries and security applications on the open source desktop. Articles in German"
msgstr ""
"P11-glue は、PKCS#11 "
"を、オープンソース・デスクトップ上の暗号ライブラリとセキュリティ・アプリケーションの間の接着剤として使用します。ドイツ語の記事"

#: ../to-be-integrated.rst:69
msgid "Eine allgemeine und gut verständliche Einführung bietet der Artikel Magisches Leuchten im Linux Magazin 2010/12. Eine umfangreiche Anleitung gibt es auf Pro-Linux. Einen ausfuehrlichen Erfahrungsbericht unter CentOS."
msgstr ""
"Linux Magazin 2010/12 に掲載された記事 Magisches Leuchten "
"は、全体的で非常にわかりやすい説明がなされています。また、Pro-Linux には詳細な解説が掲載されています。CentOS "
"についての詳細な体験談を掲載しています。"

#: ../to-be-integrated.rst:75
msgid "**Q:** How can I login into Windows?"
msgstr "**Q:** Windowsにログインするにはどうすればいいですか？"

#: ../to-be-integrated.rst:75
msgid "To access Nitrokey devices read-only, download and install this Mini Driver (CSP). If you are using Windows Server you may need to disable the driver signature verification before being able to install the driver. Note that the Mini Driver for Nitrokey Pro may not work yet for write mode."
msgstr ""
"Nitrokeyデバイスに読み取り専用でアクセスするには、このMini Driver (CSP)をダウンロードしてインストールしてください。"
"Windows Serverを使用している場合は、ドライバをインストールする前に、ドライバの署名検証を無効にする必要があります。なお、Nitrokey "
"Pro用のミニドライバは、書き込みモードではまだ動作しない場合があります。"

#: ../to-be-integrated.rst:77
msgid "There exist different ways to use a Nitrokey to logon on Windows:"
msgstr "WindowsでNitrokeyを使ってログオンするには、さまざまな方法があります。"

#: ../to-be-integrated.rst:79
msgid "Login on stand alone Windows computers based on EIDAuthenticate. Alternatively install OpenSC and use Aloaha Smart Login's PKCS#11 Credentials. Login on Windows domain computers using MS Active Directory based OpenPGP-CSP minidriver for Nitrokey Storage 2 Nitrokey Pro 2 Login on Windows domain computers using MS Active Directory based on Smart Policy for other Nitrokey devices."
msgstr ""
"スタンドアローンの Windows コンピュータに EIDAuthenticate を使ってログインします。また、OpenSCをインストールし、"
"Aloaha Smart Login'のPKCS#11 Credentialsを使用することもできます。OpenPGP-CSP minidriver "
"for Nitrokey Storage 2 Nitrokey Pro 2 MS Active "
"Directoryを使用したWindowsドメインコンピュータへのログイン 他のNitrokeyデバイスのSmart Policyを使用したMS "
"Active Directoryを使用したWindowsドメインコンピュータへのログイン。"

#: ../to-be-integrated.rst:84
msgid "**Q:** How can I login into Linux? Linux Login with PAM"
msgstr "**Q:** Linuxにログインするにはどうすればいいですか？PAMによるLinuxログイン"

#: ../to-be-integrated.rst:87
msgid "You have two options: pam_p11 or Poldi."
msgstr "pam_p11」と「Poldi」の2つの選択肢があります。"

#: ../to-be-integrated.rst:89
msgid "The solution with pam_p11 is more difficult to achieve and is based on S/MIME certificates. Please have a look at the documentation for more information."
msgstr "pam_p11での解決はより困難で、S/MIME証明書に基づいています。詳細については、ドキュメントをご覧ください。"

#: ../to-be-integrated.rst:91
msgid "Poldi 0.4.1 works flawlessly with Nitrokey for PAM authentication with RSA keys (see Troubleshooting for information on ECC keys). Besides the installation of poldi (e.g. 'sudo apt-get install libpam-poldi' on Ubuntu) the following steps are needed to get it working."
msgstr ""
"Poldi 0.4."
"1は、RSA鍵を使ったPAM認証のNitrokeyと完璧に動作します（ECC鍵に関する情報は「トラブルシューティング」を参照）。poldiのインストール（"
"Ubuntuでは 'sudo apt-get install libpam-poldi'など）の他に、動作させるためには以下の手順が必要です。"

#: ../to-be-integrated.rst:93
msgid "It is necessary to already have keys generated on the Nitrokey, as the authentication key is used by PAM."
msgstr "認証キーはPAMが使用するため、すでにNitrokeyでキーが生成されている必要があります。"

#: ../to-be-integrated.rst:95
msgid "At first you need to find out the \"Application ID\" of your Nitrokey. You can use \"gpg --card-status | grep Application\" to find out what's yours. It looks like 'D00600012401020000000000xxxxxxxx' or similiar. Now you have to add a line to /etc/poldi/localdb/users which contains the following information"
msgstr ""
"まず最初に、あなたのNitrokeyのアプリケーションIDを確認する必要があります。gpg --card-status | grep "
"Application\"を使って、あなたのNitrokeyが何であるかを調べることができます。それは "
"'D00600012401020000000000xxxx'のようなものです。次に、/etc/poldi/localdb/users "
"に以下の情報を含む行を追加してください。"

#: ../to-be-integrated.rst:97
msgid "<YourApplicationID> <YourUsername>"
msgstr "<YourApplicationID> <YourUsername>"

#: ../to-be-integrated.rst:99
msgid "This could look like 'D00600012401020000000000xxxxxxxx nitrokeyuser'. Now dump the public key from the Nitrokey into poldi local db:"
msgstr ""
"これは 'D00600012401020000000000xxxx nitrokeyuser' "
"のようになります。ここで、Nitrokeyから公開鍵をpoldiのローカルDBにダンプします。"

#: ../to-be-integrated.rst:101
msgid "sudo sh -c 'gpg-connect-agent \"/datafile /etc/poldi/localdb/keys/<YourApplicationID>\" \"SCD READKEY --advanced OPENPGP.3\" /bye'"
msgstr ""
"sudo sh -c 'gpg-connect-agent \"/datafile /etc/poldi/localdb/keys/"
"<YourApplicationID>\" \"SCD READKEY --advanced OPENPGP.3\" /bye'"

#: ../to-be-integrated.rst:103
msgid "Please be aware that you have to insert your Application ID in the line above with the one of your stick!"
msgstr "上の行に、あなたのスティックのIDを記入してください。"

#: ../to-be-integrated.rst:105
msgid "Then you have to configure PAM. Just add \"auth sufficient pam_poldi.so\" to pam configuration files according to your needs:"
msgstr ""
"次に、PAMを設定する必要があります。必要に応じて、pamの設定ファイルに\"auth sufficient pam_poldi."
"so\"を追加してください。"

#: ../to-be-integrated.rst:107
msgid "/etc/pam.d/common-auth for graphical user login /etc/pam.d/login for console login /etc/pam.d/sudo for sudo authentication /etc/pam.d/gnome-screensaver for login back from a locked screen etc."
msgstr ""
"グラフィカルユーザーログインのための/etc/pam.d/common-auth /etc/pam.d/login コンソールログインのための/etc/"
"pam.d/sudo sudo認証のための/etc/pam.d/gnome-screensaver ロックされた画面からログインしなおすための/etc/"
"pam.d/gnome-screensaver など。"

#: ../to-be-integrated.rst:113
msgid "Note: Pam is dangerous to play around with, so make sure you have a way of accessing the machine if you break authentication completely. Remember that booting into rescue mode from Grub requires a root password, so keep that or a live CD which can read your filesystems to hand."
msgstr ""
"注意：Pamは弄ると危険なので、認証を完全に解除した場合にマシンにアクセスする方法を確保してください。Grubからレスキューモードで起動するには、root"
"のパスワードが必要なことを覚えておいてください。ファイルシステムを読み込めるライブCDなどを用意しておきましょう。"

#: ../to-be-integrated.rst:115
msgid "Here you find further instructions (in German, partially outdated). Troubleshooting"
msgstr "ここでは、詳しい説明をご覧いただけます（ドイツ語、一部古いです）。トラブルシューティング"

#: ../to-be-integrated.rst:118
msgid "If you get an error similar to 'ERR 100663414 Invalid ID <SCD>' you should try instead"
msgstr ""
"もし、 'ERR 100663414 Invalid ID <SCD>' のようなエラーが発生した場合は、代わりに次のことを試してみてください。"

#: ../to-be-integrated.rst:120
msgid "poldi-ctrl -k > <YourApplicationID>; sudo mv <YourApplicationID> /etc/poldi/localdb/keys"
msgstr ""
"poldi-ctrl -k > <YourApplicationID>; sudo mv <YourApplicationID> /etc/poldi/"
"localdb/keys"

#: ../to-be-integrated.rst:122
msgid "Please be aware that you have to insert your Application ID in the line above with the one of your stick! ECC Keys Unfortunately, poldi has no support for ECC keys yet. But there is a patch for ECC keys used with Nitrokey Start. This is already included in the master branch of the poldi development repository and thus will be released in a newer version eventually. In the meantime the only option is to build poldi from source."
msgstr ""
"上の行のアプリケーションIDは、あなたのスティックのものと一緒に挿入しなければならないことに注意してください。ECCキー "
"残念ながら、poldiはECCキーをまだサポートしていません。しかし、Nitrokey Startで使用するECCキー用のパッチがあります。これはすでにp"
"oldi開発リポジトリのmasterブランチに含まれており、いずれ新しいバージョンでリリースされる予定です。それまでの間、唯一の選択肢はpoldiをソース"
"からビルドすることです。"

#: ../to-be-integrated.rst:128
msgid "**Q:** How can I login with One Time Passwords?"
msgstr "**Q:**ワンタイムパスワードでログインするにはどうすればいいですか？"

#: ../to-be-integrated.rst:128
msgid "One-Time-Passwords (OTP) are used for secure login to websites and local applications."
msgstr "ワンタイムパスワード（OTP）は、ウェブサイトやローカルアプリケーションへの安全なログインに使用されます。"

#: ../to-be-integrated.rst:130
msgid "Two OTP modes exist:"
msgstr "OTPモードは2種類あります。"

#: ../to-be-integrated.rst:132
msgid "Time-based One-time Passwords (TOTP) is widely used for websites. If unsure, assume you are using this mode. HMAC-based One-time Passwords (HOTP) is used for local applications and computer logins."
msgstr ""
"WebサイトではTOTP（Time-based One-Time Passwords）が広く使われています。よくわからない場合は、このモードを使用している"
"と考えてください。HMACベースのワンタイムパスワード（HOTP）は、ローカルアプリケーションやコンピュータのログインに使用されます。"

#: ../to-be-integrated.rst:135
msgid "To use One-Time-Passwords with your Nitrokey Pro or Nitrokey Storage, you need to download and install the latest Nitrokey App. Time-based One-time Passwords - TOTP"
msgstr ""
"Nitrokey ProまたはNitrokey "
"Storageでワンタイムパスワードを使用するには、最新のNitrokeyアプリをダウンロードしてインストールする必要があります。"
"時間ベースのワンタイムパスワード - TOTP"

#: ../to-be-integrated.rst:138
msgid "For login to a Google account. For login to a Microsoft account. For login to a Nextcloud account. Generic instructions for all other services."
msgstr ""
"Googleアカウントでログインする場合。Microsoftアカウントへのログインの場合。Nextcloudアカウントへのログインについて。その他のサービ"
"スに関する一般的な説明です。"

#: ../to-be-integrated.rst:143
msgid "**Q:** How can I use the Nitrokey Pro with Android?"
msgstr "**Q:** AndroidでNitrokey Proを使うにはどうしたらいいですか？"

#: ../to-be-integrated.rst:145
msgid "It is possible to use the Nitrokey on an Android devices in combination with OpenKeychain. This enables one to encrypt/decrypt E-Mails or files via OpenPGP."
msgstr ""
"Android端末では、OpenKeychainと組み合わせてNitrokeyを使用することができます。これにより、OpenPGPによるEメールやファイル"
"の暗号化/復号化が可能になります。"

#: ../to-be-integrated.rst:147
msgid "Cotech provides Android software with commercial support. Please have a look there, if you like. The following instructions are based on OpenKeychain."
msgstr ""
"コテックは、商用サポート付きのAndroidソフトウェアを提供しています。よろしければそちらもご覧ください。以下の説明は、OpenKeychainに基づい"
"ています。"

#: ../to-be-integrated.rst:149
msgid "Tested with Nitrokey Start, Pro and Storage in combination with Android 7.1, OpenKeychain 4.5 and K9Mail 5.207. Prerequisites"
msgstr ""
"Nitrokey Start、Pro、StorageとAndroid 7.1、OpenKeychain 4.5、K9Mail 5."
"207との組み合わせでテスト済み。前提条件"

#: ../to-be-integrated.rst:152
msgid "Android phone which is capable of USB OTG USB OTG cable to connect the Nitrokey with your phone OpenKeychain installed on Device Public key saved on the device or uploaded on a keyserver"
msgstr ""
"USB OTGが可能なAndroid携帯電話 Nitrokeyと携帯電話を接続するためのUSB OTGケーブル "
"端末にインストールされたOpenKeychain 端末に保存された公開鍵、または鍵サーバにアップロードされた公開鍵"

#: ../to-be-integrated.rst:157
msgid "First steps"
msgstr "最初のステップ"

#: ../to-be-integrated.rst:159
msgid "To import the keys of the Nitrokey you should at first start the OpenKeychain app. Then insert the Nitrokey with the USB OTG cable. OpenKeychain starts a dialog to use the Nitrokey (you may have to accept the usage of the key with OpenKeychain first). Now you can choose between looking for public key on a keyserver or choosing the public key from storage. After the public key got imported you have to tap on 'connect key' to import a reference to the private key of the Nitrokey. That’s basically it."
msgstr ""
"Nitrokeyの鍵をインポートするには、まずOpenKeychainアプリを起動します。次にNitrokeyをUSB OTGケーブルで挿入します。Ope"
"nKeychainは、Nitrokeyを使用するためのダイアログを開始します（最初にOpenKeychainでの鍵の使用を受け入れる必要があるかもしれませ"
"ん）。ここで、公開鍵をキーサーバーで探すか、ストレージから公開鍵を選ぶかを選択できます。公開鍵がインポートされたら、 'connect "
"key'をタップして、Nitrokeyの秘密鍵への参照をインポートする必要があります。以上が基本的な操作方法です。"

#: ../to-be-integrated.rst:161
msgid "In the case that no there are no keys on the Nitrokey yet, OpenKeychain will help with the creation of a new key pair instead. Usage"
msgstr "Nitrokeyにまだ鍵がない場合は、OpenKeychainが代わりに新しい鍵ペアの作成をサポートします。使用方法"

#: ../to-be-integrated.rst:164
msgid "You can use all functions of OpenKeychain and Apps which make use of OpenKeychain. Therefore you can just encrypt/decrypt messages or files by hand using the app directly or for example you combine K9Mail with OpenKeychain to decrypt your mails automatically. It is important to choose the right key in the K9Mail account settings first."
msgstr ""
"OpenKeychainのすべての機能と、OpenKeychainを利用したアプリを利用することができます。そのため、アプリを直接使ってメッセージやファイ"
"ルを手動で暗号化/復号化することもできますし、例えばK9MailとOpenKeychainを組み合わせて、メールを自動的に復号化することもできます。最初に"
"K9Mailのアカウント設定で正しいキーを選択することが重要です。"

#: ../to-be-integrated.rst:166
msgid "Note that you may have to enable the on-screen keyboard in the android settings to type the PIN as the system recognizes the Nitrokey as a physical keyboard and therefore tries to hide the on-screen keyboard. Go to 'Language and Input' > 'Current Keyboard' > 'Hardware show input method'."
msgstr ""
"なお、システムがNitrokeyを物理的なキーボードとして認識しているため、オンスクリーンキーボードを隠そうとするため、PINを入力するにはアンドロイドの"
"設定でオンスクリーンキーボードを有効にしなければならない場合があります。'言語と入力' > '現在のキーボード' > 'ハードウェアで入力方法を表示' "
"に移動します。"

#: ../to-be-integrated.rst:169
msgid "**Q:** How can I use the Nitrokey Pro with Iphone?"
msgstr "**Q:** IphoneでNitrokey Proを使用するにはどうすればよいですか？"

#: ../to-be-integrated.rst:170
msgid "Currently it is not possible"
msgstr "現在はできません。"

#: ../to-be-integrated.rst:172
msgid "**Q:** How can I use the Nitrokey Pro with Ubuntu Phone?"
msgstr "**Q:** Ubuntu PhoneでNitrokey Proを使用するにはどうすればよいですか？"

#: ../to-be-integrated.rst:172
msgid "There are instructions on gnupg.org about how to use a OpenPGP Card on a UbuntuPhone which should work for the Nitrokey Start, Pro and Storage."
msgstr ""
"gnupg.orgには、UbuntuPhoneでOpenPGPカードを使用する方法が掲載されており、Nitrokey "
"Start、Pro、Storageでも使用できるはずです。"

#: ../to-be-integrated.rst:174
msgid "**Q:** How can I do Email encryption? There are two widely used standards for email encryption. While OpenPGP/GnuPG is popular among individuals, S/MIME/X.509 is mostly used by enterprises. If you are in doubt which one to choose, you should use OpenPGP."
msgstr ""
"**Q:** 電子メールの暗号化はどのように行えばよいのでしょうか？電子メールの暗号化には、広く使われている2つの規格があります。OpenPGP/"
"GnuPGは個人に人気がありますが、S/MIME/X."
"509は主に企業で使用されています。どちらを選択するか迷った場合は、OpenPGPを使用してください。"

#: ../to-be-integrated.rst:177
msgid "instructions for using the OpenPGP standard with the Nitrokey instructions for using S/MIME with the Nitrokey. Note: SMIME certificates can be purchased cheaply from CERTUM and SSLTrust."
msgstr ""
"NitrokeyでOpenPGP規格を使用する方法 NitrokeyでS/"
"MIMEを使用する方法を説明しています。注：SMIME証明書は、CERTUMやSSLTrustから安価に購入できます。"

#: ../to-be-integrated.rst:180
msgid "Please note, that it is currently advised to use either OpenPGP or S/MIME encryption, but not both with the Nitrokey."
msgstr ""
"現在、NitrokeyではOpenPGPまたはS/"
"MIMEのいずれかの暗号化を使用することが推奨されていますが、両方を使用することはできませんのでご注意ください。"

#: ../to-be-integrated.rst:182
msgid "To use a Nitrokey Storage with Thunderbird 78+, you can try this tutorial."
msgstr "Thunderbird 78+でNitrokey Storageを使用するには、こちらのチュートリアルをお試しください。"

#: ../to-be-integrated.rst:184
msgid "**Q:** How can I do Hard Disk Encryption?"
msgstr "**Q:** ハードディスクの暗号化はどのように行えばよいのでしょうか？"

#: ../to-be-integrated.rst:187
msgid "For: Nitrokey Pro, Nitrokey Storage, Nitrokey Start VeraCrypt (formerly TrueCrypt)"
msgstr ""
"のためのものです。Nitrokey Pro、Nitrokey Storage、Nitrokey Start VeraCrypt (旧TrueCrypt)"

#: ../to-be-integrated.rst:190
msgid "VeraCrypt is a free and Open Source disk encryption software for Windows, macOS, and GNU/Linux. It is the successor of TrueCrypt and thus recommended, although the following instructions should apply to TrueCrypt as well. Follow these steps to use the program with Nitrokey Storage or Pro:"
msgstr ""
"VeraCryptは、Windows、macOS、GNU/Linuxに対応したフリーでオープンソースのディスク暗号化ソフトウェアです。VeraCryptは"
"TrueCryptの後継ソフトであり、推奨ソフトですが、以下の説明はTrueCryptにも当てはまります。このプログラムをNitrokey "
"StorageまたはProで使用するには、以下の手順に従ってください。"

#: ../to-be-integrated.rst:192
#: ../to-be-integrated.rst:704
msgid "Install OpenSC Choose the library in VeraCrypt under Settings>Preferences>Security Token (location depends on system, e.g. /usr/lib/opensc). Generate a 64 Byte key file via Tools>Keyfile Generator. Now you should be able to import the generated key file via Tools>Manage Security Token Keyfiles. You should choose the first Slot ([0] User PIN). The keyfile is then stored on the Nitrokey as 'Private Data Object 1' (PrivDO1). After this you should wipe the original keyfile on your Computer securely! Now you can use VeraCrypt with the Nitrokey: Create a container, choose the keyfile on the device as an alternative to a password."
msgstr ""
"OpenSCのインストール VeraCryptの「Settings>Preferences>Security "
"Token」でライブラリを選択します（場所はシステムによって異なります、例：/usr/lib/opensc）。Tools>Keyfile "
"Generatorで64バイトのキーファイルを生成します。Tools>Manage Security Token "
"Keyfilesで生成したキーファイルをインポートします。最初のSlot（[0] User PIN）を選択してください。キーファイルはNitrokeyに "
"'Private Data Object 1' (PrivDO1)として保存されます。この後、コンピュータ上のオリジナルのキーファイルを安全に消去してくだ"
"さい。これでNitrokeyでVeraCryptを使うことができます。コンテナを作成して、パスワードの代わりにデバイス上のキーファイルを選択します。"

#: ../to-be-integrated.rst:199
msgid "Security Consideration: Please note that VeraCrypt doesn't make use of the full security which Nitrokey (and smart cards in general) offer. Instead it stores a keyfile on the Nitrokey which theoretically could be stolen by a computer virus after the user enters the PIN."
msgstr ""
"セキュリティへの配慮。VeraCryptは、Nitrokey(および一般的なスマートカード)が提供する完全なセキュリティを利用していないことに注意してくだ"
"さい。その代わりに、ユーザーがPINを入力した後に、理論上はコンピュータウイルスによって盗まれる可能性のあるキーファイルをNitrokeyに保存します。"

#: ../to-be-integrated.rst:201
msgid "Note: Aloaha Crypt is based on TrueCrypt/VeraCrypt but without the described security limitation."
msgstr "注：Aloaha Cryptは、TrueCrypt/VeraCryptをベースにしていますが、記載されているセキュリティ制限はありません。"

#: ../to-be-integrated.rst:204
msgid "Hard Disk Encryption on Linux, Based on LUKS/dm-crypt Here are excellent instructions how to use Nitrokey to encrypt your hard disk under Linux with LUKS/dm-crypt. Other instruction."
msgstr ""
"LUKS/dm-cryptに基づくLinuxでのハードディスク暗号化 ここでは、LinuxでNitrokeyを使ってLUKS/dm-"
"cryptでハードディスクを暗号化する方法についての優れた説明があります。その他の命令です。"

#: ../to-be-integrated.rst:207
msgid "Purism has created a simple script to add the Nitrokey/LibremKey as a way to unlock LUKS partitions (not tested by Nitrokey yet)."
msgstr ""
"Purismは、LUKSパーティションのロックを解除する方法として、Nitrokey/"
"LibremKeyを追加する簡単なスクリプトを作成しました（Nitrokeyではまだテストされていません）。"

#: ../to-be-integrated.rst:209
msgid "This project aims to ease the use of LUKS with the Nitrokey Pro or Storage based on the Password Safe (not tested by Nitrokey yet). A description on how to use it on Gentoo can be found here."
msgstr ""
"このプロジェクトは、Nitrokey Proや、Password SafeをベースにしたStorageで、LUKSの使用を容易にすることを目的としています"
"（Nitrokeyではまだテストしていません）。Gentooでの使用方法については、こちらを参照してください。"

#: ../to-be-integrated.rst:211
msgid "For Arch Linux, see initramfs-scencrypt. Storage Encryption on Linux, Based on EncFS"
msgstr "Arch Linuxでは、initramfs-scencryptを参照してください。Linuxでのストレージ暗号化、EncFSに基づく"

#: ../to-be-integrated.rst:214
msgid "Prerequisite: Please ensure that you installed the device driver, changed the default PINs and generated or imported keys with GnuPG."
msgstr ""
"前提条件です。デバイスドライバーのインストール、デフォルトのPINの変更、GnuPGでの鍵の生成またはインポートが完了していることを確認してください。"

#: ../to-be-integrated.rst:216
msgid "An easy to use encrypted file system is EncFS, which is based on FUSE. You may follow these steps to use it with very long passwords and Nitrokey:"
msgstr ""
"簡単に使える暗号化ファイルシステムとして、FUSEをベースにしたEncFSがあります。以下の手順で、非常に長いパスワードやNitrokeyを使って使用する"
"ことができます。"

#: ../to-be-integrated.rst:218
msgid "Initialization"
msgstr "初期化"

#: ../to-be-integrated.rst:220
msgid "# Create a key file with random data: $ dd bs=64 count=1 if=/dev/urandom of=keyfile"
msgstr "# dd bs=64 count=1 if=/dev/urandom of=keyfile ・・・・・・・・・・・・。"

#: ../to-be-integrated.rst:223
msgid "# Encrypt the key file and use the User-ID of your Nitrokey $ gpg --encrypt keyfile"
msgstr "# 鍵ファイルを暗号化して、NitrokeyのUser-IDを使う $ gpg --encrypt keyfile"

#: ../to-be-integrated.rst:226
msgid "# Remove the key file in clear text: $ rm keyfile # you may want to use 'wipe' or 'shred' to securely delete the keyfile"
msgstr ""
"# 鍵ファイルを平文で削除する: $ rm keyfile # 鍵ファイルを安全に削除するために 'wipe'や 'shred'を使用することもできます。"

#: ../to-be-integrated.rst:229
msgid "# Create mount point: $ mkdir ~/.cryptdir ~/cryptdir"
msgstr "# マウントポイントの作成: $ mkdir ~/.cryptdir ~/cryptdir"

#: ../to-be-integrated.rst:232
msgid "# Create the actual encryption folder $ gpg -d keyfile.gpg | encfs -S ~/.cryptdir ~/cryptdir"
msgstr "# 実際の暗号化フォルダの作成 $ gpg -d keyfile.gpg | encfs -S ~/.cryptdir ~/cryptdir"

#: ../to-be-integrated.rst:235
msgid "# There may appears an error message about missing permission of fusermount # This message can be ignored"
msgstr "# fusermountのパーミッションが足りないというエラーメッセージが表示されるかもしれません # このメッセージは無視して構いません"

#: ../to-be-integrated.rst:238
msgid "# Unmount the new file system: $ fusermount -u ~/cryptdir"
msgstr "# 新しいファイルシステムをアンマウントする: $ fusermount -u ~/cryptdir"

#: ../to-be-integrated.rst:241
msgid "Usage"
msgstr "使用方法"

#: ../to-be-integrated.rst:243
msgid "# Mount encrypted file system and enter PIN of Nitrokey: $ gpg -d keyfile.gpg | encfs -S ~/.cryptdir ~/cryptdir"
msgstr ""
"# 暗号化されたファイルシステムをマウントし、NitrokeyのPINを入力： $ gpg -d keyfile.gpg | encfs -S ~/."
"cryptdir ~/cryptdir"

#: ../to-be-integrated.rst:246
msgid "# After usage, unmount the file system: $ fusermount -u ~/cryptdir"
msgstr "# 使用後、ファイルシステムをアンマウントします: $ fusermount -u ~/cryptdir"

#: ../to-be-integrated.rst:250
msgid "Storage Encryption on Linux, Based on ECryptFS"
msgstr "ECryptFSをベースにしたLinuxでのストレージ暗号化"

#: ../to-be-integrated.rst:252
msgid "eCryptfs is a file based transparent encryption file system for Linux which can be used with Nitrokey through a PKCS#11 driver. See these instructions. Alternatively, try ESOSI or follow these steps using OpenSC and OpenVPN:"
msgstr ""
"eCryptfsは、Linux用のファイルベースの透過型暗号化ファイルシステムで、PKCS#11ドライバを介してNitrokeyで使用することができます。"
"以下の手順をご覧ください。別の方法として、ESOSIを試すか、OpenSCとOpenVPNを使って以下の手順を実行してください。"

#: ../to-be-integrated.rst:254
msgid "Warning: This will delete existing keys on your Nitrokey!"
msgstr "警告この操作を行うと、Nitrokeyの既存のキーが削除されます。"

#: ../to-be-integrated.rst:256
msgid "# Import the certificate and key to the Nitrokey $ pkcs15-init --delete-objects privkey,pubkey --id 3 --store-private-key user@example.com.p12 --format pkcs12 --auth-id 3 --verify-pin"
msgstr ""
"# Nitrokey に証明書と鍵をインポートする $ pkcs15-init --delete-objects privkey,pubkey --id "
"3 --store-private-key user@example.com.p12 --format pkcs12 --auth-id 3 "
"--verify-pin"

#: ../to-be-integrated.rst:259
msgid "# Create the file ~/.ecryptfsrc.pkcs11: $ editor ~/.ecryptfsrc.pkcs11"
msgstr "# ファイル ~/.ecryptfsrc.pkcs11 の作成: $ editor ~/.ecryptfsrc.pkcs11"

#: ../to-be-integrated.rst:262
msgid "# Enter this content: $ pkcs11-log-level=5 pkcs11-provider1,name=name,library=/usr/lib/opensc-pkcs11.so,cert-private=true $ openvpn --show-pkcs11-ids path to opensc-pkcs11 module Certificate"
msgstr ""
"# Enter this content: $ pkcs11-log-level=5 "
"pkcs11-provider1,name=name,library=/usr/lib/opensc-pkcs11.so,cert-"
"private=true $ openvpn --show-pkcs11-ids path to opensc-pkcs11 module "
"Certificate"

#: ../to-be-integrated.rst:266
msgid "DN: /description=Iv4IQpLO02Mnix9i/CN=user@example.com/emailAddress=user@example.com Serial: 066E04 Serialized id: ZeitControl/PKCS\\x2315\\x20emulated/000500000c7f/OpenPGP\\x20card\\x20\\x28User\\x20PIN\\x29/03"
msgstr ""
"DN: /description=Iv4IQpLO02Mnix9i/CN=user@example.com/emailAddress=user@"
"example.com Serial:066E04 Serialized id:ZeitControl/PKCS\\x2315\\x20emulated/"
"000500000c7f/OpenPGP\\x20card\\x20\\x28User\\x20PIN\\x29/03"

#: ../to-be-integrated.rst:270
msgid "# Copy the serialized id for later usage: $ ecryptfs-manager"
msgstr "# シリアライズされたIDを後で使用するためにコピーします。$ ecryptfs-manager"

#: ../to-be-integrated.rst:273
msgid "# This will show list option. Choose option \"Add public key to keyring\" # Choose pkcs11-helper # Enter the serialized ID of step 3 to PKCS#11 ID."
msgstr ""
"# オプション一覧が表示されます。Choose option \"Add public key to keyring\" # Choose pkcs11-"
"helper # Step3でシリアル化したIDをPKCS#11 IDに入力します。"

#: ../to-be-integrated.rst:281
msgid "**Q:** How can I sign and encrypt Files and PDFs? GnuPG"
msgstr "**Q:** ファイルやPDFに署名したり暗号化したりするにはどうすればいいですか？GnuPG"

#: ../to-be-integrated.rst:284
msgid "Use the gpgsm tool to sign, verify, encrypt and decrypt files. Use a signature key on a Nitrokey to sign documents using Acrobat Reader, Open Office / Libre Office or any other PDF reader supporting electronic signatures."
msgstr ""
"gpgsmツールを使って、ファイルの署名、検証、暗号化、復号化を行うことができます。Nitrokeyの署名鍵を使って、Acrobat "
"ReaderやOpen Office / Libre Officeなど、電子署名に対応したPDFリーダーで文書に署名することができます。"

#: ../to-be-integrated.rst:287
msgid "GPA - GNU Privacy Assistant"
msgstr "GPA - GNUプライバシー・アシスタント"

#: ../to-be-integrated.rst:289
msgid "The Gnu Privacy Assistant (GPA) recognizes Nitrokey out-of-the-box, has various features to manage keys and cards. It also allows file operations such as file encryption, decryption, signing."
msgstr ""
"Gnu Privacy Assistant (GPA)は、Nitrokeyをすぐに認識し、鍵やカードを管理する様々な機能を備えています。また、ファイルの暗"
"号化、復号化、署名などのファイル操作も可能です。"

#: ../to-be-integrated.rst:292
msgid "SOPS - Secrect OPerationS"
msgstr "SOPS - Secrect OPerationS"

#: ../to-be-integrated.rst:294
msgid "SOPS is an editor of encrypted files that supports YAML, JSON and BINARY formats and encrypts with AWS KMS and PGP. You can find it on github."
msgstr ""
"SOPSは、YAML、JSON、BINARY形式をサポートし、AWS "
"KMSとPGPで暗号化する、暗号化ファイルのエディタです。githubで公開されています。"

#: ../to-be-integrated.rst:297
msgid "Aloaha"
msgstr "アロハ"

#: ../to-be-integrated.rst:299
msgid "Aloaha provides several applications to encrypt and sign PDFs. All of them, which allow smart card integration, work with Nitrokey. You can for example import key and certificate by using OpenSC or any other appropriate variant. After this Windows recognize your certificate and you can sign the document as it is shown in the screencast below."
msgstr ""
"アロハでは、PDFを暗号化・署名するためのアプリケーションをいくつか提供しています。スマートカードの統合が可能なこれらのアプリケーションはすべて、Nitr"
"okeyで動作します。例えば、OpenSCやその他の適切なバリアントを使用して、鍵と証明書をインポートすることができます。これにより、Windowsはあな"
"たの証明書を認識し、以下のスクリーンキャストに示されているように、文書に署名することができます。"

#: ../to-be-integrated.rst:301
msgid "GpgEx for Windows Explorer"
msgstr "Windowsエクスプローラ用GpgEx"

#: ../to-be-integrated.rst:303
msgid "GpgEx integrates smoothly into Windows Explorer to allow encryption and decryption of files. Install it as part of the GPG4Win package."
msgstr ""
"GpgExは、Windowsエクスプローラにスムーズに統合され、ファイルの暗号化と復号化を可能にします。GPG4Winパッケージの一部としてインストールし"
"てください。"

#: ../to-be-integrated.rst:306
msgid "Before you start to use any of these applications with your Nitrokey, please ensure that you installed the device driver and initialized the device (e.g. generated keys)."
msgstr ""
"これらのアプリケーションをNitrokeyでご使用になる前に、デバイスドライバーのインストールとデバイスの初期化（キーの生成など）が完了していることをご確"
"認ください。"

#: ../to-be-integrated.rst:308
msgid "Certificate-based login with TLS and web browser is a very secure authentication method but it is only used rarely. If you are unsure what this means, this approach is most likely not relevant for you."
msgstr ""
"TLSとWebブラウザを使った証明書ベースのログインは、非常に安全な認証方法ですが、ごくまれにしか使われません。これが何を意味するのかわからない場合は、こ"
"の方法はあなたには関係ない可能性が高いです。"

#: ../to-be-integrated.rst:310
msgid "This page refers to websites and applications which support certificate authentication, so that users don't need to enter username and password when login. For instance WebID is a great protocol which makes use of it. Certificate authentication can be used easily with the Nitrokey and also with any other certificate storages. Mozilla Firefox"
msgstr ""
"このページでは、ユーザーがログイン時にユーザー名とパスワードを入力する必要がないように、証明書認証をサポートしているWebサイトやアプリケーションを紹介し"
"ます。例えば、WebIDは証明書認証を利用した優れたプロトコルです。証明書認証は、Nitrokeyやその他の証明書ストアで簡単に使用できます。"
"Mozilla Firefox"

#: ../to-be-integrated.rst:313
msgid "You need to install the PKCS#11 driver:"
msgstr "PKCS#11ドライバーをインストールする必要があります。"

#: ../to-be-integrated.rst:315
msgid "Download the PKCS11 driver and store it on your local hard disk or install OpenSC. Open the Preferences in Firefox and go to  Privacy & Security -> Security (just a headline) -> Button 'Security Devices...' Press the button Load. Enter \"Nitrokey\" as the Module Name and press the Browse button to select the previously downloaded PKCS11 driver file. Confirm and close all dialogs."
msgstr ""
"PKCS11ドライバをダウンロードし、ローカルハードディスクに保存するか、OpenSCをインストールします。Firefoxの環境設定を開き、"
"Privacy & Security -> Security (just a headline) -> Button 'Security "
"Devices... ' Loadボタンを押します。モジュール名に\"Nitrokey\"と入力し"
"、参照ボタンを押して先にダウンロードしたPKCS11ドライバファイルを選択します。すべてのダイアログを確認して閉じます。"

#: ../to-be-integrated.rst:319
msgid "Now you are ready to access websites which provide certificate authentication. Internet Explorer"
msgstr "これで、証明書認証を提供するWebサイトにアクセスする準備が整いました。Internet Explorer"

#: ../to-be-integrated.rst:322
msgid "Install this Mini Driver for Windows. Now you are ready to access websites which provide certificate authentication. Google Chrome"
msgstr ""
"このMini "
"DriverをWindowsにインストールします。これで、証明書認証を提供しているウェブサイトにアクセスできるようになります。グーグルクローム"

#: ../to-be-integrated.rst:325
msgid "Under Windows, install this Mini Driver. Under Linux, follow these instructions. Now you are ready to access websites which provide certificate authentication. WebID"
msgstr ""
"Windowsでは、このMini Driverをインストールしてください。Linuxでは、以下の手順でインストールしてください。これで、証明書による認証を"
"行っているWebサイトにアクセスできるようになります。ウェブID"

#: ../to-be-integrated.rst:328
msgid "WebID is a technology to enable secure and federated social websites. Here is a video (WebM, Ogg video, H.264) which demonstrates how to use Nitrokey to create a WebID profile and subsequently to use it in an Internet cafe in Singapore. Nitrokey protects against computer viruses which might otherwise steel the username and password. Websites Web Site        Category CAcert  community-based Certificate Authority PrivaSphere     Secure messaging HM Revenue & Customs    UK's tax administration Software Application     Category Roundcube (plugin)      Webmail Drupal (WebID, Certificate login)       Content management system Media Wiki (plugin)     Wiki Joomla!         Content management system Apache + mod_ssl        Web server OpenSSH         SSH (remote secure shell) client and server Wordpress (plugin)      Blog and CMS Tivoli  System management framework Globalscape EFT         managed file transfer (MFT) Oracle Identity Manager         I&AM Fuse Source     Middleware Liferay         Blog FusionForge     web-based project-management and collaboration software"
msgstr ""
"WebIDとは、ソーシャルサイトを安全に連携させるための技術です。ここでは、Nitrokeyを使ってWebIDプロファイルを作成し、その後シンガポールのイ"
"ンターネットカフェで使用する方法をビデオ（WebM、Oggビデオ、H."
"264）で紹介します。Nitrokeyは、ユーザー名とパスワードを盗み出すコンピュータウイルスから保護します。Webサイト Webサイトのカテゴリ "
"CAcert コミュニティベースの認証局 PrivaSphere セキュアメッセージング HM Revenue & Customs 英国の税務当局 "
"ソフトウェアアプリケーションのカテゴリ Roundcube（プラグイン） Webメール Drupal（WebID、認証ログイン） コンテンツ管理システム "
"Media Wiki（プラグイン） Wiki Joomla!         コンテンツ管理システム Apache + mod_ssl Webサーバ "
"OpenSSH SSH（リモートセキュアシェル）クライアント・サーバ Wordpress（プラグイン） ブログ・CMS Tivoli "
"システム管理フレームワーク Globalscape EFT managed file transfer (MFT) Oracle Identity "
"Manager I&AM Fuse ソースミドルウェア Liferay Blog FusionForge "
"Webベースのプロジェクト管理・コラボレーションソフトウェア"

#: ../to-be-integrated.rst:350
msgid "This website is a good read about strong authentication mechanisms, why client certificate authentication isn't popular and better alternatives at the horizon."
msgstr "このサイトは、強力な認証メカニズム、クライアント証明書認証が普及していない理由、より優れた代替手段について書かれています。"

#: ../to-be-integrated.rst:352
msgid "**Q:** How can I use Enterprise Authentication?"
msgstr "**Q:** エンタープライズ認証を利用するにはどうすればいいですか？"

#: ../to-be-integrated.rst:354
msgid "LinOTP privacyIDEA RCDevs OpenOTP Usage of Nitrokey HSM as a secure key store for the Forgerock OpenDJ server and Forgerock Identity Gateway"
msgstr ""
"LinOTP privacyIDEA RCDevs OpenOTP Forgerock OpenDJサーバーおよびForgerock Identity "
"GatewayのセキュアなキーストアとしてのNitrokey HSMの使用。"

#: ../to-be-integrated.rst:360
msgid "**Q:** How can I do SSH for Server Administration on Windows? The Nitrokey should already have PGP keys installed and the local GnuPG keyring should be aware of the keys, that is to say GPG4Win should be installed on the system (only the core application GnuPG is needed). Furthermore you should install PuTTY. Preparation on client"
msgstr ""
"**Q:** Windowsでサーバー管理のためのSSHを行うにはどうしたらよいでしょうか？NitrokeyにはすでにPGP鍵がインストールされており、ロ"
"ーカルのGnuPGキーリングがその鍵を認識している必要があります。つまり、GPG4Winがシステムにインストールされている必要があります（必要なのはコアア"
"プリケーションのGnuPGだけです）。さらに、PuTTYをインストールしてください。クライアント側の準備"

#: ../to-be-integrated.rst:364
#: ../to-be-integrated.rst:736
msgid "There are two steps needed to make PuTTY work. At first we need to enable PuTTY support of GnuPG. To achieve this we use the following command:"
msgstr ""
"PuTTYを動作させるには、2つのステップが必要です。まず、GnuPGのPuTTYサポートを有効にする必要があります。そのためには、以下のコマンドを使用し"
"ます。"

#: ../to-be-integrated.rst:366
#: ../to-be-integrated.rst:738
msgid "echo enable-putty-support >> AppData\\Roaming\\gnupg\\gpg-agent.conf"
msgstr "echo enable-putty-support >> AppData\\Roaming\\gnupg\\gpg-agent.conf"

#: ../to-be-integrated.rst:368
#: ../to-be-integrated.rst:740
msgid "Now we want to make sure, that the gpg-agent is starting automatically in the background (you can start it manually with the command below, if you prefer). We create a shortcut to gpg-connect-agent.exe. Press and hold the Windows-key and press 'R'. Type in \"shell:startup\" in the opening textfield (see picture below). The Windows-Explorer opens and you right-click on an empty space and choose \"New\" -> \"Shortcut\". Now you should insert the actual command and proceed:"
msgstr ""
"ここで、gpg-agentがバックグラウンドで自動的に起動していることを確認したいと思います（お好みで、以下のコマンドで手動で起動することもできます"
"）。gpg-connect-agent.exeのショートカットを作成します。Windows-キーを押しながら 'R#x27;を押します。"
"開いたテキストフィールドに \"shell:startup\" と入力します（下図参照）。Windows-"
"Explorerが開き、何もないところで右クリックして、\"New\" -> \"Shortcut\" "
"を選択します。これで、実際のコマンドを挿入して進めることができます。"

#: ../to-be-integrated.rst:370
#: ../to-be-integrated.rst:742
msgid "\"C:\\Program Files (x86)\\gnupg\\bin\\gpg-connect-agent.exe\" /bye"
msgstr "\"C:Program Files (x86)\\\\gpg-connect-agent.exe\" /bye"

#: ../to-be-integrated.rst:374
#: ../to-be-integrated.rst:746
msgid "Reboot your system to make sure the shortcut works. If everything is alright you now can use PuTTY as usual and PuTTY will make use of the Nitrokey automatically. Preparation for the server"
msgstr ""
"システムを再起動して、ショートカットが動作することを確認します。問題がなければ、通常通りPuTTYを使用することができ、PuTTYは自動的にNitroke"
"yを使用します。サーバーの準備"

#: ../to-be-integrated.rst:377
#: ../to-be-integrated.rst:749
msgid "You can generate an authorized_keys file by running"
msgstr "authorized_keysファイルを生成するには、以下の方法があります。"

#: ../to-be-integrated.rst:379
#: ../to-be-integrated.rst:751
msgid "\"C:\\Program Files (x86)\\gnupg\\bin\\gpg.exe\" --export-ssh-key keyID >> authorized_keys"
msgstr ""
"C:Program Files (x86)\\\\gpg.exe\" --export-ssh-key keyID >> authorized_keys"

#: ../to-be-integrated.rst:381
#: ../to-be-integrated.rst:753
msgid "where 'keyID' is either the fingerprint of your key or just the E-Mail address bind to your key. The Nitrokey must already be known to the local GnuPG keyring. You can now append that file to a remote server's authorized_keys and when you ssh to the server you'll be asked for a pin rather than a passphrase."
msgstr ""
"ここで 'keyID'は、鍵のフィンガープリントか、鍵にバインドされた電子メールアドレスのいずれかです。NitrokeyはすでにローカルのGnuPGキーリ"
"ングで知られている必要があります。このファイルをリモートサーバのauthorized_keysに追加すれば、そのサーバにsshするときにパスフレーズではな"
"く、ピンを要求されるようになります。"

#: ../to-be-integrated.rst:388
msgid "**Q:** How can I do SSH for Server Administration on Linux?"
msgstr "**Q:** Linuxでサーバー管理のためにSSHを行うにはどうしたらよいでしょうか？"

#: ../to-be-integrated.rst:390
#: ../to-be-integrated.rst:757
msgid "The Nitrokey should already have PGP keys installed and the local GnuPG keyring should know the keys. Preparation on client"
msgstr ""
"NitrokeyにはすでにPGPキーがインストールされており、ローカルのGnuPGキーリングがそのキーを知っている必要があります。クライアント側の準備"

#: ../to-be-integrated.rst:393
#: ../to-be-integrated.rst:760
msgid "Make sure ~/.gnupg/gpg.conf contains 'use-agent' Add ssh support to gnupg-agent by adding 'enable-ssh-support' to ~/.gnupg/gpg-agent.conf If the file does not exist yet, you can just create it. Add the following code somewhere into your ~/.bashrc (for fish shell, look here)"
msgstr ""
"~/.gnupg/gpg-agent.conf に 'use-agent' が含まれていることを確認してください。 gnupg-agent に ssh "
"サポートを追加するには、 ~/.gnupg/gpg-agent.conf に 'enable-ssh-support' を追加してください。 "
"このファイルがまだ存在していない場合は、作成すればよいでしょう。以下のコードを ~/.bashrc のどこかに追加してください "
"(フィッシュシェルの場合はここを参照)。"

#: ../to-be-integrated.rst:398
#: ../to-be-integrated.rst:765
msgid "unset SSH_AGENT_PID if [ \"${gnupg_SSH_AUTH_SOCK_by:-0}\" -ne $$ ]; then export SSH_AUTH_SOCK=\"$(gpgconf --list-dirs agent-ssh-socket)\" fi"
msgstr ""
"unset SSH_AGENT_PID if [ \"${gnupg_SSH_AUTH_SOCK_by:-0}\" -ne $$ ]; then "
"export SSH_AUTH_SOCK=\"$(gpgconf --list-dirs agent-ssh-socket)\" fi"

#: ../to-be-integrated.rst:403
#: ../to-be-integrated.rst:770
msgid "Simply restart your system or try pkill gpg-agent and open a new commandline to make sure everything is set In case of problems, please try gpg2 --card-status on first usage to make sure the gpg-agent gets started"
msgstr "システムを再起動するか、gpg-agentをpkillして新しいコマンドラインを開き、すべてが設定されていることを確認してください。"

#: ../to-be-integrated.rst:406
#: ../to-be-integrated.rst:773
msgid "Preparation for the server"
msgstr "サーバーの準備"

#: ../to-be-integrated.rst:408
#: ../to-be-integrated.rst:775
msgid "You can generate an authorized_keys file by running either"
msgstr "authorized_keysファイルを生成するには、次のいずれかを実行します。"

#: ../to-be-integrated.rst:410
#: ../to-be-integrated.rst:777
msgid "gpgkey2ssh keyID >> ~/authorized_keys #(for GnuPG version <= 2.1.11) or gpg2 --export-ssh-key keyID >> ~/authorized_keys #(for newer GnuPG versions)"
msgstr ""
"gpgkey2ssh keyID >> ~/authorized_keys #(GnuPGのバージョン<=2.1.11の場合) or gpg2 "
"--export-ssh-key keyID >> ~/authorized_keys #(GnuPGの新しいバージョンの場合)"

#: ../to-be-integrated.rst:413
#: ../to-be-integrated.rst:780
msgid "where"
msgstr "どこで"

#: ../to-be-integrated.rst:415
#: ../to-be-integrated.rst:782
msgid "keyID"
msgstr "キーID"

#: ../to-be-integrated.rst:417
#: ../to-be-integrated.rst:784
msgid "is the subkey id being used for authentication on your Nitrokey. The Nitrokey must already be known to the local GnuPG keyring. You can now append that file to a remote server's authorized_keys and when you ssh to the server you'll be asked for a pin rather than a passphrase."
msgstr ""
"は、Nitrokeyの認証に使用されるサブキーIDです。NitrokeyはすでにローカルのGnuPGキーリングで知られている必要があります。このファイルを"
"リモートサーバのauthorized_keysに追加すれば、そのサーバにsshするときにパスフレーズではなくピンを要求されるようになります。"

#: ../to-be-integrated.rst:420
#: ../to-be-integrated.rst:787
msgid "Troubleshooting"
msgstr "トラブルシューティング"

#: ../to-be-integrated.rst:422
#: ../to-be-integrated.rst:789
msgid "If you are still asked for a password please make sure that"
msgstr "それでもパスワードを求められる場合は、以下の点を確認してください。"

#: ../to-be-integrated.rst:424
#: ../to-be-integrated.rst:791
msgid "echo $SSH_AUTH_SOCK"
msgstr "echo $SSH_AUTH_SOCK"

#: ../to-be-integrated.rst:426
#: ../to-be-integrated.rst:793
msgid "returns something reasonable like '/run/user/1000/gnupg/S.gpg-agent.ssh' or '/home/username/.gnupg/.S.gpg-agent.ssh'. Unfortunately there were some changes in GnuPG in the past so that the actual content can differ from system and GnuPG version. On some systems there may are even multiple folders in this variable saved. You have to adapt the above given code in .bashrc so that the variable SSH_AUTH_SOCK is correct. In doubt look for 'SSH_AUTH_SOCK' in"
msgstr ""
"は '/run/user/1000/gnupg/S.gpg-agent.ssh' や '/home/username/.gnupg/.S.gpg-"
"agent.ssh' のような妥当なものを返します。残念ながらGnuPGには過去にいくつかの変更があったため、実際の内容はシステムやGnuPGのバージョン"
"によって異なることがあります。システムによっては、この変数に複数のフォルダが保存されている場合もあります。SSH_AUTH_SOCKという変数が正しくなる"
"ように、.bashrcの中で上記のコードを修正しなければなりません。疑わしい場合は、 'SSH_AUTH_SOCK' を探してください。"

#: ../to-be-integrated.rst:428
#: ../to-be-integrated.rst:795
msgid "man gpg-agent"
msgstr "man gpg-agent"

#: ../to-be-integrated.rst:430
#: ../to-be-integrated.rst:797
msgid "to find the actual code for your version/system."
msgstr "をクリックすると、あなたのバージョン/システムに対応した実際のコードを見つけることができます。"

#: ../to-be-integrated.rst:432
#: ../to-be-integrated.rst:799
msgid "You may check if you have a 'pinentry' program installed via your package manager. You may need to set it in the gpg-agent.conf as well. You may need to point gpg-agent to the correct TTY."
msgstr ""
"パッケージマネージャ経由で 'pinentry' プログラムがインストールされているかどうかを確認してください。gpg-agent."
"confでも設定する必要があるかもしれません。gpg-agentに正しいTTYを指定する必要があるかもしれません。"

#: ../to-be-integrated.rst:446
msgid "**Q:** How can I use the Nitrokey for VPN access?"
msgstr "**Q:**NitrokeyをVPNアクセスに使用するにはどうすればよいですか？"

#: ../to-be-integrated.rst:449
#: ../to-be-integrated.rst:820
msgid "For: Nitrokey Pro, Nitrokey Storage, Nitrokey Start, Nitrokey HSM OpenVPN"
msgstr ""
"のためのものです。Nitrokey Pro、Nitrokey Storage、Nitrokey Start、Nitrokey HSM OpenVPN"

#: ../to-be-integrated.rst:452
#: ../to-be-integrated.rst:823
msgid "Generate a key on Nitrokey via pkcs11-tool."
msgstr "pkcs11-toolを使ってNitrokeyで鍵を生成します。"

#: ../to-be-integrated.rst:454
#: ../to-be-integrated.rst:825
msgid "Generate a certificate signing request via openssl + pkcs11 module:"
msgstr "openssl + pkcs11モジュールで証明書署名要求を生成します。"

#: ../to-be-integrated.rst:456
#: ../to-be-integrated.rst:827
msgid "$ openssl req -engine pkcs11 -sha256 -new -key id_3 -keyform engine -out <CSR FILE.CSR> -config <OPENSSL.CNF> -extensions usr_client"
msgstr ""
"$ openssl req -engine pkcs11 -sha256 -new -key id_3 -keyform engine -out "
"<CSR FILE.CSR> -config <OPENSSL.CNF> -extensions usr_client"

#: ../to-be-integrated.rst:458
#: ../to-be-integrated.rst:829
msgid "Sign the certificate with our certificate authority"
msgstr "当社の認証局で証明書に署名する"

#: ../to-be-integrated.rst:460
#: ../to-be-integrated.rst:831
msgid "$ openssl ca -cert <CA.CRT> -keyfile <CA.KEY> -in <FILE.CSR> -out <FILE.CRT> -config <OPENSSL.CNF> -extensions usr_client"
msgstr ""
"$ openssl ca -cert <CA.CRT> -keyfile <CA.KEY> -in <FILE.CSR> -out <FILE.CRT> "
"-config <OPENSSL.CNF> -extensions usr_client"

#: ../to-be-integrated.rst:462
#: ../to-be-integrated.rst:509
#: ../to-be-integrated.rst:833
#: ../to-be-integrated.rst:880
msgid "Import  the certificate into the Nitrokey via pkcs11-tool"
msgstr "pkcs11-toolを使ってNitrokeyに証明書をインポートします。"

#: ../to-be-integrated.rst:464
#: ../to-be-integrated.rst:835
msgid "$ pkcs15-init --update-existing --store-certificate <FILE.PEM> --id 3"
msgstr "$ pkcs15-init --update-existing --store-certificate <FILE.PEM> --id 3"

#: ../to-be-integrated.rst:466
#: ../to-be-integrated.rst:837
msgid "Read the certificate's ID required for openvpn configuration:"
msgstr "openvpnの設定に必要な証明書'のIDを読み取る。"

#: ../to-be-integrated.rst:468
#: ../to-be-integrated.rst:839
msgid "$ openvpn --show-pkcs11-ids /usr/lib64/opensc-pkcs11.so"
msgstr "$ openvpn --show-pkcs11-ids /usr/lib64/opensc-pkcs11.so"

#: ../to-be-integrated.rst:470
#: ../to-be-integrated.rst:841
msgid "Modify your openvpn configuration. Add the certificate ID which you gathered in the previous step: E.g."
msgstr "openvpnの設定を変更します。前のステップで集めた証明書IDを追加します。e.g."

#: ../to-be-integrated.rst:472
#: ../to-be-integrated.rst:843
msgid "$ pkcs11-id 'OpenPGP\\x20project/PKCS\\x2315\\x20emulated/fffe43211234/User\\x20PIN\\x20\\x28OpenPGP\\x20card\\x29/03'"
msgstr ""
"$ pkcs11-id 'OpenPGP\\x20project/PKCS\\x2315\\x20emulated/fffe43211234/"
"User\\x20PIN\\x20\\x28OpenPGP\\x20card\\x29/03'"

#: ../to-be-integrated.rst:474
#: ../to-be-integrated.rst:845
msgid "Add the PKCS#11 driver to the configuration too, e.g.:"
msgstr "PKCS#11ドライバーも設定に追加してください。"

#: ../to-be-integrated.rst:476
#: ../to-be-integrated.rst:847
msgid "$ pkcs11-providers '/usr/lib/x86_64-linux-gnu/pkcs11/opensc-pkcs11.so'"
msgstr "$ pkcs11-providers '/usr/lib/x86_64-linux-gnu/pkcs11/opensc-pkcs11.so'"

#: ../to-be-integrated.rst:478
#: ../to-be-integrated.rst:849
msgid "See this link for further information."
msgstr "詳細はこちらのリンクをご覧ください。"

#: ../to-be-integrated.rst:482
#: ../to-be-integrated.rst:853
msgid "Now all configurations are done. When executing OpenVPN client, Nitrokey's PIN needs to be entered. Unfortunately OpenVPN doesn't prompt to enter the PIN and it has to be entered in the following way:"
msgstr ""
"これですべての設定が完了しました。OpenVPNクライアントを実行する際、Nitrokey'のPINを入力する必要があります。残念ながらOpenVPNはP"
"INの入力を促してくれないので、以下の方法で入力する必要があります。"

#: ../to-be-integrated.rst:484
#: ../to-be-integrated.rst:855
msgid "$ telnet 8888 password 'User PIN (OpenPGP card) token' <PIN>"
msgstr "$ telnet 8888 password 'ユーザーPIN（OpenPGPカード） token' <PIN>"

#: ../to-be-integrated.rst:486
#: ../to-be-integrated.rst:857
msgid "Alternatively you could recompile OpenVPN client with systemd support disabled and it will prompt you for the PIN as expected. Alternatively to the OpenVPN client you could use the Viscosity client which provides a better user experience especially for entering the PIN."
msgstr ""
"あるいは、systemdサポートを無効にしてOpenVPNクライアントを再コンパイルすると、予想通りPINの入力を求められます。OpenVPNクライアント"
"の代わりにViscosityクライアントを使用すると、特にPINを入力する際のユーザーエクスペリエンスが向上します。"

#: ../to-be-integrated.rst:489
#: ../to-be-integrated.rst:860
msgid "IPsec"
msgstr "IPsec"

#: ../to-be-integrated.rst:491
#: ../to-be-integrated.rst:862
msgid "Strong Swan works using the PKCS#11 driver. Basically follow these steps:"
msgstr "Strong Swanは、PKCS#11ドライバーを使用して動作します。基本的には以下の手順で行います。"

#: ../to-be-integrated.rst:493
#: ../to-be-integrated.rst:864
msgid "Generate a key on Nitrokey via pkcs11-tool. In this example it's a 4096 bit RSA key."
msgstr "pkcs11-toolを使ってNitrokeyで鍵を生成します。この例では4096ビットのRSA鍵です。"

#: ../to-be-integrated.rst:495
#: ../to-be-integrated.rst:866
msgid "$ pkcs11-tool --module /usr/lib/x86_64-linux-gnu/pkcs11/opensc-pkcs11.so -l -k --key-type rsa:4096 --id 10 --label 'Staging Access'"
msgstr ""
"$ pkcs11-tool --module /usr/lib/x86_64-linux-gnu/pkcs11/opensc-pkcs11.so -l -"
"k --key-type rsa:4096 --id 10 --label 'Staging Access'"

#: ../to-be-integrated.rst:497
#: ../to-be-integrated.rst:868
msgid "Generate a certificate signing request via openssl + pkcs11 module"
msgstr "openssl + pkcs11モジュールによる証明書署名要求の生成"

#: ../to-be-integrated.rst:499
#: ../to-be-integrated.rst:870
msgid "$ openssl OpenSSL> engine dynamic -pre SO_PATH:/usr/lib/x86_64-linux-gnu/engines-1.1/pkcs11.so -pre ID:pkcs11 -pre LIST_ADD:1 -pre LOAD -pre MODULE_PATH:/usr/lib/x86_64-linux-gnu/pkcs11/opensc-pkcs11.so OpenSSL> req -engine pkcs11 -sha256 -new -key id_10 -keyform engine -out user@email.com-staging-cert.csr -subj '/C=GB/L=Cambridge/O=Organization/OU=Staging Access/CN=user@email.com/emailAddress=user@email.com'"
msgstr ""
"$ openssl OpenSSL> engine dynamic -pre SO_PATH:/usr/lib/x86_64-linux-gnu/"
"engines-1.1/pkcs11.so -pre ID:pkcs11 -pre LIST_ADD:1 -pre LOAD -pre "
"MODULE_PATH:/usr/lib/x86_64-linux-gnu/pkcs11/opensc-pkcs11.so OpenSSL> req -"
"engine pkcs11 -sha256 -new -key id_10 -keyform engine -out user@email.com-"
"staging-cert.csr -subj '/C=GB/L=Cambridge/O=Organization/OU=Staging Access/"
"CN=user@email.com/emailAddress=user@email.com'"

#: ../to-be-integrated.rst:503
#: ../to-be-integrated.rst:874
msgid "Sign the certificate with your certificate authority"
msgstr "認証局で証明書に署名する"

#: ../to-be-integrated.rst:505
#: ../to-be-integrated.rst:876
msgid "Convert the certificate to DER"
msgstr "証明書をDERに変換する"

#: ../to-be-integrated.rst:507
#: ../to-be-integrated.rst:878
msgid "$ openssl x509 -in user@email.com-staging-cert.csr -out user@email.com-staging-cert.der -outform DER"
msgstr ""
"$ openssl x509 -in user@email.com-staging-cert.csr -out user@email.com-"
"staging-cert.der -outform DER"

#: ../to-be-integrated.rst:511
#: ../to-be-integrated.rst:882
msgid "$ pkcs11-tool --module /usr/lib/x86_64-linux-gnu/pkcs11/opensc-pkcs11.so -l -y cert -w user@email.com-staging-cert.der --id 10 --label 'Staging Access'"
msgstr ""
"$ pkcs11-tool --module /usr/lib/x86_64-linux-gnu/pkcs11/opensc-pkcs11.so -l -"
"y cert -w user@email.com-staging-cert.der --id 10 --label 'Staging Access'"

#: ../to-be-integrated.rst:513
#: ../to-be-integrated.rst:884
msgid "Configure Strongswan to load opensc-pkcs11 module then to load the certificate on Nitrokey. Edit /etc/strongswan.d/charon/pkcs11.conf and add the following module:"
msgstr ""
"Strongswanにopensc-pkcs11モジュールを読み込ませ、Nitrokeyに証明書を読み込ませるように設定する。etc/strongswan"
".d/charon/pkcs11.confを編集し、以下のモジュールを追加します。"

#: ../to-be-integrated.rst:517
#: ../to-be-integrated.rst:888
msgid "modules {"
msgstr "モジュール {"

#: ../to-be-integrated.rst:516
#: ../to-be-integrated.rst:887
msgid "Nitrokey {"
msgstr "Nitrokey {"

#: ../to-be-integrated.rst:517
#: ../to-be-integrated.rst:888
msgid "path = /usr/lib/x86_64-linux-gnu/pkcs11/opensc-pkcs11.so"
msgstr "パス = /usr/lib/x86_64-linux-gnu/pkcs11/opensc-pkcs11.so"

#: ../to-be-integrated.rst:518
#: ../to-be-integrated.rst:519
#: ../to-be-integrated.rst:889
#: ../to-be-integrated.rst:890
msgid "}"
msgstr "}"

#: ../to-be-integrated.rst:521
#: ../to-be-integrated.rst:892
msgid "Initiate the VPN connection via IPSec/Strongswan, then prompt for Nitrokey PIN"
msgstr "IPSec/StrongswanによるVPN接続を開始し、Nitrokey PINの入力を求める。"

#: ../to-be-integrated.rst:523
#: ../to-be-integrated.rst:894
msgid "8. VPN is now connected Stunnel"
msgstr "8.VPNが接続されました Stunnel"

#: ../to-be-integrated.rst:526
#: ../to-be-integrated.rst:897
msgid "Stunnel works as an SSL encryption wrapper between remote client and local (inetd-startable) or remote server. It can be used to add SSL functionality to commonly used inetd daemons like POP2, POP3, and IMAP servers without any changes in the programs' code."
msgstr ""
"Stunnel は、リモートクライアントとローカル (inetd-startable) またはリモートサーバー間の SSL "
"暗号化ラッパーとして動作します。POP2, POP3, IMAP サーバーのような一般的に使用されている inetd デーモンに、プログラム' "
"コードを変更することなく SSL 機能を追加するのに使用できます。"

#: ../to-be-integrated.rst:528
#: ../to-be-integrated.rst:899
msgid "Stunnel is able to load OpenSC PKCS#11 engine using this configuration:"
msgstr "この設定でStunnelはOpenSC PKCS#11エンジンをロードすることができます。"

#: ../to-be-integrated.rst:530
#: ../to-be-integrated.rst:901
msgid "engine=dynamic engineCtrl=SO_PATH:/usr/lib/opensc/engine_pkcs11.so engineCtrl=ID:pkcs11 engineCtrl=LIST_ADD:1 engineCtrl=LOAD engineCtrl=MODULE_PATH:/usr/lib/pkcs11/opensc-pkcs11.so engineCtrl=INIT"
msgstr ""
"engine=dynamic engineCtrl=SO_PATH:/usr/lib/opensc/engine_pkcs11.so "
"engineCtrl=ID:pkcs11 engineCtrl=LIST_ADD:1 engineCtrl=LOAD "
"engineCtrl=MODULE_PATH:/usr/lib/pkcs11/opensc-pkcs11.so engineCtrl=INIT"

#: ../to-be-integrated.rst:538
#: ../to-be-integrated.rst:909
msgid "[service] engineNum=1 key=id_45"
msgstr "[service] engineNum=1 key=id_45"

#: ../to-be-integrated.rst:556
msgid "**Q:** How can I do PKI / Certificate Authority (CA)?"
msgstr "**Q:** PKI/認証局(CA)はどのように行えばよいのでしょうか？"

#: ../to-be-integrated.rst:558
msgid "CA keys are very sensitive and must not be compromised or lost. GnuPG"
msgstr "CAキーは非常に機密性が高く、漏洩したり紛失したりしてはいけません。GnuPG"

#: ../to-be-integrated.rst:561
msgid "Instructions OpenSSL"
msgstr "操作説明書 OpenSSL"

#: ../to-be-integrated.rst:564
msgid "Install OpenSC'S engine_pkcs11 Run the command \"pkcs11-tool --list-slots\" to list the available slots. Run the command \"openssl> req -engine pkcs11 -new -key slot_X-id_XXXX -keyform engine -x509 -out cert.pem -text\" where X is the appropriate slot number and XXXX is the slot ID, e.g. \"... -key slot_5-id_c6f280080fb0ed1ebff0480a01d00a98a1b3b89a ...\" Test"
msgstr ""
"OpenSC'S engine_pkcs11のインストール コマンド \"pkcs11-tool --list-slots\"を実行して"
"、利用可能なスロットをリストアップします。コマンド \"openssl> req -engine pkcs11 -new -key slot_X-"
"id_XXXX -keyform engine -x509 -out cert.pem -text\" "
"ここで、Xは適切なスロット番号、XXXXはスロットIDです。-キー slot_5-"
"id_c6f280080fb0ed1ebff0480a01d00a98a1b3b89a ...\" テスト"

#: ../to-be-integrated.rst:569
msgid "Other"
msgstr "その他"

#: ../to-be-integrated.rst:571
msgid "Please see this PDF (p. 30) from heinlein-support.de for summarized instructions in German."
msgstr "ドイツ語での説明は、heinlein-support.deのPDF(p.30)をご覧ください。"

#: ../to-be-integrated.rst:573
msgid "µ-CA-tool is a script based on GnuPG, OpenSC and OpenSSL which helps to perform basic tasks of a CA. It works with Nitrokey Pro and Nitrokey Storage."
msgstr ""
"μ-CA-toolは、GnuPG、OpenSC、OpenSSLをベースにしたスクリプトで、CAの基本的なタスクを実行するのに役立ちます。Nitrokey "
"ProおよびNitrokey Storageで動作します。"

#: ../to-be-integrated.rst:581
msgid "**Q:** How can I use the password manager?"
msgstr "**Q:** パスワードマネージャーの使い方を教えてください。"

#: ../to-be-integrated.rst:583
msgid "You have the following options:"
msgstr "以下のオプションがあります。"

#: ../to-be-integrated.rst:585
msgid "Use Nitrokey's built-in Password Safe to store passwords securely. For this you need the Nitrokey App. Maximum are 16 passwords. Use Pass (simple commandline password manager for Unix systems, mainly for experts). Use KeePass as described below."
msgstr ""
"Nitrokey'の内蔵パスワードセーフを使って、パスワードを安全に保管しましょう。このためには、Nitrokeyアプリが必要です。最大で16個のパスワー"
"ドを保存できます。Pass（Unixシステム用のシンプルなコマンドラインパスワードマネージャ、主にエキスパート向け）を使う。KeePassは以下の通りです"
"。"

#: ../to-be-integrated.rst:589
msgid "Protecting KeePass with Nitrokey's One-Time Passwords"
msgstr "NitrokeyでKeePassを保護する'ワンタイムパスワード"

#: ../to-be-integrated.rst:591
msgid "You can also follow this video (It contains a mistake around time 4:22 which is described later below). Keepass Installation"
msgstr "また、このビデオを参考にすることもできます（4:22付近に誤りがあります。）Keepassのインストール"

#: ../to-be-integrated.rst:594
msgid "Install Keepass 2.3.5. For Ubuntu: Because the main repository contains the older 2.3.4, you have to use some other source like this private PPA (please run these commands in terminal):"
msgstr ""
"Keepass 2.3.5をインストールします。Ubuntuの場合。メインリポジトリには古い2.3."
"4が含まれていますので、このプライベートPPAのような他のソースを使用する必要があります（ターミナルでこれらのコマンドを実行してください）。"

#: ../to-be-integrated.rst:597
msgid "sudo add-apt-repository ppa:jtaylor/keepass sudo apt-get update sudo apt-get install keepass2"
msgstr ""
"sudo add-apt-repository ppa:jtaylor/keepass sudo apt-get update sudo apt-get "
"install keepass2"

#: ../to-be-integrated.rst:601
msgid "Install the OtpKeyProv plugin by downloading the archive, unzipping and copying the content to Keypass' Plugin directory. On Linux: sudo cp OtpKeyProv.plgx /usr/lib/keepass2/Plugins/ For Linux, optional: Install mono-complete package if plugin is not detected when running Keepass2 (you can check that in Tools/Plugins):"
msgstr ""
"アーカイブをダウンロードし、解凍して、内容をKeypass' "
"Pluginディレクトリにコピーして、OtpKeyProvプラグインをインストールしてください。Linuxの場合： sudo cp "
"OtpKeyProv.plgx /usr/lib/keepass2/Plugins/ "
"Linuxの場合、オプション：Keepass2の実行時にプラグインが検出されない場合、mono-"
"completeパッケージをインストールしてください（ツール/プラグインで確認できます）。"

#: ../to-be-integrated.rst:605
msgid "sudo apt-get install mono-complete"
msgstr "sudo apt-get install mono-complete"

#: ../to-be-integrated.rst:607
msgid "Keepass OTP Configuration Existing Database"
msgstr "Keepass OTP構成 既存のデータベース"

#: ../to-be-integrated.rst:610
msgid "Do a backup of your database and keep it until you are really sure everything works fine! Make sure you really did a backup. If you mess up, your passwords are lost! Open database as usual Select File/Change Master Key..."
msgstr ""
"データベースのバックアップを取り、すべてが正常に動作することを確認するまで保管してください。本当にバックアップを取ったかどうか確認してください。もし失敗し"
"たら、パスワードは失われてしまいます。通常通りデータベースを開きます。 ファイル/マスターキーの変更...を選択します。"

#: ../to-be-integrated.rst:615
msgid "New Database"
msgstr "新しいデータベース"

#: ../to-be-integrated.rst:617
msgid "Create new database as usual"
msgstr "通常通り、新しいデータベースを作成します。"

#: ../to-be-integrated.rst:619
msgid "Common"
msgstr "共通"

#: ../to-be-integrated.rst:621
msgid "Insert Master Password (optional) Set Key file / provider: to One-Time Passwords (OATH HOTP) Click OK With Nitrokey App: select HOTP slot and generate HOTP secret (it will be copied to clipboard automatically). Note: You may want write down this secret and store it anywhere secure. Otherwise if you lose your Nitrokey or it gets broken your password database is lost as well!!! Paste the secret to Keepass OTP Plugin window Make sure the Counter field and digits count are set the same in both windows. Click OK in Nitrokey App to save the slot. Select secret type: Base32 Set the other settings as you like. Please consult plugin's manual (should be in same downloaded archive). I would recommend to set look-ahead value to non-zero to prevent locking up the database after accidental code request from used HOTP slot. In that case counters on the device and in Keepass would be out of sync and OTP codes will not be the same with expected."
msgstr ""
"マスターパスワードを挿入する（オプション） キーファイル/プロバイダをワンタイムパスワードに設定する（OATH HOTP） OKをクリック Nitroke"
"yアプリでHOTPスロットを選択し、HOTPシークレットを生成する（自動的にクリップボードにコピーされます）。注意：この秘密をメモして安全な場所に保管して"
"おくとよいでしょう。そうしないと、Nitrokeyを紛失したり、壊れたりした場合、パスワードデータベースも失われてしまいます。秘密をKeepass "
"OTPプラグインのウィンドウに貼り付けます。 両方のウィンドウで、カウンターフィールドと桁数が同じに設定されていることを確認してください。Nitrokey"
"アプリで「OK」をクリックして、スロットを保存します。秘密のタイプを選択します。Base32 その他の設定はお好きなようにしてください。プラグインのマニュ"
"アルを参照してください（ダウンロードしたアーカイブに含まれているはずです）。使用したHOTPスロットから誤ってコードを要求してデータベースがロックされるの"
"を防ぐために、ルックアヘッド値を0以外に設定することをお勧めします。その場合、デバイス上のカウンターとKeepassのカウンターは同期しておらず、OTPコ"
"ードは期待通りのものではありません。"

#: ../to-be-integrated.rst:630
msgid "Unlocking Database"
msgstr "データベースのロック解除"

#: ../to-be-integrated.rst:632
msgid "Open database Insert Master Password (if set) Key file / provider: to One-Time Passwords (OATH HOTP) Press OK Insert HOTP codes by repeatedly choosing proper HOTP slot from the Nitrokey App and pasting the clipboard content to proper field (the order of the codes is important). Press OK"
msgstr ""
"データベースを開く マスターパスワードを挿入する（設定されている場合） キーファイル／プロバイダー：ワンタイムパスワード（OATH HOTP）へ "
"OKを押す Nitrokeyアプリから適切なHOTPスロットを繰り返し選択し、クリップボードの内容を適切なフィールドに貼り付けることで、HOTPコードを挿"
"入します（コードの順番は重要です）。OKを押す"

#: ../to-be-integrated.rst:639
msgid "Issues"
msgstr "課題"

#: ../to-be-integrated.rst:641
msgid "Due to nature of HOTP solution it is possible to get counters desynchronized (by selecting wrong OTP slot during day-to-day use). Using look-ahead plugin's setting should prevent that (value 10 or so should suffice - depends on desired security requirements - this would allow to 10 accidental requests). TOTP is not having that problem. Setting the OTP protection could be error-prone. There is no secret validation on OtpKeyProv side. In the test movie at 4:22 I have managed to set the Base32 coded secret as Hex (which was not a proper hex value) and it has not complained about it. There is no information what happened to database and how it is now configured. I have not noticed until I have watched the movie."
msgstr ""
"HOTPソリューションの性質上、カウンターが非同期になる可能性があります（日常的な使用中に間違ったOTPスロットを選択することにより）。Look-ahea"
"dプラグインの設定を使用することで、そのような事態を防ぐことができます(10程度の値で十分です。希望するセキュリティ要件にもよりますが、これにより10回の"
"偶発的なリクエストが可能になります)。TOTPではこの問題はありません。OTPプロテクションの設定はエラーになりやすい。OtpKeyProv側での秘密の検"
"証はありません。4:22のテストムービーでは、Base32でコード化されたシークレットをHexに設定していますが（これは適切な16進数ではありませんでした"
"）、それについての不満はありませんでした。データベースに何が起こったのか、現在どのように設定されているのかの情報はありません。このムービーを見るまで気がつ"
"きませんでした。"

#: ../to-be-integrated.rst:644
msgid "Tested under Ubuntu 16.10, Nitrokey App v0.6.3 and Nitrokey Storage v0.45."
msgstr "Ubuntu 16.10、Nitrokey App v0.6.3、Nitrokey Storage v0.45でテストしました。"

#: ../to-be-integrated.rst:653
msgid "**Q:** How can I use the True Random Number Generator?"
msgstr "**Q:** 「True Random Number Generator」の使い方を教えてください。"

#: ../to-be-integrated.rst:655
msgid "Both devices are compatible to the OpenPGP Card, so that scdrand should work. This script may be useful. The TRNG provides about 40 kbit/s."
msgstr ""
"どちらのデバイスもOpenPGP Cardに対応していますので、scdrandは動作するはずです。このスクリプトが役に立つかもしれません。TRNGは約"
"40kbit/sを提供しています。"

#: ../to-be-integrated.rst:657
msgid "The user comio created a systemd file to use scdrand and thus the TRNG more generally. He created a ebuild for Gentoo, too."
msgstr ""
"ユーザーのcomio氏は、scdrandやTRNGをより一般的に使用するためのsystemdファイルを作成しました。彼はGentoo用のebuildも作成"
"しました。"

#: ../to-be-integrated.rst:663
msgid "**Q:** Do you have resources for development and integration?"
msgstr "**Q:**開発や統合のためのリソースはありますか？"

#: ../to-be-integrated.rst:666
msgid "Use Nitrokey library to manage the one-time passwords and password safe functionality. The project nitrokey-get-totp and nitrokey-get-password are nice examples for using the python bindings of Nitrokey library to get a custom interface. In order to access the integrated smart card, you can use OpenSC's command line tools. If your application has a PKCS#11 interface, use OpenSC's PKCS#11 driver. To work with the smart card low level, see the OpenPGP Card specification. The source code of the firmware and the hardware layout are available too. To develop special applications or for command line access one can use the nitrocli created by d-e-s-o. Gkey is a go-based command line tool to access the Password Safe and OTP entries. A libnitrokey wrapper for Rust providing access to Nitrokey devices."
msgstr ""
"ワンタイムパスワードやパスワードセーフ機能を管理するために、Nitrokeyライブラリを使用します。プロジェクト nitrokey-get-totp と "
"nitrokey-get-password は、Nitrokey ライブラリの python バインディングを使用してカスタムインターフェースを得るための"
"良い例です。統合されたスマートカードにアクセスするには、OpenSC'のコマンドラインツールを使うことができます。アプリケーションが PKCS#11 "
"インタフェースを持っている場合は、OpenSC's PKCS#11 ドライバを使用します。スマートカードを低レベルで操作するには、OpenPGP "
"Card 仕様を参照してください。ファームウェアのソースコードやハードウェアのレイアウトも公開されています。特別なアプリケーションを開発したり、コマンドラ"
"インにアクセスするには、d-e-oが作成したnitrocliを使用することができます。Gkey は、パスワードセーフと OTP "
"エントリにアクセスするための go ベースのコマン ドラインツールです。Nitrokey デバイスへのアクセスを提供する Rust 用の "
"libnitrokey ラッパーです。"

#: ../to-be-integrated.rst:677
msgid "# HSM 2"
msgstr "# HSM 2"

#: ../to-be-integrated.rst:679
msgid "**Nitrokey HSM:** 124 dataobjects (DF, EF) can be created. Each EF can have a size of up to 256 byte. The total storage capacity of ca. 32 KByte is shared dynamically among keys and data objects."
msgstr ""
"**ニトロキーHSM:**124個のデータオブジェクト(DF, "
"EF)を作成できます。各EFのサイズは最大256バイトまでです。合計約32KByteの記憶容量は、キーとデータオブジェクトで動的に共有されます。"

#: ../to-be-integrated.rst:683
msgid "**Q:** How to use the HSM for Login For: Nitrokey HSM"
msgstr "**Q:** ログイン用のHSMの使い方について For:Nitrokey HSM"

#: ../to-be-integrated.rst:686
msgid "Select your use case:"
msgstr "ユースケースを選択してください。"

#: ../to-be-integrated.rst:688
msgid "Login With Nitrokey HSM on Stand Alone Windows Computers Login With Nitrokey HSM on Windows Domain Computers Using MS Active Directory For Unix environments an integration with PAM and OpenSSH is available."
msgstr ""
"スタンドアロンのWindowsコンピュータでNitrokey HSMを使ってログインする MS Active "
"Directoryを使ったWindowsドメインコンピュータでNitrokey HSMを使ってログインする "
"Unix環境では、PAMやOpenSSHとの連携が可能です。"

#: ../to-be-integrated.rst:692
msgid "**Q:**  How to use the HSM for Email Encryption"
msgstr "**Q:** メールの暗号化にHSMを使用する方法について"

#: ../to-be-integrated.rst:694
msgid "Encrypt your email using the S/MIME industry standard available in all major e-mail clients."
msgstr "主要なメールクライアントに搭載されている業界標準のS/MIMEを使用して、メールを暗号化します。"

#: ../to-be-integrated.rst:696
msgid "The Nitrokey HSM has been tested to work with Mozilla Thunderbird and Microsoft Outlook. Other email clients with support for PKCS#11 or Microsoft CSP should work as well."
msgstr ""
"Nitrokey HSMは、Mozilla ThunderbirdおよびMicrosoft Outlookでの動作が確認されています。PKCS#"
"11またはMicrosoft CSPに対応したその他の電子メールクライアントでも動作するはずです。"

#: ../to-be-integrated.rst:698
msgid "Note: A certificate can be purchased cheaply from CERTUM."
msgstr "注：証明書はCERTUMから安価に購入できます。"

#: ../to-be-integrated.rst:700
msgid "**Q:**   How to use the Nitrokey for Hard Disk Encryption with VeraCrpt?"
msgstr "**Q:** VeraCrptでNitrokey for Hard Disk Encryptionを使用するにはどうすればよいですか？"

#: ../to-be-integrated.rst:702
msgid "VeraCrypt is a free and Open Source disk encryption software for Windows, macOS, and GNU/Linux. It is the successor of TrueCrypt and thus recommended, although the following instructions should apply to TrueCrypt as well. Follow these steps to use the program with Nitrokey:"
msgstr ""
"VeraCryptは、Windows、macOS、GNU/Linuxに対応したフリーでオープンソースのディスク暗号化ソフトウェアです。VeraCryptは"
"TrueCryptの後継製品であり、推奨されていますが、以下の説明はTrueCryptにも当てはまります。このプログラムをNitrokeyで使用するには、"
"以下の手順に従ってください。"

#: ../to-be-integrated.rst:711
msgid "Security Consideration: Please note that VeraCrypt doesn't make use of the full security which Nitrokey (and smart cards in general) offer. Instead it stores a keyfile on the Nitrokey which theoretically could be stolen by a computer virus after the user enters the password."
msgstr ""
"セキュリティへの配慮。VeraCryptは、Nitrokey(および一般的なスマートカード)が提供する完全なセキュリティを利用していないことに注意してくだ"
"さい。VeraCryptは、Nitrokey(および一般的なスマートカード)が提供する完全なセキュリティを利用せず、Nitrokeyにキーファイルを保存し"
"ます。"

#: ../to-be-integrated.rst:713
msgid "Note: Aloaha Crypt is based on TrueCrypt/VeraCrypt but without the described security limitation. (Not tested with Nitrokey HSM!)"
msgstr ""
"注：Aloaha CryptはTrueCrypt/VeraCryptをベースにしていますが、記載されているセキュリティ制限はありません。("
"Nitrokey HSMではテストしていません)"

#: ../to-be-integrated.rst:716
msgid "**Q:** How to sign and encrypt files and pdfs?"
msgstr "**Q:** ファイルやPDFに署名したり、暗号化したりするにはどうしたらいいですか？"

#: ../to-be-integrated.rst:718
msgid "GnuPG"
msgstr "GnuPG"

#: ../to-be-integrated.rst:720
msgid "Starting with version 2.1, GnuPG has build-in but limited support for the Nitrokey HSM. Use the gpgsm tool to sign, verify, encrypt and decrypt files or S/MIME messaging using your Nitrokey HSM. Use a signature key on a Nitrokey HSM to sign documents using Acrobat Reader, Open Office / Libre Office or any other PDF reader supporting electronic signatures. ECC HSM Encryptor"
msgstr ""
"バージョン 2.1 以降、GnuPG は Nitrokey HSM を限定的ながらもサポートしています。gpgsmツールを使えば、Nitrokey "
"HSMを使って、ファイルやS/MIMEメッセージの署名・検証・暗号化・復号化ができます。Nitrokey HSMの署名鍵を使って、Acrobat "
"Reader、Open Office / Libre Office、その他の電子署名をサポートするPDFリーダーを使って文書に署名する。ECC "
"HSMエンクリプタ"

#: ../to-be-integrated.rst:723
msgid "ECC HSM Encryptor is a small application to encrypt and decrypt files with a Nitrokey HSM."
msgstr "ECC HSM Encryptorは、Nitrokey HSMでファイルを暗号化・復号化する小さなアプリケーションです。"

#: ../to-be-integrated.rst:725
msgid "**Q:** How to do certificat-based Web login Protect access to sensitive information on your website with 2nd factor authentication."
msgstr "**Q:** 証明書ベースのWebログインを行う方法 2要素認証により、Webサイト上の機密情報へのアクセスを保護することができます。"

#: ../to-be-integrated.rst:728
msgid "Use a Nitrokey HSM as authentication token via the build-in device authentication PKI or use keys and certificates on a Nitrokey HSM for TLS/SSL client authentication."
msgstr ""
"Nitrokey HSMを内蔵のデバイス認証PKIを介して認証トークンとして使用したり、Nitrokey HSM上の鍵や証明書をTLS/"
"SSLクライアント認証に使用したりすることができます。"

#: ../to-be-integrated.rst:730
msgid "**Q:** SSH for Server Administration with windows For: Nitrokey Pro, Nitrokey Storage, Nitrokey Start, Nitrokey HSM"
msgstr ""
"**Q:** SSH for Server Administration with windows For:Nitrokey Pro、Nitrokey "
"Storage、Nitrokey Start、Nitrokey HSM"

#: ../to-be-integrated.rst:733
msgid "The Nitrokey should already have PGP keys installed and the local GnuPG keyring should be aware of the keys, that is to say GPG4Win should be installed on the system (only the core application GnuPG is needed). Furthermore you should install PuTTY. Preparation on client"
msgstr ""
"NitrokeyにはすでにPGP鍵がインストールされており、ローカルのGnuPGキーリングがその鍵を認識している必要があります。つまり、GPG4Winがシ"
"ステムにインストールされている必要があります（コアアプリケーションのGnuPGのみが必要です）。さらに、PuTTYをインストールしてください。クライアント"
"側の準備"

#: ../to-be-integrated.rst:755
msgid "**Q:** SSH Server administration on linux"
msgstr "**Q:** LinuxでのSSHサーバ管理"

#: ../to-be-integrated.rst:802
msgid "**Q:** DNSSEC"
msgstr "**Q:** DNSSEC"

#: ../to-be-integrated.rst:805
msgid "For: Nitrokey HSM"
msgstr "のために。ニトロキーHSM"

#: ../to-be-integrated.rst:807
msgid "Protect your domain name resolution using DNSSEC and a Nitrokey HSM as secure key store. It's based on Smartcard-HSM which is why the following resource apply:"
msgstr ""
"DNSSECとNitrokey HSMをセキュアなキーストアとして使用し、ドメイン名解決を保護します。これはSmartcard-"
"HSMをベースにしているため、以下のリソースが適用されます。"

#: ../to-be-integrated.rst:809
msgid "Signing NSD DNSSEC Zones with Nitrokey HSM by Vadim Penzin. Integration with OpenDNSSEC has been successfully tested in a demo by Richard Lamb. Luis D Espinoza Sanchez & Eberhard W Lisse held a session on using the SmartCard-HSM for DNSSEC at the 2015 ICAAN Meeting in Singapore. Jan-Piet Mens wrote a nice article about integrating the SmartCard-HSM with PowerDNS."
msgstr ""
"Nitrokey HSMによるNSD DNSSECゾーンの署名（Vadim Penzin）。OpenDNSSECとの統合は、Richard "
"Lamb氏のデモで成功している。Luis D Espinoza Sanchez & Eberhard W Lisseは、シンガポールで開催された2015 "
"ICAAN Meetingで、SmartCard-HSMをDNSSECに使用するセッションを開催しました。Jan-Piet Mensは"
"、SmartCard-HSMとPowerDNSの統合についての記事を書きました。"

#: ../to-be-integrated.rst:815
msgid "**Q:** Physical Access Control With it's unique build-in device authentication PKI, a Nitrokey HSM has a cryptographically protected unique identity that can be verified in a fast authentication protocol. An access control terminal can verify authenticity and identity of the device, create a secure communication channel and perform offline PIN verification. The coolPACS project has all the details."
msgstr ""
"**Q:** 物理的アクセスコントロール Nitrokey HSMは、独自のデバイス認証PKIを内蔵しており、暗号で保護された固有のアイデンティティを持ち"
"、高速な認証プロトコルで検証することができます。アクセスコントロール端末は、デバイスの真正性とアイデンティティを確認し、安全な通信チャネルを作成し、オフラ"
"インでPIN認証を行うことができます。詳細はcoolPACSプロジェクトをご覧ください。"

#: ../to-be-integrated.rst:818
#: ../to-be-integrated.rst:914
msgid "**Q:**"
msgstr "**Q:**"

#: ../to-be-integrated.rst:916
msgid "PKI / Certificate Authority (CA)"
msgstr "PKI/認証局(CA)"

#: ../to-be-integrated.rst:918
msgid "**Q:** Secret Management and Cloud Infrastructure"
msgstr "**Q:**シークレットマネジメントとクラウドインフラ"

#: ../to-be-integrated.rst:920
msgid "An approach to secure keys for Hashicorp Vault/Bank-Vault on a Nitrokey HSM can be found at banzaicloud.com."
msgstr ""
"Nitrokey HSMでHashicorp Vault/Bank-Vaultの鍵を確保する方法はbanzaicloud.comに掲載されています。"

#: ../to-be-integrated.rst:922
msgid "**Q:** How to do N-of-m Schemes"
msgstr "**Q:** N-of-m スキームを行うには？"

#: ../to-be-integrated.rst:924
msgid "The Nitrokey HSM 2 supports two different n-of-m schemes - one for secure sharing of key material/passwords and one for public key authentication to control the access to the device. Please see this blog post for more detailed information. N-of-m for DKEK Shares"
msgstr ""
"Nitrokey HSM 2は、鍵物質/パスワードを安全に共有するためのn-of-mスキームと"
"、デバイスへのアクセスを制御するための公開鍵認証の2つの異なるn-of-mスキームをサポートしています。より詳しい情報はこちらのブログ記事をご覧ください"
"。DKEK株のN-of-m"

#: ../to-be-integrated.rst:927
msgid "This feature can be used with OpenSC as described here. The general approach is seen in the videos below (external links)."
msgstr ""
"この機能は、ここで説明されているように、OpenSCで使用することができます。一般的なアプローチは以下のビデオ（外部リンク）でご覧いただけます。"

#: ../to-be-integrated.rst:929
msgid "Nitrokey HSM's Secure Key Backup and Restore:"
msgstr "Nitrokey HSM'の安全な鍵のバックアップとリストア。"

#: ../to-be-integrated.rst:931
msgid "Screencast"
msgstr "スクリーンキャスト"

#: ../to-be-integrated.rst:933
msgid "Nitrokey HSM's M-of-N Threshold Scheme:"
msgstr "Nitrokey HSM'のM-of-Nスレッショルドスキーム。"

#: ../to-be-integrated.rst:935
msgid "screencast N-of-m for public key authentication"
msgstr "スクリーンキャスト 公開鍵認証のN-of-m"

#: ../to-be-integrated.rst:938
msgid "So far n-of-m authentication is only supported in OpenSCDP. The blog post gives an overview and a how-to here (CDN access required) is shown the process step by step in the Smart Card Shell. For OpenSC there is a ticket to get that integrated."
msgstr ""
"今のところ、n-of-m認証はOpenSCDPでのみサポートされています。ブログポストでは概要を、ハウツー（CDNアクセスが必要）ではSmart "
"Card Shellでのプロセスを順を追って紹介しています。OpenSCでは、これを統合するためのチケットが用意されています。"

#: ../to-be-integrated.rst:940
msgid "n-of-m authentication is also supported in the PKI-as-a-Service Portal for locally and remote connected HSMs. The PKI-as-a-Service Portal is based on OpenSCDP."
msgstr ""
"また、PKI-as-a-Service Portal では、ローカルおよびリモートで接続された HSM に対して、n-of-m 認証がサポートされています"
"。PKI-as-a-Service Portalは、OpenSCDPをベースにしています。"

#: ../to-be-integrated.rst:942
msgid "**Q:** How to safe Cryptocurrences in the Nitrokey HSM"
msgstr "**Q:** Nitrokey HSMでの暗号の安全性について"

#: ../to-be-integrated.rst:945
msgid "J.v.d.Bosch wrote a simple, free python program to secure the private key of a Bitcoin wallet in a HSM. See here for further information. Using the HSM in an Ethereum PoA Chain. Tezos has been reported to work with Nitrokey HSM."
msgstr ""
"J.v.d.Boschは、HSMでBitcoinウォレットの秘密鍵を保護するためのシンプルでフリーなPythonプログラムを書きました。詳しくはこちらをご"
"覧ください。イーサリアムのPoAチェーンでのHSMの使用。TezosはNitrokey HSMで動作することが報告されています。"

#: ../to-be-integrated.rst:949
msgid "**Q:** How to use the True Random Number Generator? Nitrokey HSM can be used with Botan and TokenTools by using OpenSC as a PKCS#11 driver."
msgstr ""
"**Q:** 真性乱数発生器の使い方を教えてください。Nitrokey "
"HSMは、PKCS#11ドライバーとしてOpenSCを使用することで、BotanやTokenToolsで使用することができます。"

#: ../to-be-integrated.rst:952
msgid "OpenSSL can't use Nitrokey HSM's RNG directly because engine-pkcs11 doesn't contain a mapping for OpenSSL to C_GenerateRandom."
msgstr ""
"engine-pkcs11にはOpenSSLからC_GenerateRandomへのマッピングがないため、OpenSSLはNitrokey "
"HSMのRNGを直接使用することができません。"

#: ../to-be-integrated.rst:954
msgid "**Q:** What can I use for development and integration?"
msgstr "**Q:** 開発や統合には何を使えばいいのでしょうか？"

#: ../to-be-integrated.rst:956
msgid "se OpenSC's commandline tools If your application has a PKCS#11 interface, use OpenSC's PKCS#11 driver. Depending on your Linux distribution, the PKCS driver may may be located at /usr/lib/x86_64-linux-gnu/opensc-pkcs11.so for example."
msgstr ""
"OpenSC'のコマンドラインツール アプリケーションに PKCS#11 インタフェースがある場合は、OpenSC'の PKCS#11 "
"ドライバを使用します。お使いの Linux ディストリビューションによっては、PKCS ドライバは、例えば /usr/lib/"
"x86_64-linux-gnu/opensc-pkcs11.so にあるかもしれません。"

#: ../to-be-integrated.rst:958
msgid "Alternatively to OpenSC, you might use sc-hsm-embedded PKCS#11 and CSP-Minidriver Module."
msgstr "OpenSCの代わりに、sc-hsm-embedded PKCS#11とCSP-Minidriver Moduleを使うこともできます。"

#: ../to-be-integrated.rst:959
msgid "In case you use Java, you find a JCE Provider as part of Smart Card Shell. You can find information about the m-of-n scheme here. Secure Messaging can be used with the JCE provider. Please register at the CardContact Developer Network to get access to the user manual and further tools. You can also request the manual from us. Smart card forwarding with Fedora A user generated tool on GitHub to provide an easy frontend to OpenSCs toolset - nitrotool A forum post describes the procedure to sign executables with a key stored on HSM on Windows."
msgstr ""
"Javaを使用している場合、Smart Card Shellの一部としてJCE "
"Providerがあります。m-of-n方式についてはこちらをご覧ください。JCEプロバイダではセキュアメッセージングが使用できます。"
"CardContact Developer "
"Networkにご登録いただくと、ユーザーマニュアルやその他のツールにアクセスできます。マニュアルはこちらからもご請求いただけます。Smart card "
"forwarding with Fedora A user generated tool on GitHub to provide an easy "
"frontend to OpenSCs toolset - nitrotool A forum post described the procedure "
"to sign executables with a key stored on HSM on Windows."

#: ../to-be-integrated.rst:967
msgid "Key Use Counter"
msgstr "キーユースカウンター"

#: ../to-be-integrated.rst:969
msgid "The Key Use Counter is displayed in the Key Manager of the Smart Card Shell. At the moment you can only set it with a script (SmartCardHSMKeySpecGenerator.prototype.setKeyUseCounter in the class scsh/sc-hsm/SmartCardHSM.js)."
msgstr ""
"Key Use Counterは、Smart Card ShellのKey Managerに表示されます。現時点では、スクリプト(scsh/sc-sm/"
"SmartCardHSM.jsにあるSmartCardHSMKeySpecGenerator.prototype."
"setKeyUseCounter)でしか設定できません。"

#: ../to-be-integrated.rst:971
msgid "In our PKCS#11 module there is a proprietary attribute CKA_SC_HSM_KEY_USE_COUNTER with the key use of the C_GenerateKeyPair counter can be set. The attribute can then also be set for a key can be queried."
msgstr ""
"当社の PKCS#11 モジュールには、C_GenerateKeyPair カウンタの鍵使用を設定できる独自の属性 "
"CKA_SC_HSM_KEY_USE_COUNTER があります。また、この属性は、鍵を照会するために設定することもできる。"

#: ../to-be-integrated.rst:973
msgid "In OCF and the JCE Provider, the Key Use Counter can be queried with SmartCardHSMKey.getUseCounter() and confirm with SmartCardHSMKeySpec.setKeyUseCounter() can be set."
msgstr ""
"OCFやJCE Providerでは、SmartCardHSMKey.getUseCounter()でKey Use "
"Counterを照会し、SmartCardHSMKeySpec.setKeyUseCounter()で確認し、設定することができます。"
