# SOME DESCRIPTIVE TITLE.
# Copyright (C) Nitrokey
# This file is distributed under the same license as the Nitrokey
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Nitrokey Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-05 12:32+0100\n"
"PO-Revision-Date: 2023-02-12 12:24+0000\n"
"Last-Translator: Anonymous <noreply@weblate.org>\n"
"Language-Team: Chinese (Simplified) <https://translate.nitrokey.com/projects/"
"nitrokey-documentation/documentation-hsm/zh_Hans/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.14.2\n"
"Generated-By: Babel 2.6.0\n"

#: ../hsm/apache2-tls.rst:2
msgid "TLS Setup with Apache2"
msgstr "用Apache2设置TLS"

#: ../hsm/apache2-tls.rst:10
msgid ""
"The very same concept as descriped here can be used for many applications"
" using openssl as crypto-backend. The concept mostly boils down to: "
"replace (secret) key-file with PKCS#11 URL referencing a key on a "
"security token (Nitrokey)"
msgstr ""
"这里描述的相同概念可以用于许多使用openssl作为加密后端的应用。这个概念主要归结为：用PKCS#11 "
"URL替代（秘密）密钥文件，引用安全令牌（Nitrokey）上的一个密钥。"

#: ../hsm/apache2-tls.rst:17 ../hsm/import-keys-certs.rst:26
#: ../hsm/pkcs11-url.rst:14
msgid "Preparation"
msgstr "准备工作"

#: ../hsm/apache2-tls.rst:19
msgid ""
"ensure that the `apache2` version is at least 2.4.42 for proper "
"``mod_ssl`` support"
msgstr "确保`apache2`的版本至少是2.4.42，以获得正确的``mod_ssl``支持。"

#: ../hsm/apache2-tls.rst:21
msgid "activate ``mod_ssl`` using ``a2enmod ssl``, if not already done"
msgstr "激活``mod_ssl``使用``a2enmod ssl``，如果尚未完成。"

#: ../hsm/apache2-tls.rst:23
msgid ""
"additionally ``openssl`` is needed and ``libengine-pkcs11-openssl`` see "
":doc:`PKCS#11 URL<pkcs11-url>`"
msgstr ""
"另外还需要``openssl``和``libengine-pkcs11-openssl``见：doc:`PKCS#11 URL<pkcs11-url>`"

#: ../hsm/apache2-tls.rst:29
msgid "Configure Apache2 to Use a Security Key"
msgstr "配置Apache2以使用安全密钥"

#: ../hsm/apache2-tls.rst:31
msgid ""
"Basically the only thing to do is replace ``SSLCertificateFile`` with the"
" proper PKCS#11 URL and delete any other references to keys or "
"certificates. E.g., ``SSLCertificateKeyFile`` is not needed anymore."
msgstr ""
"基本上唯一要做的是用适当的PKCS#11 URL替换``SSLCertificateFile`，并删除任何其他对钥匙或证书的引用。例如，``SSLCert"
"ificateKeyFile``就不再需要了。"

#: ../hsm/apache2-tls.rst:35
msgid "An example directive might look like this:"
msgstr "一个指令的例子可能是这样的。"

#: ../hsm/apache2-tls.rst:41
msgid ""
"The proper PKCS#11 URL can be extracted as documented in :doc:`PKCS#11 "
"URL Generation<pkcs11-url>`"
msgstr "适当的PKCS#11 URL可以按照:doc:`PKCS#11 URL生成<pkcs11-url>`中的记载提取。"

#: ../hsm/apache2-tls.rst:43
msgid "Be sure to place the directive inside a `VirtualHost` configuration."
msgstr "请确保将该指令放在 \"虚拟主机 \"的配置中。"

#: ../hsm/apache2-tls.rst:46
msgid "Provide PIN During Apache2 Startup"
msgstr "在Apache2启动时提供PIN码"

#: ../hsm/apache2-tls.rst:48
msgid ""
"Using the previously described method Apache2 will ask on every startup "
"for the User-PIN, thus basically declining batch startup. Apache2 "
"provides another directive to provide the PIN during startup."
msgstr "使用前面描述的方法，Apache2会在每次启动时询问用户PIN，因此基本上拒绝了批量启动。Apache2提供了另一个指令，在启动时提供PIN。"

#: ../hsm/apache2-tls.rst:56
msgid ""
"Apache2 expects an executable after ``|``, which will be executed during "
"startup and it's output (trailing newline is expected) will be used as "
"PIN. Obviously arbitrary complex PIN retrieval methods can be implemented"
" using this approach. Although here a trivial example has been chosen to "
"just ``echo`` the PIN during startup."
msgstr ""
"Apache2期望在``|``之后有一个可执行文件，该文件将在启动时被执行，它的输出（尾部换行被期望）将被用作PIN。显然，任意复杂的PIN检索方法都可以"
"用这种方法来实现。虽然这里选择了一个微不足道的例子，只是在启动过程中``echo``的PIN。"

#: ../hsm/apache2-tls.rst:61
msgid ""
"Further ``SSLPassPhraseDialog`` is a global directive, thus has to be "
"placed in the global configuration scope in Apache2."
msgstr "此外``SSLPassPhraseDialog``是一个全局指令，因此必须放在Apache2的全局配置范围中。"

#: ../hsm/apache2-tls.rst:66
msgid ""
"This shown example is not a secure mechanism to pass your PIN, as it will"
" be written in plain-text inside your configuration"
msgstr "这个例子并不是传递PIN码的安全机制，因为它将以明文形式写入你的配置中。"

#: ../hsm/apache2-tls.rst:69
msgid "See the `Apache2 mod_ssl documentation`_ for more details on this feature."
msgstr "关于这个功能的更多细节，请看`Apache2 mod_ssl 文档`_。"

#: ../hsm/apache2-tls.rst:72
msgid "Complete Apache2 Config Example"
msgstr "完整的Apache2配置实例"

#: ../hsm/apache2-tls.rst:73
msgid "A complete Apache2 (``VirtualHost``) config snippet might look like this:"
msgstr "一个完整的Apache2（``VirtualHost``）配置片段可能看起来像这样。"

#: ../hsm/certificate-authority.rst:2
msgid "Creating a Certificate Authority"
msgstr "创建一个证书颁发机构"

#: ../hsm/certificate-authority.rst:8
msgid ""
"This article shows you how to setup your own private certificate "
"authority backed by a Nitrokey HSM. This certificate authority has no "
"automation and does not really scale. Other open source projects can be "
"referenced for automation and scalability."
msgstr ""
"本文向你展示了如何设置由Nitrokey "
"HSM支持的自己的私人证书授权。这个证书授权机构没有自动化，也没有真正的扩展。在自动化和可扩展性方面可以参考其他开源项目。"

#: ../hsm/certificate-authority.rst:11
msgid "Choose Cryptographic Algorithms"
msgstr "选择密码学算法"

#: ../hsm/certificate-authority.rst:13
msgid ""
"I’m going to assume that you’re as paranoid as I am, so I will be using "
"the following command for generating private keys:"
msgstr "我将假设你和我一样偏执，所以我将使用以下命令来生成私钥。"

#: ../hsm/certificate-authority.rst:19
msgid ""
"But, if you’re less paranoid that I am, you can safely choose the "
"following options:"
msgstr "但是，如果你不像我这么偏执，你可以安全地选择以下选项。"

#: ../hsm/certificate-authority.rst:26
msgid ""
"Likewise, I will be using the sha512 algorithm throughout this article, "
"but sha256 can safely be used."
msgstr "同样，我将在本文中使用sha512算法，但也可以安全地使用sha256算法。"

#: ../hsm/certificate-authority.rst:29
msgid "Preparing to Start"
msgstr "准备开始"

#: ../hsm/certificate-authority.rst:31
msgid "To start with, you need to pick a directory to store your CA."
msgstr "首先，你需要选择一个目录来存储你的CA。"

#: ../hsm/certificate-authority.rst:42
msgid "Install the necessary tools:"
msgstr "安装必要的工具。"

#: ../hsm/certificate-authority.rst:52
msgid ""
"For Windows download the official `OpenSC releases "
"<https://github.com/OpenSC/OpenSC/releases>`_ and make sure you install "
"`p11tool as described <https://github.com/thales-e-security/p11tool>`_. "
"Using the PowerShell most commands should be identical as long as both "
"tools and their binaries are within your ``PATH``."
msgstr ""
"对于Windows，下载官方的`OpenSC发布的<https://github.com/OpenSC/OpenSC/"
"releases>`_，并确保你安装`p11tool，如描述的<https://github.com/thales-e-security/"
"p11tool>`_。只要两个工具及其二进制文件都在你的``PATH``内，使用PowerShell的大多数命令应该是相同的。"

#: ../hsm/certificate-authority.rst:58
msgid "Creating the Root Certificate Authority"
msgstr "创建根证书颁发机构"

#: ../hsm/certificate-authority.rst:60
msgid ""
"We start by generating the private key for the certificate authority "
"directly on the Nitrokey HSM. This allows us to use the private key in "
"the future, but not access it."
msgstr "我们首先在Nitrokey HSM上直接为证书机构生成私钥。这允许我们在将来使用私钥，但不能访问它。"

#: ../hsm/certificate-authority.rst:83
msgid ""
"Note the ID number (e0161cc8b6f5d66ac6835ecdecb623fc0506a675), we’ll need"
" it later."
msgstr "注意ID号（e0161cc8b6f5d66ac6835ecdecb623fc0506a675），我们以后会需要它。"

#: ../hsm/certificate-authority.rst:85 ../hsm/certificate-authority.rst:240
msgid ""
"If you need the ID in the future, you can list the keys on the Nitrokey "
"HSM:"
msgstr "如果你将来需要这个ID，你可以在Nitrokey HSM上列出这些钥匙。"

#: ../hsm/certificate-authority.rst:91 ../hsm/certificate-authority.rst:246
msgid ""
"We need to create a config file to generate a self-signed public "
"certificate."
msgstr "我们需要创建一个配置文件来生成一个自签名的公共证书。"

#: ../hsm/certificate-authority.rst:97 ../hsm/certificate-authority.rst:252
msgid ""
"Fill out the request information in <angle brackets> with information for"
" your CA."
msgstr "在<角括号>中填写请求信息，并附上你的CA的信息。"

#: ../hsm/certificate-authority.rst:157
msgid ""
"Generate the self-signed public certificate from the private key. Use the"
" private key id value from earlier."
msgstr "从私钥生成自签名的公共证书。使用先前的私钥ID值。"

#: ../hsm/certificate-authority.rst:165
msgid ""
"Verify that the root certificate was generated correctly. Verify that "
"Signature-Algorithm matches above and below. Verify that Issuer and "
"Subject match, all root certificates are self signed. Verify that Key "
"Usage matches what was in the v3_ca information in our config file."
msgstr ""
"验证根证书是否正确生成。验证签名-算法是否与上面和下面相匹配。验证签发人和主题是否匹配，所有根证书都是自签的。验证密钥使用与我们配置文件中v3_ca信息中"
"的内容相匹配。"

#: ../hsm/certificate-authority.rst:213
msgid "Creating the Intermediate Certificate Authority"
msgstr "创建中间证书颁发机构"

#: ../hsm/certificate-authority.rst:215
msgid ""
"We continue by generating the private key for the intermediate "
"certificate authority directly on the Nitrokey HSM. This allows us to use"
" the private key in the future, but not access it."
msgstr "我们继续在Nitrokey HSM上直接生成中间证书颁发机构的私钥。这使我们能够在未来使用私钥，但不能访问它。"

#: ../hsm/certificate-authority.rst:238
msgid ""
"Note the ID number (bcb48fe9b566ae61891aabbfde6a23d4ff3ab639), we’ll need"
" it later."
msgstr "注意ID号（bcb48fe9b566ae61891aabbfde6a23d4ff3ab639），我们以后会需要它。"

#: ../hsm/certificate-authority.rst:279
msgid ""
"Generate the certificate signing request for the intermediate CA from the"
" intermediate CA’s private key. Use the private key ID value from "
"earlier."
msgstr "从中间CA的私钥中生成中间CA的证书签署请求。使用先前的私钥ID值。"

#: ../hsm/certificate-authority.rst:287
msgid ""
"Verify that the CSR was created correctly. Verify that your Subject is "
"correct. Verify that your Public Key and Signature Algorithm are correct."
msgstr "验证CSR的创建是否正确。验证你的主题是否正确。验证你的公钥和签名算法是否正确。"

#: ../hsm/certificate-authority.rst:320 ../hsm/certificate-authority.rst:525
msgid "We need to find out the fully qualified PKCS#11 URI for your private key:"
msgstr "我们需要找出你的私钥的完全合格的PKCS#11 URI。"

#: ../hsm/certificate-authority.rst:358 ../hsm/certificate-authority.rst:563
msgid "In this instance, the fully qualified PKCS#11 URI is:"
msgstr "在这个例子中，完全合格的PKCS#11 URI是。"

#: ../hsm/certificate-authority.rst:364
msgid ""
"Now, we need to create a config file to use the private key of the root "
"certificate to sign the csr of the intermediate certificate."
msgstr "现在，我们需要创建一个配置文件，使用根证书的私钥来签署中间证书的CSR。"

#: ../hsm/certificate-authority.rst:416
msgid "Then sign the intermediate certificate with the root certificate."
msgstr "然后用根证书签署中级证书。"

#: ../hsm/certificate-authority.rst:456
msgid ""
"Verify that the root certificate was generated correctly. Verify that the"
" Issuer and Subject are different, and correct. Verify that the Key Usage"
" matches the config file. Verify that the signature algorithm are correct"
" above and below."
msgstr "验证根证书的生成是否正确。验证签发人和主题是否不同，并且正确。验证密钥的使用与配置文件相匹配。验证签名算法上下都正确。"

#: ../hsm/certificate-authority.rst:503
msgid ""
"Verify that the intermediate certificate verifies against the root "
"certificate."
msgstr "验证中间证书是否能与根证书进行验证。"

#: ../hsm/certificate-authority.rst:510
msgid "Create a certificate chain file:"
msgstr "创建一个证书链文件。"

#: ../hsm/certificate-authority.rst:516
msgid "You now have a certificate authority backed by an HSM."
msgstr "你现在有一个由HSM支持的证书授权。"

#: ../hsm/certificate-authority.rst:519
msgid "Sign a Server Certificate"
msgstr "签署服务器证书"

#: ../hsm/certificate-authority.rst:521
msgid ""
"Now that you have a certificate authority, you’d probably like to know "
"how to use it."
msgstr "现在你有了一个证书授权，你可能想知道如何使用它。"

#: ../hsm/certificate-authority.rst:523
msgid ""
"Create a CSR in the normal method for your application. Proper creation "
"of your certificate, including SAN, for your particular application is "
"outside the scope of this document."
msgstr "以正常的方法为你的应用创建CSR。为你的特定应用正确创建你的证书，包括SAN，不在本文件的范围之内。"

#: ../hsm/certificate-authority.rst:569
msgid ""
"Create a config file to use the private key of the intermediate "
"certificate to sign the CSRs of your servers."
msgstr "创建一个配置文件，使用中间证书的私钥来签署你服务器的CSR。"

#: ../hsm/certificate-authority.rst:624
msgid "Then run openssl to sign the server’s CSR."
msgstr "然后运行openssl来签署服务器的CSR。"

#: ../hsm/certificate-authority.rst:673
msgid "References"
msgstr "参考文献"

#: ../hsm/certificate-authority.rst:675
msgid "I used the following resources to help in compiling this document."
msgstr "我使用了以下资源来帮助编纂本文件。"

#: ../hsm/certificate-authority.rst:677
msgid ""
"`How to initialize your Nitrokey HSM "
"<https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM#initialize-the-"
"device>`_"
msgstr ""
"`如何初始化你的Nitrokey HSM <https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM"
"#initialize-the-device>`_"

#: ../hsm/certificate-authority.rst:678
msgid ""
"`How to create a root and intermediate CA <https://jamielinux.com/docs"
"/openssl-certificate-authority/create-the-root-pair.html>`_"
msgstr ""
"`如何创建根和中级CA <https://jamielinux.com/docs/openssl-certificate-authority/"
"create-the-root-pair.html>`_"

#: ../hsm/certificate-authority.rst:679
msgid ""
"`How to ensure the serial numbers of your intermediate CA and server "
"certs are up to spec <https://www.phildev.net/ssl/creating_ca.html>`_"
msgstr ""
"`如何确保你的中间CA和服务器证书的序列号符合规范 <https://www.phildev.net/ssl/creating_ca.html>`_"

#: ../hsm/certificate-authority.rst:680
msgid ""
"`How to generate ECC private keys <https://dev.to/benjaminblack"
"/obtaining-an-elliptic-curve-dsa-certificate-with-lets-encrypt-51bc>`_"
msgstr ""
"`如何生成ECC私钥 <https://dev.to/benjaminblack/obtaining-an-elliptic-curve-dsa-"
"certificate-with-lets-encrypt-51bc>`_"

#: ../hsm/certificate-authority.rst:681
msgid ""
"`How to find the PCKS11 URI from your HSM "
"<https://www.infradead.org/openconnect/pkcs11.html>`_"
msgstr ""
"`如何从你的HSM找到PCKS11 URI <https://www.infradead.org/openconnect/pkcs11.html>`_"

#: ../hsm/certificate-authority.rst:682
msgid ""
"`Troubleshooting (forum) <https://support.nitrokey.com/t/pki-ca-nitrokey-"
"hsm-does-not-support-signing/2598/14>`_"
msgstr ""
"`故障排除（论坛） <https://support.nitrokey.com/t/"
"pki-ca-nitrokey-hsm-does-not-support-signing/2598/14>`_"

#: ../hsm/certificate-authority.rst:685
msgid ""
"This document was originally `written by lyntux "
"<https://gist.github.com/lyntux/f02c6c3414ce48bc8ea8ab6dcdba1623>`_"
msgstr ""
"本文件最初`由lyntux撰写<https://gist.github.com/lyntux/"
"f02c6c3414ce48bc8ea8ab6dcdba1623>`_。"

#: ../hsm/faq.rst:2
msgid "Nitrokey HSM FAQ"
msgstr "硝基钥匙HSM常见问题"

#: ../shared-faqs/nitrokeys.rst:2
msgid "**Q:** Which Operating Systems are supported?"
msgstr "**问：**支持哪些操作系统？"

#: ../shared-faqs/nitrokeys.rst:2
msgid "Windows, Linux, and Mac OS X."
msgstr "Windows、Linux和Mac OS X。"

#: ../shared-faqs/nitrokeys.rst:5
msgid "**Q:** What can I use the Nitrokey for?"
msgstr "**问：**我可以用硝基钥匙做什么？"

#: ../shared-faqs/nitrokeys.rst:5
msgid "See the `frontpage`_ for an overview of supported use cases."
msgstr "请参阅`frontpage`_以了解支持的用例概述。"

#: ../hsm/faq.rst:17
msgid "**Q:** What is the maximum length of the PIN?"
msgstr "**问：**密码的最大长度是多少？"

#: ../hsm/faq.rst:9
msgid ""
"Nitrokey uses PINs instead of passwords. The main difference is that the "
"hardware limits the amount of tries to three while a limit doesn't exist "
"for passwords. Because of this, a short PIN is still secure and there is "
"not need to choose a long and complex PIN."
msgstr ""
"Nitrokey使用PIN码而不是密码。主要区别在于，硬件将尝试的次数限制为三次，而密码则不存在限制。正因为如此，一个简短的PIN码仍然是安全的，没有必要"
"选择一个长而复杂的PIN码。"

#: ../hsm/faq.rst:14
msgid ""
"Nitrokey PINs can be up to 16 digits long and can consist of numbers, "
"characters and special characters. Note: When using GnuPG or OpenSC, 32 "
"character long PINs can be used but aren't supported by Nitrokey App."
msgstr ""
"Nitrokey的PIN码最多可以有16位，可以由数字、字符和特殊字符组成。注意：当使用GnuPG或OpenSC时，可以使用32个字符的PIN码，但不被N"
"itrokey应用程序支持。"

#: ../hsm/faq.rst:27
msgid "**Q:** What is the User PIN for?"
msgstr "**问：**用户密码是什么？"

#: ../hsm/faq.rst:20
msgid ""
"The PIN is at least 6-digits long and is used to get access to the "
"contect of the Nitrokey. This is the PIN you will use a lot in every day "
"use"
msgstr "PIN码至少有6位数，用于进入Nitrokey的保护范围。这是你在日常使用中会经常用到的密码。"

#: ../hsm/faq.rst:24
msgid ""
"The PIN can have up to 16 digits and other characters (e.g. alphabetic "
"and special characters). But as the PIN is blocked as soon three wrong "
"PIN attempts were done, it is sufficiently secure to only have a 6 digits"
" PIN."
msgstr ""
"密码最多可以有16位数字和其他字符（如字母和特殊字符）。但是，只要有三次错误的PIN尝试，PIN就会被阻止，所以只有6位数的PIN就足够安全了。"

#: ../hsm/faq.rst:34
msgid "**Q:** What is the SO PIN for?"
msgstr "**问：**SO PIN是什么意思？"

#: ../hsm/faq.rst:30
msgid ""
"The SO PIN is used in the Nitrokey HSM only and is something like a "
"\"master\" PIN with special properties. Please read this instructions "
"carefully to understand the SO PIN of the Nitrokey HSM."
msgstr "SO PIN仅在Nitrokey HSM中使用，它类似于具有特殊属性的主密码。请仔细阅读本说明以了解Nitrokey HSM的SO PIN。"

#: ../hsm/faq.rst:34
msgid "The SO PIN has to be exactly 16 digits long."
msgstr "SO PIN的长度必须正好是16位数。"

#: ../hsm/faq.rst:38
msgid "**Q:** How many data objects (DF, EF) can be stored?"
msgstr "**问：**可以存储多少个数据对象（DF、EF）？"

#: ../hsm/faq.rst:37
msgid ""
"76 KB EEPROM total, max. 150 x ECC-521 keys, max. 300 x ECC/AES-256 keys,"
" max. 19 x RSA-4096 keys, max. 38 x RSA-2048 keys"
msgstr ""
"总共76 KB EEPROM，最大。150个ECC-521密钥，最大。300 x ECC/AES-256 密钥，最大19 x RSA-4096 "
"密钥，最大。38个RSA-2048密钥"

#: ../hsm/faq.rst:41
msgid "**Q:** How many keys can I store?"
msgstr "**问：**我可以存储多少个钥匙？"

#: ../hsm/faq.rst:41
msgid "Nitrokey HSM can store 20 RSA-2048 and 31 ECC-256 key pairs."
msgstr "Nitrokey HSM可以存储20个RSA-2048和31个ECC-256的密钥对。"

#: ../hsm/faq.rst:49
msgid "**Q:** How fast is encryption and signing?"
msgstr "**问：**加密和签名的速度如何？"

#: ../hsm/faq.rst:44
msgid "Key generation on-card: RSA 2048: 2 per minute"
msgstr "卡片上的密钥生成。RSA 2048：每分钟2个"

#: ../hsm/faq.rst:45
msgid "Key generation on-card: ECC 256: 10 per minute."
msgstr "卡片上的密钥生成。ECC 256：每分钟10个。"

#: ../hsm/faq.rst:46
msgid "Signature creation with off-card hash: RSA 2048; 100 per minute"
msgstr "用卡外哈希创建签名。RSA 2048；每分钟100个"

#: ../hsm/faq.rst:47
msgid "Signature creation with off-card hash: ECDSA 256: 360 per minute"
msgstr "用卡外哈希创建签名。ECDSA 256：每分钟360个"

#: ../hsm/faq.rst:48
msgid ""
"Signature creation with on-card SHA-256 and 1 kb data: RSA 2048; 68 per "
"minute"
msgstr "用卡上的SHA-256和1kb数据创建签名。RSA 2048；每分钟68个"

#: ../hsm/faq.rst:49
msgid ""
"Signature creation with on-card SHA-256 and 1 kb data: ECDSA 256: 125 per"
" minute"
msgstr "用卡上的SHA-256和1kb数据创建签名。ECDSA 256：每分钟125个"

#: ../hsm/faq.rst:53
msgid "**Q:** How can I distinguish a Nitrokey HSM1 from an Nitrokey HSM2?"
msgstr "**问：**我如何区分Nitrokey HSM1和Nitrokey HSM2？"

#: ../hsm/faq.rst:52
msgid ""
"Use ``opensc-tool --list-algorithms`` and compare with the table below. "
"Please also see `this thread`_ for the factsheets and more details."
msgstr "使用``opensc-tool --list-algorithms``并与下表进行比较。也请看`这个主题`_，以了解情况表和更多细节。"

#: ../shared-faqs/algos.rst:3
msgid "**Q:** Which algorithms and maximum key length are supported?"
msgstr "**问：**支持哪些算法和最大密钥长度？"

#: ../shared-faqs/algos.rst:3
msgid "See the following table:"
msgstr "见下表。"

#: ../shared-faqs/algos.rst:6
msgid "Start"
msgstr "开始"

#: ../shared-faqs/algos.rst:6
msgid "Pro + Storage"
msgstr "专业+存储"

#: ../shared-faqs/algos.rst:6
msgid "Pro 2 + Storage 2"
msgstr "专业2+存储2"

#: ../shared-faqs/algos.rst:6
msgid "HSM"
msgstr "HSM"

#: ../shared-faqs/algos.rst:6
msgid "HSM2"
msgstr "HSM2"

#: ../shared-faqs/algos.rst:8
msgid "rsa1024"
msgstr "rsa1024"

#: ../shared-faqs/algos.rst:8 ../shared-faqs/algos.rst:10
#: ../shared-faqs/algos.rst:12 ../shared-faqs/algos.rst:14
#: ../shared-faqs/algos.rst:16 ../shared-faqs/algos.rst:18
#: ../shared-faqs/algos.rst:20 ../shared-faqs/algos.rst:22
#: ../shared-faqs/algos.rst:24 ../shared-faqs/algos.rst:26
#: ../shared-faqs/algos.rst:28 ../shared-faqs/algos.rst:30
#: ../shared-faqs/algos.rst:32 ../shared-faqs/algos.rst:34
msgid "✓"
msgstr "✓"

#: ../shared-faqs/algos.rst:10
msgid "rsa2048"
msgstr "rsa2048"

#: ../shared-faqs/algos.rst:12
msgid "rsa3072"
msgstr "rsa3072"

#: ../shared-faqs/algos.rst:14
msgid "rsa4096"
msgstr "rsa4096"

#: ../shared-faqs/algos.rst:16
msgid "curve25519"
msgstr "曲线25519"

#: ../shared-faqs/algos.rst:18
msgid "NIST-P 192"
msgstr "NIST-P 192"

#: ../shared-faqs/algos.rst:20
msgid "NIST-P 256"
msgstr "NIST-P 256"

#: ../shared-faqs/algos.rst:22
msgid "NIST-P 384-521"
msgstr "NIST-P 384-521"

#: ../shared-faqs/algos.rst:24
msgid "Brainpool 192"
msgstr "脑池192"

#: ../shared-faqs/algos.rst:26
msgid "Brainpool 256-320"
msgstr "脑库 256-320"

#: ../shared-faqs/algos.rst:28
msgid "Brainpool 384-521"
msgstr "脑库 384-521"

#: ../shared-faqs/algos.rst:30
msgid "secp192"
msgstr "secp192"

#: ../shared-faqs/algos.rst:32
msgid "secp256"
msgstr "secp256"

#: ../shared-faqs/algos.rst:34
msgid "secp521"
msgstr "secp521"

#: ../hsm/faq.rst:60
msgid "**Q:** How good is the Random Number Generator (RNG)?"
msgstr "**问：**随机数字发生器（RNG）的性能如何？"

#: ../hsm/faq.rst:59
msgid ""
"Nitrokey HSM uses the TRNG of JCOP 2.4.1r3 which has a quality of DRNG.2 "
"(according to AIS 31 of the BSI)."
msgstr "Nitrokey HSM使用JCOP 2.4.1r3的TRNG，其质量为DRNG.2（根据BSI的AIS 31）。"

#: ../hsm/faq.rst:76
msgid "**Q:** Which API can I use?"
msgstr "**问：**我可以使用哪个API？"

#: ../hsm/faq.rst:63
msgid ""
"OpenSC: Comprehensive instructions exist for OpenSC framework. There is "
"nitrotool as a more comfortable frontend to OpenSC."
msgstr "OpenSC：OpenSC框架有全面的说明。还有nitrotool作为OpenSC的一个更舒适的前端。"

#: ../hsm/faq.rst:66
msgid ""
"Embedded Systems: For systems with minimal memory footprint a read/only "
"PKCS#11 module is provided by the sc-hsm-embedded project.  This PKCS#11 "
"module is useful for deployments where key generation at the user's "
"workplace is not required. The PKCS#11 module also supports major "
"electronic signature cards available in the German market."
msgstr ""
"嵌入式系统。对于内存占用最小的系统，sc-hsm-embedded项目提供了一个只读不写的PKCS#11模块。  "
"这个PKCS#11模块对于不需要在用户工作场所生成密钥的部署非常有用。PKCS#11模块还支持德国市场上的主要电子签名卡。"

#: ../hsm/faq.rst:72
msgid ""
"OpenSCDP: The SmartCard-HSM is fully integrated with OpenSCDP, the open "
"smart card development platform. See the public support scripts for "
"details. To import existing keys you can use its SCSH or NitroKeyWrapper."
msgstr ""
"OpenSCDP。SmartCard-"
"HSM与开放式智能卡开发平台OpenSCDP完全集成。详情见公共支持脚本。要导入现有的密钥，你可以使用其SCSH或NitroKeyWrapper。"

#: ../hsm/faq.rst:82
msgid "**Q:** Is the Nitrokey Pro Common Criteria or FIPS certified?"
msgstr "**问：** Nitrokey Pro是否经过通用标准或FIPS认证？"

#: ../hsm/faq.rst:79
msgid ""
"The security controler's hardware and operating system are Common "
"Criteria certified (`Security Target`_; `HSM2 Report`_; See `here`_, "
"click \"ICs, Smart Cards and Smart Card-Related Devices and Systems\" and"
" search for \"NXP JCOP 3 P60\")."
msgstr ""
"该安全控制器的硬件和操作系统通过了Common Criteria认证（`安全目标`；`HSM2报告`；见`这里`，点击\"IC"
"、智能卡和智能卡相关设备和系统`；并搜索\"NXP JCOP 3 P60\" ）。"

#: ../hsm/import-keys-certs.rst:2
msgid "Importing Keys and Certificates"
msgstr "导入钥匙和证书"

#: ../hsm/import-keys-certs.rst:8
msgid ""
"Generally the concept to import key-pairs and/or certificates is the "
"following:"
msgstr "一般来说，导入密钥对和/或证书的概念如下。"

#: ../hsm/import-keys-certs.rst:11
msgid "Create a DKEK (Device Key Encryption Key) share"
msgstr "创建一个DKEK（设备密钥加密密钥）共享"

#: ../hsm/import-keys-certs.rst:12
msgid "Initialize device and enable DKEK as \"Device Encryption Scheme\""
msgstr "初始化设备并启用DKEK作为\"设备加密方案\"。"

#: ../hsm/import-keys-certs.rst:13
msgid "Import DKEK share into device"
msgstr "将DKEK共享导入设备中"

#: ../hsm/import-keys-certs.rst:14
msgid "Import PKCS#12 container(s) into DKEK"
msgstr "向DKEK导入PKCS#12容器"

#: ../hsm/import-keys-certs.rst:16
msgid ""
"This documentation covers only one specific use-case and should serve as "
"an example for the overall workflow. For further information please read "
"`this thread`_ and `this blog post`_."
msgstr "本文档只涵盖了一个特定的用例，并应作为整个工作流程的一个例子。更多信息请阅读`这个主题`_和`这个博文`_。"

#: ../hsm/import-keys-certs.rst:22
msgid ""
"This procedure will reset your Nitrokey HSM 2 device and all data on it "
"will be deleted!"
msgstr "这个过程将重置你的Nitrokey HSM 2设备，上面的所有数据都将被删除!"

#: ../hsm/import-keys-certs.rst:28
msgid ""
"make sure all the keys you would like to import are available as PKCS#12 "
"containers (`.p12`) and you know the password, if needed"
msgstr "确保你想导入的所有钥匙都是以PKCS#12容器（`.p12'）的形式存在的，如果需要，你知道密码。"

#: ../hsm/import-keys-certs.rst:31
msgid ""
"be sure that nothing on the used Nitrokey HSM 2 is needed, it will be "
"deleted during this procedure"
msgstr "确保使用过的Nitrokey HSM 2上没有任何东西是需要的，它将在这个过程中被删除。"

#: ../hsm/import-keys-certs.rst:34
msgid ""
"download the latest `Smart Card Shell`_ and unpack it into your work-"
"directory"
msgstr "下载最新的`Smart Card Shell`_，并将其解压到你的工作目录中。"

#: ../hsm/import-keys-certs.rst:37
msgid "Importing via the SCSH3 GUI"
msgstr "通过SCSH3 GUI导入"

#: ../hsm/import-keys-certs.rst:39
msgid ""
"Inside the unpacked directory you will find ``scsh3gui``, which can be "
"started using ``bash scsh3gui`` (for windows double-click on: "
"``scsh3gui.cmd``)."
msgstr ""
"在解压后的目录中，你会发现``scsh3gui``，可以用``bash scsh3gui``启动（对于Windows，双击。``scsh3gui."
"cmd``）。"

#: ../hsm/import-keys-certs.rst:42
msgid ""
"Once the SCSH3 Tool is open, you should see your Nitrokey HSM 2 inside "
"the tree view. Please follow these steps to import:"
msgstr "一旦SCSH3工具被打开，你应该在树状视图中看到你的Nitrokey HSM 2。请按照以下步骤进行导入。"

#: ../hsm/import-keys-certs.rst:45
msgid "Start key-manager (File -> Keymanager)"
msgstr "启动钥匙管理器 (File -> Keymanager)"

#: ../hsm/import-keys-certs.rst:47
msgid "Right-click \"Smartcard-HSM\" -> create DKEK share"
msgstr "右键单击\"智能卡-HSM\"-> 创建DKEK共享"

#: ../hsm/import-keys-certs.rst:49
msgid "Choose file location"
msgstr "选择文件位置"

#: ../hsm/import-keys-certs.rst:51
msgid "Choose DKEK share password"
msgstr "选择DKEK共享密码"

#: ../hsm/import-keys-certs.rst:53
msgid "Right-click \"Smartcard-HSM\" -> Initialize device"
msgstr "右键点击\"智能卡-HSM\"->初始化设备"

#: ../hsm/import-keys-certs.rst:55
msgid "Enter SO-PIN"
msgstr "输入SO-PIN"

#: ../hsm/import-keys-certs.rst:57
msgid "(optional) Enter label and enter URL/Host"
msgstr "(可选)输入标签并输入URL/主机"

#: ../hsm/import-keys-certs.rst:59
msgid "Select authentication method: \"User PIN\""
msgstr "选择认证方式：\"用户密码\"。"

#: ../hsm/import-keys-certs.rst:61
msgid ""
"Allow RESET RETRY COUNTER: \"Resetting and unblocking PIN with SO-PIN not"
" allowed\""
msgstr "允许RESET RETRY COUNTER：\"不允许用SO-PIN重置和解除封锁PIN\"。"

#: ../hsm/import-keys-certs.rst:63
msgid "Enter and confirm User PIN"
msgstr "输入并确认用户密码"

#: ../hsm/import-keys-certs.rst:65
msgid "\"Select Device Key Encryption scheme\" -> \"DKEK shares\""
msgstr "\"选择设备密钥加密方案\"->\"DKEK份额\"。"

#: ../hsm/import-keys-certs.rst:67
msgid "Enter number of DKEK shares: 1"
msgstr "输入DKEK股票的数量。1"

#: ../hsm/import-keys-certs.rst:69
msgid "Right-click DKEK set-up in progress -> \"Import DKEK share\""
msgstr "右键单击正在进行的DKEK设置->\"导入DKEK共享\"。"

#: ../hsm/import-keys-certs.rst:71
msgid "Choose DKEK share file location"
msgstr "选择DKEK共享文件的位置"

#: ../hsm/import-keys-certs.rst:73
msgid "Password for DKEK share"
msgstr "DKEK共享的密码"

#: ../hsm/import-keys-certs.rst:75
msgid "Right-click \"SmartCard-HSM\" -> \"Import from PKCS#12\""
msgstr "右键点击\"SmartCard-HSM\" -> \"从PKCS#12导入\"。"

#: ../hsm/import-keys-certs.rst:77
msgid "Enter number of shares -> 1"
msgstr "输入股票数量 -> 1"

#: ../hsm/import-keys-certs.rst:79
msgid "Enter file location of DKEK share"
msgstr "输入DKEK共享的文件位置"

#: ../hsm/import-keys-certs.rst:81
msgid "Enter Password for DKEK share"
msgstr "输入DKEK共享的密码"

#: ../hsm/import-keys-certs.rst:83
msgid "Select PKCS#12 container for import (Enter password, if set)"
msgstr "选择用于导入的PKCS#12容器（输入密码，如果设置了密码）。"

#: ../hsm/import-keys-certs.rst:85
msgid "Select Key"
msgstr "选择键"

#: ../hsm/import-keys-certs.rst:87
msgid "Select Name to be used (This is the Label used for the key on the device)"
msgstr "选择要使用的名称（这是在设备上用于钥匙的标签）。"

#: ../hsm/import-keys-certs.rst:89
msgid "Import more keys, if needed"
msgstr "如果需要，导入更多的钥匙"

#: ../hsm/import-keys-certs.rst:91
msgid ""
"Once this is done, you can check that the keys have been successfully "
"imported using:"
msgstr "一旦完成，你就可以通过以下方式检查钥匙是否已经成功导入。"

#: ../hsm/import-keys-certs.rst:98
msgid ""
"In the resulting output you will find the imported keys labeled by the "
"name you chose previously."
msgstr "在结果输出中，你会发现导入的钥匙被你之前选择的名称所标记。"

#: ../hsm/index.rst:2
msgid "Nitrokey HSM 2"
msgstr "Nitrokey HSM 2"

#: ../hsm/index.rst:6
msgid "First check the:"
msgstr "首先检查一下。"

#: ../hsm/index.rst:14
msgid "or choose your operating system:"
msgstr "或选择你的操作系统。"

#: ../hsm/linux/product_platform_heading.rst:3
msgid "(Nitrokey HSM 2 - Linux)"
msgstr "(Nitrokey HSM 2 - Linux)"

#: ../pro/linux/automatic-screen-lock.rst:2
msgid "Automatic Screen Lock at Removal"
msgstr "移除时的自动屏幕锁"

#: ../pro/linux/automatic-screen-lock.rst:8
msgid ""
"This guide will walk you through the configuration of your computer, to "
"automatically lock your session when you remove the Nitrokey."
msgstr "本指南将指导你完成电脑的配置，以便在你移除Nitrokey时自动锁定你的会话。"

#: ../pro/linux/automatic-screen-lock.rst:10
msgid ""
"The configuration requires the creation of two files under two different "
"directories."
msgstr "该配置要求在两个不同的目录下创建两个文件。"

#: ../pro/linux/automatic-screen-lock.rst:13
msgid "Requirements"
msgstr "要求"

#: ../pro/linux/automatic-screen-lock.rst:15
msgid ""
"Ubuntu 20.04 or Debian 10 (Buster), both with `Gnome Display Manager "
"<https://wiki.gnome.org/Projects/GDM>`_ installed."
msgstr ""
"Ubuntu 20.04或Debian 10（Buster），都安装了`Gnome显示管理器<https://wiki.gnome.org/"
"Projects/GDM>`_。"

#: ../pro/linux/automatic-screen-lock.rst:18
msgid "Nitrokey Pro 2, Nitrokey Storage 2, or Nitrokey HSM 2"
msgstr "Nitrokey Pro 2，Nitrokey Storage 2，或Nitrokey HSM 2"

#: ../pro/linux/automatic-screen-lock.rst:21
msgid "Configuration"
msgstr "配置"

#: ../pro/linux/automatic-screen-lock.rst:24
msgid "Create the ``.rules`` file"
msgstr "创建``.rules``文件。"

#: ../pro/linux/automatic-screen-lock.rst:26
msgid "With your favorite text editor create a file called ``85-nitrokey.rules``"
msgstr "用你最喜欢的文本编辑器创建一个名为``的文件，85-nitrokey.rules``。"

#: ../pro/linux/automatic-screen-lock.rst:32
msgid "Add the following line to the file"
msgstr "在文件中添加以下一行"

#: ../pro/linux/automatic-screen-lock.rst:38
msgid "Save the file and quit the editor."
msgstr "保存文件并退出编辑器。"

#: ../pro/linux/automatic-screen-lock.rst:40
msgid ""
"This file sets up a new hardware rule that executes the ``gnome-"
"screensaver-lock`` at removal of the Nitrokey device."
msgstr "这个文件设置了一个新的硬件规则，在移除Nitrokey设备时执行``gnome-screensaver-lock``。"

#: ../pro/linux/automatic-screen-lock.rst:42
msgid ""
"You should change the configuration according to the device you are using"
" as following:"
msgstr "你应该根据你所使用的设备改变配置，如下所示。"

#: ../pro/linux/automatic-screen-lock.rst:44
msgid "Nitrokey Pro: ``ENV{PRODUCT}==\"20a0/4108/101\"``"
msgstr "Nitrokey Pro。``ENV{PRODUCT}==\"20a0/4108/101\"``<"

#: ../pro/linux/automatic-screen-lock.rst:45
msgid "Nitrokey HSM: ``ENV{PRODUCT}==\"20a0/4230/101\"``"
msgstr "Nitrokey HSM: ``ENV{PRODUCT}==\"20a0/4230/101\"``。"

#: ../pro/linux/automatic-screen-lock.rst:46
msgid "Nitrokey Storage: ``ENV{PRODUCT}==\"20a0/4109/101\"``"
msgstr "硝基键存储。``ENV{PRODUCT}==\"20a0/4109/101\"``"

#: ../pro/linux/automatic-screen-lock.rst:49
msgid "Create the ``gnome-screensaver-lock`` script"
msgstr "创建``gnome-screensaver-lock``脚本。"

#: ../pro/linux/automatic-screen-lock.rst:51
msgid ""
"With your favorite text editor create a file called ``gnome-screensaver-"
"lock``"
msgstr "用你最喜欢的文本编辑器创建一个名为``的文件，gnome-screensaver-lock``。"

#: ../pro/linux/automatic-screen-lock.rst:57
msgid "Add the following text"
msgstr "添加以下文字"

#: ../pro/linux/automatic-screen-lock.rst:67
msgid ""
"In the first step, this script looks for the user-name of the gnome "
"session, i.e. ``user``."
msgstr "在第一步，这个脚本寻找gnome会话的用户名，即``user``。"

#: ../pro/linux/automatic-screen-lock.rst:69
msgid ""
"When it is called at Nitrokey removal, the script queries ``user``, "
"switches to its session, and locks the screen by prompting the screen-"
"saver screen."
msgstr "当它在移除Nitrokey时被调用，脚本查询``user``，切换到它的会话，并通过提示屏保画面锁定屏幕。"

#: ../pro/linux/automatic-screen-lock.rst:72
msgid "Execute the script"
msgstr "执行脚本"

#: ../pro/linux/automatic-screen-lock.rst:74
msgid ""
"Once all set up, execute the script once, and it will lock the screen. It"
" does not matter if the Nitrokey is plugged or not for this first "
"execution."
msgstr "一旦全部设置完毕，执行一次脚本，它就会锁定屏幕。在第一次执行时，硝基钥匙是否被插上并不重要。"

#: ../pro/linux/automatic-screen-lock.rst:77 ../pro/smime-outlook.rst:36
#: ../pro/smime-thunderbird.rst:45 ../pro/smime.rst:57
msgid "Usage"
msgstr "使用方法"

#: ../pro/linux/automatic-screen-lock.rst:79
msgid ""
"By now you can log back to your session by entering your password, and "
"(re)plug you Nitrokey if you did not do it before."
msgstr "现在，你可以通过输入密码登录到你的会话中，如果你以前没有这样做，可以（重新）插入你的Nitrokey。"

#: ../pro/linux/automatic-screen-lock.rst:81
msgid ""
"The next time(s) you unplug your Nitrokey from the computer, it will "
"automatically lock the screen."
msgstr "下次你从电脑上拔下Nitrokey时，它将自动锁定屏幕。"

#: ../pro/gpa.rst:2
msgid "Setup with Gnu Privacy Assistant (GPA)"
msgstr "用Gnu隐私助理（GPA）进行设置"

#: ../pro/gpa.rst:4
msgid ""
"This document describes how to use Gnu Privacy Assistant (GPA) to set up "
"the Nitrokey for its first usage."
msgstr "本文介绍了如何使用Gnu隐私助手（GPA）来设置Nitrokey的首次使用。"

#: ../pro/gpa.rst:6
msgid ""
"First you need to install Gnu Privacy Assistant (GPA). For Windows you "
"should download and install the `GPG4Win <https://www.gpg4win.org/>`_ "
"package which contains GPA. For Linux you should install the GPA package "
"of your distribution (e.g. on Ubuntu: sudo apt-get install gpa )."
msgstr ""
"首先，你需要安装Gnu隐私助理（GPA）。对于Windows，你应该下载并安装`GPG4Win <https://www.gpg4win.org/"
">`_软件包，其中包含GPA。对于Linux，你应该安装你的发行版的GPA包（例如，在Ubuntu：sudo apt-get install gpa ）。"

#: ../pro/gpa.rst:8
msgid ""
"Start GPA and select the Card Manager; either by pressing the icon at the"
" top or by choosing Card Manager in the Windows menu."
msgstr "启动GPA并选择卡片管理器；可以按顶部的图标或在Windows菜单中选择卡片管理器。"

#: ../pro/gpa.rst:13
msgid ""
"The window of the Card Manager will appear. Enter your salutation, name "
"and optional other information. While doing so you might be asked to "
"enter the admin PIN."
msgstr "将出现卡片管理器的窗口。输入你的问候语、姓名和可选的其他信息。在这样做的时候，你可能会被要求输入管理密码。"

#: ../pro/gpa.rst:18
msgid "Confirm this window and enter the admin PIN in the next window."
msgstr "确认这个窗口，并在下一个窗口输入管理密码。"

#: ../pro/gpa.rst:23
msgid ""
"In the Card Manager window you might need to scroll down until you see "
"the buttons to change the PINs. The term PIN is used interchangeable with"
" \"password\". Press the first button \"Change PIN\" in order to change "
"the user password. Read and confirm the following information window."
msgstr ""
"在卡片管理器窗口中，你可能需要向下滚动，直到你看到改变PIN的按钮。术语PIN与\"密码\"可以互换使用。按第一个按钮\"改变PIN\""
"，以改变用户密码。阅读并确认以下信息窗口。"

#: ../pro/gpa.rst:28
msgid ""
"Choose and enter your own PIN with a minimum length of six characters. "
"This PIN is required for the daily usage of the Nitrokey."
msgstr "选择并输入你自己的PIN码，长度至少为六个字符。在日常使用Nitrokey时，需要输入这个密码。"

#: ../pro/gpa.rst:33
msgid ""
"Go back to the Card Manager window in step three. This time you choose "
"the third button Change PIN in order to change the admin PIN. The admin "
"PIN is required to change the information on the Nitrokey and to change "
"the cryptographic keys. Proceed as described in steps four and five."
msgstr ""
"回到第三步的卡片管理器窗口。这一次，你选择第三个按钮 \"改变PIN\""
"，以改变管理PIN。要改变硝基钥匙上的信息和改变加密钥匙，就需要管理密码。按第四和第五步所述进行。"

#: ../pro/gpa.rst:35
msgid ""
"After changing both the user and the admin PIN, you are back in the Card "
"Manager window. Select \"Generate key\" in the \"Card\" menu."
msgstr "在改变了用户和管理员的PIN后，你又回到了卡片管理器窗口。在\"卡片\"菜单中选择\"生成密钥\"。"

#: ../pro/gpa.rst:40
msgid ""
"Enter your name and e-mail address. You should keep \"backup\" enabled in"
" order to create a backup file of your cryptographic keys. Optionally you"
" might select an expiration date for your cryptographic keys."
msgstr "输入你的姓名和电子邮件地址。你应该保持启用\"备份\"，以便为你的加密钥匙创建一个备份文件。您可以选择为您的密码钥匙选择一个到期日。"

#: ../pro/gpa.rst:45
msgid "Wait until the keys are generated successfully."
msgstr "等待，直到钥匙成功生成。"

#: ../pro/gpa.rst:50
msgid ""
"Enter a strong passphrase for your backup keys. We strongly recommend to "
"store the backup file on a separate storage(e.g. CD-ROM) and on a safe "
"location."
msgstr "为你的备份钥匙输入一个强密码。我们强烈建议将备份文件存储在一个单独的存储器（如CD-ROM）上，并放在一个安全的地方。"

#: ../pro/gpa.rst:55
msgid ""
"Congratulations, your Nitrokey is now ready to use. Please see the "
"`applications <https://www.nitrokey.com/documentation/applications>`_ "
"section for further information of its usage."
msgstr ""
"恭喜你，你的Nitrokey现在已经可以使用了。请参阅`应用<https://www.nitrokey.com/documentation/"
"applications>`_部分，了解更多使用信息。"

#: ../hsm/linux/index.rst:2
msgid "Nitrokey HSM with GNU/Linux"
msgstr "使用GNU/Linux的Nitrokey HSM"

#: ../hsm/linux/index.rst:13
msgid ""
"Install `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`_. You need at "
"least version 0.19. You can find recent builds for debian-based systems "
"like Ubuntu `here <https://github.com/Nitrokey/opensc-build>`_ if your "
"system does not have the newest version of OpenSC. Alternatively, install"
" `this <https://www.cardcontact.de/download/sc-hsm-starterkit.zip>`_ "
"driver (`source <https://github.com/CardContact/sc-hsm-embedded>`_)."
msgstr ""
"安装`OpenSC <https://github.com/OpenSC/OpenSC/wiki>`_。你至少需要0."
"19版本。你可以在`这里找到基于debian的系统的最新构建<https://github.com/Nitrokey/opensc-"
"build>`_，如果你的系统没有最新版本的OpenSC。或者，安装`这个<https://www.cardcontact.de/download/sc-"
"hsm-starterkit.zip>`_驱动程序（`source <https://github.com/CardContact/sc-hsm-"
"embedded>`_）。"

#: ../hsm/linux/index.rst:20 ../hsm/mac/index.rst:17
#: ../hsm/windows/index.rst:17
msgid ""
"Define SO-PIN and PIN of your own choices. See `these instructions "
"<https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM#initialize-the-"
"device>`_. Afterwards you can begin to `generate new keys "
"<https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM#generate-key-pair>`_."
msgstr ""
"定义你自己选择的SO-PIN和PIN。见`这些说明<https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM"
"#initialize-the-device>`_。之后你可以开始`生成新的钥匙<https://github.com/OpenSC/OpenSC/"
"wiki/SmartCardHSM#generate-key-pair>`_。"

#: ../hsm/linux/index.rst:25 ../hsm/mac/index.rst:22
#: ../hsm/windows/index.rst:22
msgid ""
"Your Nitrokey is now ready to use. `Checkout "
"<https://www.nitrokey.com/documentation/applications>`_ the various use "
"cases and supported applications."
msgstr ""
"你的Nitrokey现在已经可以使用了。`查看<https://www.nitrokey.com/documentation/"
"applications>`_的各种使用情况和支持的应用程序。"

#: ../hsm/pkcs11-url.rst:2
msgid "PKCS#11 URL Generation"
msgstr "PKCS#11 URL的生成"

#: ../hsm/pkcs11-url.rst:9
msgid ""
"Various applications use openssl to handle e.g., TLS certificates. This "
"concept mostly allows simply replacing a file-path (for the secret) with "
"a so-called **PKCS#11 URL** to use a secret from a e.g., Nitrokey."
msgstr ""
"各种应用程序使用openssl来处理例如TLS证书。这个概念主要允许简单地用所谓的**PKCS#11 "
"URL**替换文件路径（用于秘密），以使用来自例如Nitrokey的秘密。"

#: ../hsm/pkcs11-url.rst:16
msgid "ensure ``openssl`` is installed"
msgstr "确保``openssl``被安装。"

#: ../hsm/pkcs11-url.rst:18
msgid ""
"ensure ``openssl`` can use the PKCS#11 engine by installing ``libengine-"
"pkcs11-openssl``"
msgstr "确保``openssl``通过安装``libengine-pkcs11-openssl``可以使用 PKCS#11 引擎。"

#: ../hsm/pkcs11-url.rst:27
msgid "install ``opensc`` and ``gnutls-bin`` for necessary tools"
msgstr "安装``opensc`和``gnutls-bin``以获得必要的工具"

#: ../hsm/pkcs11-url.rst:29
msgid ""
"verify that your needed keys and/or certificates are available on your "
"Nitrokey using ``pkcs15-tool -D``"
msgstr "使用``pkcs15-tool -D``验证您需要的密钥和/或证书在您的Nitrokey上可用。"

#: ../hsm/pkcs11-url.rst:31
msgid ""
"if you want to use ECC keys/mechanisms through ``libengine-"
"pkcs11-openssl``, you'll have to ensure its version is at least 0.4.10"
msgstr "如果你想通过``libengine-pkcs11-openssl``使用ECC密钥/机制，你必须确保其版本至少为0.4.10"

#: ../hsm/pkcs11-url.rst:35
msgid "List and Generate PKCS#11 URLs"
msgstr "列表和生成PKCS#11 URLs"

#: ../hsm/pkcs11-url.rst:37
msgid "Use the following command to get a list of available tokens (Nitrokeys):"
msgstr "使用下面的命令来获得可用令牌的列表（Nitrokeys）。"

#: ../hsm/pkcs11-url.rst:44
msgid ""
"Choose the token (Nitrokey) URL you want to generate URL tokens for and "
"use it like this:"
msgstr "选择你想生成URL令牌（Nitrokey）的URL，并像这样使用它。"

#: ../hsm/pkcs11-url.rst:53
msgid ""
"If you inspect the tail of the URL you'll recognize: ``label``, ``id`` "
"and more, these can be partly removed as long as the necessary objects "
"can be uniquely identified using the resulting URL, see :doc:`TLS Apache2"
" Configuration<apache2-tls>` for an example using ``id`` only."
msgstr ""
"如果你检查URL的尾部，你会发现。``label``, ``id``等等，这些可以被部分删除，只要必要的对象可以通过生成的URL唯一识别，见:doc:`"
"TLS Apache2 Configuration<apache2-tls>` 对于一个只使用``id`` 的例子。"

#: ../pro/smime.rst:2
msgid "S/MIME Email Encryption"
msgstr "S/MIME电子邮件加密"

#: ../pro/smime-outlook.rst:9 ../pro/smime-thunderbird.rst:9 ../pro/smime.rst:9
msgid "Prerequisites"
msgstr "先决条件"

#: ../pro/smime.rst:11
msgid "There are two widely used standards for email encryption."
msgstr "目前有两种广泛使用的电子邮件加密标准。"

#: ../pro/smime.rst:13
msgid "OpenPGP/GnuPG is popular among individuals,"
msgstr "OpenPGP/GnuPG在个人中很受欢迎。"

#: ../pro/smime.rst:15
msgid "S/MIME/X.509 is mostly used by enterprises."
msgstr "S/MIME/X.509大多被企业使用。"

#: ../pro/smime.rst:17
msgid ""
"If you are in doubt which one to choose, you should use OpenPGP, see "
"`here <openpgp.html>`_. This page describes the usage of S/MIME email "
"encryption."
msgstr "如果你对选择哪一种有疑问，你应该使用OpenPGP，见`这里<openpgp.html>`_。本页介绍了S/MIME电子邮件加密的用法。"

#: ../pro/smime.rst:19
msgid ""
"You need to purchase a S/MIME certificate or may already got one by your "
"company. Furthermore, you need to install `OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki>`_ on your System. While GNU/Linux"
" users usually can install OpenSC over the package manager (e.g. ``sudo "
"apt install opensc`` on Ubuntu), macOS and Windows users can download the"
" installation files from the `OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki>`_ page."
msgstr ""
"你需要购买一个S/MIME证书，或者你的公司可能已经有了一个。此外，你需要在你的系统上安装`OpenSC <https://github.com/"
"OpenSC/OpenSC/wiki>`_。虽然GNU/Linux用户通常可以通过软件包管理器来安装OpenSC（例如：``sudo apt "
"install opensc``在Ubuntu上），但MacOS和Windows用户可以从`OpenSC<https://github.com/"
"OpenSC/OpenSC/wiki>`_页面下载安装文件。"

#: ../pro/smime-outlook.rst:17 ../pro/smime-thunderbird.rst:17
#: ../pro/smime.rst:22
msgid ""
"Windows users with 64-bit system (standard) need to install both, the "
"32-bit and the 64-bit version of OpenSC!"
msgstr "使用64位系统（标准）的Windows用户需要同时安装32位和64位版本的OpenSC!"

#: ../pro/smime.rst:25
msgid "Import Existing Key and Certificate"
msgstr "导入现有的密钥和证书"

#: ../pro/smime.rst:27
msgid ""
"The following instructions are based on the `wiki of OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki/OpenPGP-card>`_. We will assume, "
"that you already got a key-certificate pair as a .p12 file. Please have a"
" look at the wiki page, if you got a separate key and certificate file."
msgstr ""
"下面的说明是基于OpenSC的`wiki <https://github.com/OpenSC/OpenSC/wiki/OpenPGP-"
"card>`_。我们将假设你已经得到了一个作为.p12文件的密钥-证书对。如果你有一个单独的密钥和证书文件，请看一下wiki页面。"

#: ../pro/smime.rst:29
msgid ""
"To open the Windows command line please push the Windows-key and R-key. "
"Now type ‘cmd.exe’ in the text field and hit enter. To open a Terminal on"
" macOS or GNU/Linux please use the application search (e.g. spotlight on "
"macOS)."
msgstr ""
"要打开Windows命令行，请按下Windows键和R键。现在在文本字段中输入 \"cmd.exe \"并点击回车。要在macOS或GNU/"
"Linux上打开终端，请使用应用程序搜索（例如macOS的spotlight）。"

#: ../pro/smime.rst:31
msgid ""
"To make these commands as simple as possible, the .p12 file needs to be "
"in your home folder. On Windows this is usually ‘C:\\Users\\yourusername’"
" and on macOS and GNU/Linux system it will be ‘/home/yourusername’. If "
"you do not store the .p12 file there, you have to adapt the path in the "
"commands below. Please plug in the Nitrokey before submitting the "
"commands."
msgstr ""
"为了使这些命令尽可能简单，.p12文件需要放在你的主文件夹中。在Windows系统中，这通常是'C:\\Users\\yusername'，在macOS和"
"GNU/Linux系统中，它将是'/home/yourusername'。如果你没有把."
"p12文件存放在那里，你必须调整下面的命令中的路径。在提交命令之前，请插入Nitrokey。"

#: ../pro/smime.rst:33
msgid ""
"Assuming that your key-certificate file reads ‘myprivate.p12’ the "
"commands for Windows looks like this:"
msgstr "假设你的密钥证书文件是 \"myprivate.p12\"，Windows的命令看起来像这样。"

#: ../pro/smime.rst:40
msgid "and on macOS and GNU/Linux it will be"
msgstr "而在macOS和GNU/Linux上，它将是"

#: ../pro/smime.rst:47
msgid ""
"The two commands copy the key-certificate pair to the slot 2 (needed for "
"decrypting emails) and slot 3 (needed for signing). The output looks on "
"both systems something like this:"
msgstr "这两条命令将密钥-证书对复制到槽2（解密邮件需要）和槽3（签名需要）。在两个系统上的输出看起来都是这样的。"

#: ../pro/smime.rst:54
msgid ""
"Please note that there will be error messages that can be safely ignored "
"(see output example above). You now have the key-certificate pair loaded "
"on the Nitrokey."
msgstr "请注意，会有一些可以安全忽略的错误信息（见上面的输出例子）。现在你已经在Nitrokey上加载了钥匙-证书对。"

#: ../pro/smime.rst:59
msgid "You can find further information about the usage on these pages:"
msgstr "你可以在这些网页上找到有关使用的进一步信息。"

#: ../pro/smime.rst:61
msgid "for using `S/MIME encryption on Thunderbird <smime-thunderbird.html>`_"
msgstr "用于在Thunderbird上使用`S/MIME加密<smime-thunderbird.html>`_。"

#: ../pro/smime.rst:64
msgid "for using `S/MIME encryption on Outlook <smime-outlook.html>`_"
msgstr "用于在Outlook上使用`S/MIME加密<smime-outlook.html>`_。"

#: ../pro/smime.rst:67
msgid ""
"for using `Evolution <https://help.gnome.org/users/evolution/stable/mail-"
"encryption.html.en>`_, an email client for the Gnome Desktop on Linux "
"systems"
msgstr ""
"为使用`Evolution <https://help.gnome.org/users/evolution/stable/mail-encryption."
"html.en>`_，Linux系统上Gnome桌面的电子邮件客户端。"

#: ../pro/smime.rst:72
msgid "Troubleshooting"
msgstr "故障排除"

#: ../pro/smime.rst:74
msgid ""
"On Windows: Did you install **both**, the 32-bit and the 64-bit version "
"of OpenSC?"
msgstr "在Windows上。你是否同时安装了***，32位和64位版本的OpenSC？"

#: ../pro/smime.rst:77
msgid ""
"Nitrokey Storage 2: You need to install OpenSC in version 0.18 or higher."
" You can find the files on the `OpenSC website "
"<https://github.com/OpenSC/OpenSC/releases>`_ for Windows and macOS user "
"or `here <https://github.com/Nitrokey/opensc-build>`_ for Debian/Ubuntu "
"users."
msgstr ""
"Nitrokey Storage 2: 你需要安装0.18或更高版本的OpenSC。你可以在`OpenSC网站<https://github.com/"
"OpenSC/OpenSC/releases>`_为Windows和macOS用户找到这些文件，或者`这里<https://github.com/"
"Nitrokey/opensc-build>`_为Debian/Ubuntu用户。"

#: ../pro/smime-outlook.rst:2
msgid "S/MIME Email Encryption with Outlook"
msgstr "使用Outlook的S/MIME电子邮件加密"

#: ../pro/smime-outlook.rst:11
msgid ""
"If you do not have a S/MIME key-certificate pair installed on your "
"Nitrokey yet, please look at `this page <smime.html>`_ first."
msgstr "如果你的Nitrokey上还没有安装S/MIME密钥-证书对，请先看`这个页面<smime.html>`_。"

#: ../pro/smime-outlook.rst:13
msgid ""
"You need to have OpenSC installed on your System. Please have a look at "
"the `wiki page of the OpenSC project "
"<https://github.com/OpenSC/OpenSC/wiki>`_."
msgstr ""
"你需要在你的系统上安装OpenSC。请看看OpenSC项目的`wiki页面<https://github.com/OpenSC/OpenSC/"
"wiki>`_。"

#: ../pro/smime-outlook.rst:21
msgid "Settings in Outlook"
msgstr "Outlook中的设置"

#: ../pro/smime-outlook.rst:23
msgid ""
"Before you can use the Nitrokey in Outlook you have to activate S/MIME "
"encryption. You can achieve this by clicking on to ‘Start’ -> ‘Options’ "
"and clicking on ‘Trust Center’ in the options window. In section ‘Email "
"Security’ you can choose your S/MIME identity. Your certificate should "
"already be recognized by Outlook."
msgstr ""
"在Outlook中使用Nitrokey之前，你必须先激活S/"
"MIME加密功能。你可以通过点击'开始'->'选项'并在选项窗口中点击'信任中心'来实现这一目标。在'电子邮件安全'部分，你可以选择你的S/"
"MIME身份。你的证书应该已经被Outlook所识别。"

#: ../pro/smime-outlook.rst:38
msgid ""
"When composing a mail you can now choose to encrypt and sign the message "
"in the ‘Options’ ribbon of the compose window."
msgstr "在撰写邮件时，你现在可以在撰写窗口的 \"选项 \"功能区选择对邮件进行加密和签名。"

#: ../pro/smime-outlook.rst:45
msgid ""
"Outlook will only encrypt message to mail addresses which are saved in "
"your address book. So make sure, that the persons you want to write an "
"encrypted mail to have an entry in Outlook’s contacts. You can ask the "
"person to write you a signed mail, so that you can import the certificate"
" information."
msgstr ""
"Outlook只对保存在通讯录中的邮件地址进行加密。因此，请确保你想写加密邮件的人在Outlook的联系人中拥有一个条目。你可以要求对方给你写一封签名邮件"
"，这样你就可以导入证书信息。"

#: ../pro/smime-outlook.rst:47
msgid ""
"Depending on your certificate or the certificate of your partners you may"
" have to import a so-called root certificate. This is the certificate of "
"the party which issued the certificate you or your partner uses. You "
"should usually got informed if this is necessary."
msgstr "根据你的证书或你的合作伙伴的证书，你可能必须导入一个所谓的根证书。这是签发你或你的伙伴使用的证书的一方的证书。如果有必要，你通常应该得到通知。"

#: ../pro/smime-thunderbird.rst:2
msgid "S/MIME Email Encryption with Thunderbird"
msgstr "使用雷鸟的S/MIME电子邮件加密"

#: ../pro/smime-thunderbird.rst:11
msgid ""
"If you do not have a S/MIME key-certificate pair installed on your "
"Nitrokey yet or if you did not installed OpenSC, please look at `this "
"page <smime.html>`_ first."
msgstr "如果你的Nitrokey上还没有安装S/MIME密钥-证书对，或者你没有安装OpenSC，请先看`这个页面<smime.html>`_。"

#: ../pro/smime-thunderbird.rst:13
msgid ""
"You need to have `OpenSC installed "
"<https://github.com/OpenSC/OpenSC/wiki>`_ on your System. While GNU/Linux"
" users usually can install OpenSC over the package manager (e.g. ``sudo "
"apt update && sudo apt install opensc`` on Ubuntu), macOS and Windows "
"users can download the installation files from OpenSC directly."
msgstr ""
"你需要在你的系统上安装`OpenSC <https://github.com/OpenSC/OpenSC/wiki>`_。虽然GNU/"
"Linux用户通常可以通过软件包管理器来安装OpenSC（例如：``sudo apt update && sudo apt install "
"opensc``在Ubuntu上），但macOS和Windows用户可以直接从OpenSC下载安装文件。"

#: ../pro/smime-thunderbird.rst:21
msgid "Settings in Thunderbird"
msgstr "雷鸟中的设置"

#: ../pro/smime-thunderbird.rst:23
msgid ""
"Before you can use the Nitrokey in Thunderbird you have to activate "
"S/MIME encryption in the account settings. You can achieve this by "
"clicking on the menu and go to ‘Preferences’ -> ‘Account Settings’ and "
"clicking on ‘Security’ in the account settings window."
msgstr ""
"在雷鸟中使用Nitrokey之前，您必须在账户设置中激活S/MIME加密。你可以通过点击菜单，进入 \"偏好\"-> \"账户设置\"，"
"并在账户设置窗口中点击 \"安全 \"来实现。"

#: ../pro/smime-thunderbird.rst:30
msgid ""
"Click on “Security Devices” to import the right PCKS11 module. Click on "
"“Load” on the right-hand side. Now give the Module a name (like “OpenSC "
"Module”) and click on “Browse” to choose the location of the Module (see "
"below)."
msgstr ""
"点击 \"安全设备\"，导入正确的PCKS11模块。点击右侧的 \"加载\"。现在给模块起个名字（比如 \"OpenSC模块\"），并点击 \"浏览 "
"\"选择模块的位置（见下文）。"

#: ../pro/smime-thunderbird.rst:37
msgid ""
"On Windows the right file lays under “C:\\Windows\\System32\\opensc-"
"pkcs11.dll”. On macOS and GNU/Linux the file should be in “/lib/pkcs11"
"/opensc-pkcs11.so” or “/usr/lib/pkcs11/opensc-pkcs11.so” or alike. Press "
"“OK” twice and you are back in security section of the account settings. "
"Now you can actually choose a certificate on the upper part of the "
"window. You should get asked for a PIN to unlock your Nitrokey. Please "
"type in your User PIN."
msgstr ""
"在 Windows 上，正确的文件位于 \"C:\\Windows\\System32\\opensc-pkcs11.dll \"下。在MacOS和"
"GNU/Linux上，该文件应该在\"/lib/pkcs11/opensc-pkcs11.so \"或\"/usr/lib/pkcs11/opensc-"
"pkcs11.so \"或类似的地方。按两次 \"确定\""
"，你就回到了账户设置的安全部分。现在你可以在窗口的上部选择一个证书。你应该被要求输入密码以解锁你的Nitrokey。请键入你的用户密码。"

#: ../pro/smime-thunderbird.rst:47
msgid ""
"When composing an email you can now choose to encrypt and sign the "
"message."
msgstr "在撰写电子邮件时，你现在可以选择对邮件进行加密和签名。"

#: ../hsm/mac/product_platform_heading.rst:3
msgid "(Nitrokey HSM 2 - macOS)"
msgstr "(Nitrokey HSM 2 - macOS)"

#: ../hsm/mac/index.rst:2
msgid "Nitrokey HSM with macOS"
msgstr "带有MacOS的Nitrokey HSM"

#: ../hsm/mac/index.rst:13 ../hsm/windows/index.rst:13
msgid ""
"Install `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`_. Alternatively,"
" install `this <https://www.cardcontact.de/download/sc-hsm-"
"starterkit.zip>`_ driver (`source <https://github.com/CardContact/sc-hsm-"
"embedded>`_)."
msgstr ""
"安装`OpenSC <https://github.com/OpenSC/OpenSC/wiki>`_。或者，安装`这个<https://www."
"cardcontact.de/download/sc-hsm-starterkit.zip>`_驱动程序（`source <https://github."
"com/CardContact/sc-hsm-embedded>`_）。"

#: ../hsm/windows/product_platform_heading.rst:3
msgid "(Nitrokey HSM 2 - Windows)"
msgstr "(Nitrokey HSM 2 - Windows)"

#: ../hsm/windows/index.rst:2
msgid "Nitrokey HSM with Windows"
msgstr "使用Windows的Nitrokey HSM"

#: ../pro/smart-policy.rst:2
msgid "Login to Windows Domain Computers With MS Active Directory"
msgstr "用MS Active Directory登录Windows域计算机"

#: ../pro/smart-policy.rst:8
msgid ""
"Download and install the latest `OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki>`_."
msgstr "下载并安装最新的`OpenSC <https://github.com/OpenSC/OpenSC/wiki>`_。"

#: ../pro/smart-policy.rst:10
msgid ""
"Use a text editor to add the following settings to *C:\\Program "
"Files:\\OpenSC Project\\OpenSC\\opensc.conf*."
msgstr ""
"使用文本编辑器将以下设置添加到*C:\\Program Files:\\OpenSC Project\\OpenSC\\opensc.conf*。"

#: ../pro/smart-policy.rst:49
msgid ""
"Open a command terminal and enter “regedit”. Use regedit to import `this "
"file <https://www.nitrokey.com/sites/default/files/nk-hsm.reg>`_."
msgstr ""
"打开一个命令终端，输入 \"regedit\"。使用regedit导入`这个文件<https://www.nitrokey.com/sites/"
"default/files/nk-hsm.reg>`_。"

#: ../pro/smart-policy.rst:52
msgid ""
"Now you can enroll Nitrokeys for your users managed in Microsoft Active "
"Directory. You may either use Microsoft PKI, `gpgsm "
"<https://www.gnupg.org/documentation/manuals/gnupg/Howto-Create-a-Server-"
"Cert.html>`_, or `Smart Policy <https://www.mysmartlogon.com/products"
"/smart-policy.html>`_. The following steps describe the usage of Smart "
"Policy."
msgstr ""
"现在你可以为你在微软活动目录中管理的用户注册Nitrokeys。你可以使用微软的PKI，`gpgsm <https://www.gnupg.org/"
"documentation/manuals/gnupg/Howto-Create-a-Server-Cert.html>`_，或者`Smart "
"Policy <https://www.mysmartlogon.com/products/smart-policy."
"html>`_。下面的步骤描述了智能策略的用法。"

#: ../pro/smart-policy.rst:58
msgid ""
"`Download "
"<http://download.mysmartlogon.com/SmartPolicyv2/SmartPolicy%20-%20Stage%203.exe>`_"
" and install Smart Policy."
msgstr ""
"`下载<http://download.mysmartlogon.com/SmartPolicyv2/"
"SmartPolicy%20-%20Stage%203.exe>`_并安装Smart Policy。"

#: ../pro/smart-policy.rst:60
msgid "Select “Read a smart card”"
msgstr "选择 \"读取智能卡\""

#: ../pro/smart-policy.rst:67
msgid "Select the certificate, mapping, and user."
msgstr "选择证书、映射和用户。"

#: ../pro/smart-policy.rst:74
msgid "Verify the device status via CRL."
msgstr "通过CRL验证设备状态。"

#: ../pro/smart-policy.rst:81
msgid "Choose a Group Policy Object (GPO)."
msgstr "选择一个组策略对象（GPO）。"

#: ../pro/smart-policy.rst:88
msgid "Confirm applying the mapping."
msgstr "确认应用该映射。"

#: ../pro/smart-policy.rst:95
msgid ""
"From now on, when logging on to your Windows computer you need to connect"
" the Nitrokey and enter your PIN."
msgstr "从现在起，在登录Windows电脑时，你需要连接Nitrokey并输入密码。"
