# SOME DESCRIPTIVE TITLE.
# Copyright (C) Nitrokey
# This file is distributed under the same license as the Nitrokey
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version: Nitrokey Documentation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-06 15:59+0100\n"
"PO-Revision-Date: 2022-01-26 11:18+0000\n"
"Last-Translator: Ben (Weblate Admin) <ben@dotplex.com>\n"
"Language-Team: Chinese (Simplified) <https://translate.nitrokey.com/projects/"
"nitrokey-documentation/documentation-storage/zh_Hans/>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.10.1\n"
"Generated-By: Babel 2.6.0\n"

#: ../storage/factory-reset.rst:2
msgid "Factory Reset"
msgstr "工厂重置"

#: ../storage/factory-reset.rst:8
msgid "There are two types of factory resets for Nitrokey Storage devices:"
msgstr "Nitrokey存储设备有两种类型的出厂重置。"

#: ../storage/factory-reset.rst:10
msgid ""
"a factory reset of the OpenPGP smart card, for example using ``gpg "
"--card-edit``, followed by ``admin`` and finally: ``factory-reset``"
msgstr ""
"对OpenPGP智能卡进行出厂重置，例如使用``gpg --card-edit`，然后是``admin```，最后。``factory-reset``。"

#: ../storage/factory-reset.rst:12
msgid "a factory reset of the entire Nitrokey device using the Nitrokey App."
msgstr "使用Nitrokey应用程序对整个Nitrokey设备进行出厂重置。"

#: ../storage/factory-reset.rst:14
msgid ""
"Also, it is possible to generate a new AES key that is used to encrypt "
"the Password Safe and the Encrypted Volume without performing a factory "
"reset."
msgstr "此外，还可以生成一个新的AES密钥，用于加密密码保险箱和加密卷，而无需执行出厂重置。"

#: ../storage/factory-reset.rst:19
msgid ""
"The Nitrokey App always generates a new AES key after performing a "
"factory reset."
msgstr "Nitrokey应用程序在执行出厂重置后总是会生成一个新的AES密钥。"

#: ../storage/factory-reset.rst:22
msgid ""
"The following table describes the differences between these three "
"operations:"
msgstr "下表描述了这三种操作之间的区别。"

#: ../storage/factory-reset.rst:25
msgid "Property"
msgstr "财产"

#: ../storage/factory-reset.rst:25
msgid "OpenPGP factory reset"
msgstr "OpenPGP工厂重置"

#: ../storage/factory-reset.rst:25
msgid "Nitrokey factory reset"
msgstr "硝基钥匙工厂重置"

#: ../storage/factory-reset.rst:25
msgid "Generate AES key"
msgstr "生成AES密钥"

#: ../storage/factory-reset.rst:27
msgid "Requires admin PIN"
msgstr "需要管理员密码"

#: ../storage/factory-reset.rst:27 ../storage/factory-reset.rst:28
#: ../storage/factory-reset.rst:30
msgid "no"
msgstr "不"

#: ../storage/factory-reset.rst:27 ../storage/factory-reset.rst:28
#: ../storage/factory-reset.rst:29 ../storage/factory-reset.rst:30
msgid "yes"
msgstr "是"

#: ../storage/factory-reset.rst:28
msgid "Destroys OpenPGP keys"
msgstr "销毁OpenPGP密钥"

#: ../storage/factory-reset.rst:29
msgid "Destroys Password Safe"
msgstr "破坏密码保险箱"

#: ../storage/factory-reset.rst:29 ../storage/factory-reset.rst:31
msgid "yes [1]_"
msgstr "是[1]_"

#: ../storage/factory-reset.rst:30
msgid "Destroys One-Time Passwords"
msgstr "破坏一次性密码"

#: ../storage/factory-reset.rst:30
msgid "yes [2]_"
msgstr "是[1]_"

#: ../storage/factory-reset.rst:31
msgid "Destroys Encrypted Volume"
msgstr "销毁加密卷"

#: ../storage/factory-reset.rst:34
msgid "Clears the encryption key without overwriting the encrypted data."
msgstr "清除加密密钥而不覆盖加密数据。"

#: ../storage/factory-reset.rst:35
msgid "This is expected to change in new Nitrokey Storage firmware versions."
msgstr "预计这将在新的Nitrokey存储固件版本中发生变化。"

#: ../storage/faq.rst:2
msgid "Nitrokey Storage FAQ"
msgstr "尼特罗基存储常见问题"

#: ../storage/faq.rst:4
msgid ""
"As the Nitrokey Storage 2 is essentially a Nitrokey Pro 2 including a "
"non-volatile (encrypted) storage, the :doc:`Nitrokey Pro 2 FAQ "
"<../pro/faq>` also partly applies."
msgstr ""
"由于Nitrokey Storage 2本质上是一个包括非易失性（加密）存储的Nitrokey Pro 2，所以:doc:`Nitrokey Pro 2 "
"FAQ <./pro/faq>`也部分适用。"

#: ../shared-faqs/nitrokeys.rst:2
msgid "**Q:** Which Operating Systems are supported?"
msgstr "**问：**支持哪些操作系统？"

#: ../shared-faqs/nitrokeys.rst:2
msgid "Windows, Linux, and Mac OS X."
msgstr "Windows、Linux和Mac OS X。"

#: ../shared-faqs/nitrokeys.rst:5
msgid "**Q:** What can I use the Nitrokey for?"
msgstr "**问：**我可以用硝基钥匙做什么？"

#: ../shared-faqs/nitrokeys.rst:5
msgid "See the `frontpage`_ for an overview of supported use cases."
msgstr "请参阅`frontpage`_以了解支持的用例概述。"

#: ../storage/faq.rst:16
msgid "**Q:** What are the default PINs?"
msgstr "**问：**默认的PIN码是什么？"

#: ../storage/faq.rst:10
msgid "**User PIN:** \"123456\""
msgstr "**用户密码：**\"123456\"。"

#: ../storage/faq.rst:11
msgid "**Administrator PIN:** \"12345678\""
msgstr "**管理员密码：** \"12345678\"。"

#: ../storage/faq.rst:12
msgid "**Firmware Password**: \"12345678\""
msgstr "**固件密码**：\"12345678\"。"

#: ../storage/faq.rst:14
msgid ""
"We strongly recommend to change these PINs/password to user-chosen values"
" before using the Nitrokey."
msgstr "我们强烈建议在使用Nitrokey之前，将这些PINs/密码改为用户选择的值。"

#: ../storage/faq.rst:20
msgid "**Q:** How large is the storage capacity?"
msgstr "**问：**存储容量有多大？"

#: ../storage/faq.rst:19
msgid ""
"Nitrokey Storage can store and encrypt 8, 32, or 64 GB of data (depending"
" on particular model)."
msgstr "Nitrokey Storage可以存储和加密8、32或64GB的数据（取决于特定的型号）。"

#: ../shared-faqs/pins.rst:11
msgid "**Q:** What is the maximum length of the PIN?"
msgstr "**问：**密码的最大长度是多少？"

#: ../shared-faqs/pins.rst:3
msgid ""
"Nitrokey uses PINs instead of passwords. The main difference is that the "
"hardware limits the amount of tries to three while a limit doesn't exist "
"for passwords. Because of this, a short PIN is still secure and there is "
"not need to choose a long and complex PIN."
msgstr ""
"Nitrokey使用PIN码而不是密码。主要区别在于，硬件将尝试的次数限制为三次，而密码则不存在限制。正因为如此，一个简短的PIN码仍然是安全的，没有必要"
"选择一个长而复杂的PIN码。"

#: ../shared-faqs/pins.rst:8
msgid ""
"Nitrokey Storage's PINs can be up to 20 digits long and can consist of "
"numbers, characters and special characters. Note: When using GnuPG or "
"OpenSC, 32 character long PINs can be used but aren't supported by "
"Nitrokey App."
msgstr ""
"Nitrokey "
"Storage的PIN码可长达20位，可由数字、字符和特殊字符组成。注意：当使用GnuPG或OpenSC时，可以使用32个字符的PIN码，"
"但不被Nitrokey App支持。"

#: ../shared-faqs/pins.rst:22
msgid "**Q:** What is the User PIN for?"
msgstr "**问：**用户密码是什么？"

#: ../shared-faqs/pins.rst:14
msgid ""
"The user PIN is at least 6-digits long and is used to get access to the "
"contect of the Nitrokey. This is the PIN you will use a lot in every day "
"use e.g. for decrypting messages, for unlocking your encrypted storage "
"(NK Storage only) etc."
msgstr ""
"用户PIN码至少有6位数，用于进入Nitrokey的保护范围。这是你在日常使用中经常用到的密码，例如解密信息、解锁加密的存储空间（仅限NK存储）等。"

#: ../shared-faqs/pins.rst:19
msgid ""
"The user PIN can have up to 20 digits and other characters (e.g. "
"alphabetic and special characters). But as the user PIN is blocked as "
"soon three wrong PIN attempts were done, it is sufficiently secure to "
"only have a 6 digits PIN. The default PIN is 123456."
msgstr ""
"用户密码可以有多达20位数字和其他字符（如字母和特殊字符）。但是，由于用户的PIN码在三次错误的PIN码尝试后就会被阻止，所以只有6位数的PIN码就足够安"
"全了。默认的PIN码是123456。"

#: ../shared-faqs/pins.rst:34
msgid "**Q:** What is the Admin PIN for?"
msgstr "**问：**管理密码是用来做什么的？"

#: ../shared-faqs/pins.rst:25
msgid ""
"The admin PIN is at least 8-digits long and is used to change "
"contents/settings of the Nitrokey. That is to say after initializing the "
"Nitrokey you probably won't need this PIN too often (e.g. if you want to "
"add another password to the password safe of the Nitrokey Pro or Nitrokey"
" Storage)."
msgstr ""
"管理密码至少有8位数，用于改变硝基钥匙的内容/设置。也就是说，在初始化Nitrokey后，你可能不会经常需要这个PIN码（例如，"
"如果你想在Nitrokey Pro或Nitrokey Storage的密码箱中添加另一个密码）。"

#: ../shared-faqs/pins.rst:31
msgid ""
"The admin PIN can have up to 20 digits and other characters (e.g. "
"alphabetic and special characters). But as the admin PIN is blocked as "
"soon three wrong PIN attempts were done, it is sufficiently secure to "
"only have 8 digits PIN. The default PIN is 12345678."
msgstr ""
"管理密码最多可以有20位数字和其他字符（如字母和特殊字符）。但是，由于只要有三次错误的PIN尝试，管理PIN就会被阻止，所以只有8位数的PIN就足够安全了"
"。默认的PIN码是12345678。"

#: ../storage/faq.rst:28
msgid ""
"**Q:** Why does my Nitrokey Storage hang when switching between nitrokey-"
"app and GnuPG?"
msgstr "**问：**为什么在nitrokey-app和GnuPG之间切换时，我的Nitrokey存储会挂起？"

#: ../storage/faq.rst:26
msgid ""
"GnuPG and nitrokey-app sometimes tend to hand each other. This is a known"
" problem and it can be fixed by re-inserting the Nitrokey into the USB "
"slot."
msgstr "GnuPG和nitrokey-app有时会互相牵制。这是一个已知的问题，它可以通过将硝基钥匙重新插入USB插槽来解决。"

#: ../storage/faq.rst:39
msgid "**Q:** What is the firmware PIN for?"
msgstr "**问：**固件的PIN码是什么？"

#: ../storage/faq.rst:31
msgid ""
"The firmware password should meet general password recommandations (e.g. "
"use alphabetic characters, digits and special characters or use a "
"usfficiently long password). The firmware password is needed to update "
"the firmware of the Nitrokey Storage. See further instructions for update"
" process here."
msgstr ""
"固件密码应符合一般的密码建议（例如，使用字母、数字和特殊字符或使用足够长的密码）。更新Nitrokey存储器的固件时需要固件密码。请参阅更新过程的进一步说"
"明。"

#: ../storage/faq.rst:37
msgid ""
"The firmware password is never blocked. An attacker could try to guess "
"the password and would have unlimited attempts. Therefore you must choose"
" a strong password. The default password is 12345678."
msgstr "固件密码永远不会被封锁。攻击者可以尝试猜测密码，而且会有无限次的尝试。因此，你必须选择一个强大的密码。默认的密码是12345678。"

#: ../storage/faq.rst:44
msgid "**Q:** How many keys can I store?"
msgstr "**问：**我可以存储多少个钥匙？"

#: ../storage/faq.rst:42
msgid ""
"The Nitrokey Storage can store three RSA key pairs. All keys use the same"
" identity but are used for different purposes: authentication, encryption"
" and signing."
msgstr "Nitrokey存储器可以存储三个RSA密钥对。所有的钥匙都使用相同的身份，但用于不同的目的：认证、加密和签名。"

#: ../storage/faq.rst:52
msgid "**Q:** How fast is encryption and signing?"
msgstr "**问：**加密和签名的速度如何？"

#: ../storage/faq.rst:47
msgid "Encryption of 50kiB of data:"
msgstr "对50kiB的数据进行加密。"

#: ../storage/faq.rst:49
msgid "256 bit AES, 2048 bytes per command -> 880 bytes per second"
msgstr "256位AES，每条命令2048字节 -> 每秒880字节"

#: ../storage/faq.rst:50
msgid "128 bit AES, 2048 bytes per command -> 893 bytes per second"
msgstr "128位AES，每条命令2048字节 -> 每秒893字节"

#: ../storage/faq.rst:51
msgid "256 bit AES, 240 bytes per command -> 910 bytes per second"
msgstr "256位AES，每个命令240字节 -> 每秒910字节"

#: ../storage/faq.rst:52
msgid "128 bit AES, 240 bytes per command -> 930 bytes per second"
msgstr "128位AES，每条命令240字节 -> 每秒930字节"

#: ../shared-faqs/algos.rst:3
msgid "**Q:** Which algorithms and maximum key length are supported?"
msgstr "**问：**支持哪些算法和最大密钥长度？"

#: ../shared-faqs/algos.rst:3
msgid "See the following table:"
msgstr "见下表。"

#: ../pro/openpgp-keygen-backup.rst:84 ../pro/openpgp-keygen-on-device.rst:193
#: ../shared-faqs/algos.rst:6
msgid "Start"
msgstr "开始"

#: ../pro/openpgp-keygen-backup.rst:84 ../pro/openpgp-keygen-on-device.rst:193
#: ../shared-faqs/algos.rst:6
msgid "Pro + Storage"
msgstr "专业+存储"

#: ../pro/openpgp-keygen-backup.rst:84 ../pro/openpgp-keygen-on-device.rst:193
#: ../shared-faqs/algos.rst:6
msgid "Pro 2 + Storage 2"
msgstr "专业2+存储2"

#: ../shared-faqs/algos.rst:6
msgid "HSM"
msgstr "HSM"

#: ../shared-faqs/algos.rst:6
msgid "HSM2"
msgstr "HSM2"

#: ../pro/openpgp-keygen-backup.rst:86 ../pro/openpgp-keygen-on-device.rst:195
#: ../shared-faqs/algos.rst:8
msgid "rsa1024"
msgstr "rsa1024"

#: ../pro/openpgp-keygen-backup.rst:86 ../pro/openpgp-keygen-backup.rst:87
#: ../pro/openpgp-keygen-backup.rst:88 ../pro/openpgp-keygen-backup.rst:89
#: ../pro/openpgp-keygen-backup.rst:90 ../pro/openpgp-keygen-backup.rst:91
#: ../pro/openpgp-keygen-backup.rst:92 ../pro/openpgp-keygen-backup.rst:93
#: ../pro/openpgp-keygen-on-device.rst:195
#: ../pro/openpgp-keygen-on-device.rst:196
#: ../pro/openpgp-keygen-on-device.rst:197
#: ../pro/openpgp-keygen-on-device.rst:198
#: ../pro/openpgp-keygen-on-device.rst:199
#: ../pro/openpgp-keygen-on-device.rst:200
#: ../pro/openpgp-keygen-on-device.rst:201
#: ../pro/openpgp-keygen-on-device.rst:202 ../shared-faqs/algos.rst:8
#: ../shared-faqs/algos.rst:10 ../shared-faqs/algos.rst:12
#: ../shared-faqs/algos.rst:14 ../shared-faqs/algos.rst:16
#: ../shared-faqs/algos.rst:18 ../shared-faqs/algos.rst:20
#: ../shared-faqs/algos.rst:22 ../shared-faqs/algos.rst:24
#: ../shared-faqs/algos.rst:26 ../shared-faqs/algos.rst:28
#: ../shared-faqs/algos.rst:30 ../shared-faqs/algos.rst:32
#: ../shared-faqs/algos.rst:34
msgid "✓"
msgstr ""

#: ../pro/openpgp-keygen-backup.rst:87 ../pro/openpgp-keygen-on-device.rst:196
#: ../shared-faqs/algos.rst:10
msgid "rsa2048"
msgstr "rsa2048"

#: ../pro/openpgp-keygen-backup.rst:88 ../pro/openpgp-keygen-on-device.rst:197
#: ../shared-faqs/algos.rst:12
msgid "rsa3072"
msgstr "rsa3072"

#: ../pro/openpgp-keygen-backup.rst:89 ../pro/openpgp-keygen-on-device.rst:198
#: ../shared-faqs/algos.rst:14
msgid "rsa4096"
msgstr "rsa4096"

#: ../shared-faqs/algos.rst:16
msgid "curve25519"
msgstr "曲线25519"

#: ../shared-faqs/algos.rst:18
msgid "NIST-P 192"
msgstr "NIST-P 192"

#: ../shared-faqs/algos.rst:20
msgid "NIST-P 256"
msgstr "NIST-P 256"

#: ../shared-faqs/algos.rst:22
msgid "NIST-P 384-521"
msgstr "NIST-P 384-521"

#: ../shared-faqs/algos.rst:24
msgid "Brainpool 192"
msgstr "脑池192"

#: ../shared-faqs/algos.rst:26
msgid "Brainpool 256-320"
msgstr "脑库 256-320"

#: ../shared-faqs/algos.rst:28
msgid "Brainpool 384-521"
msgstr "脑库 384-521"

#: ../shared-faqs/algos.rst:30
msgid "secp192"
msgstr "secp192"

#: ../shared-faqs/algos.rst:32
msgid "secp256"
msgstr "secp256"

#: ../shared-faqs/algos.rst:34
msgid "secp521"
msgstr "secp521"

#: ../storage/faq.rst:57
msgid ""
"**Q:** Does the Nitrokey Storage contain a secure chip or just a normal "
"microcontroller?"
msgstr "**问：**尼特罗基存储器是否包含安全芯片或只是一个普通的微控制器？"

#: ../storage/faq.rst:57
msgid "Nitrokey Storage contains a tamper resistant smart card."
msgstr "Nitrokey存储器包含一个防篡改的智能卡。"

#: ../storage/faq.rst:65
msgid "**Q:** Is the Nitrokey Storage Common Criteria or FIPS certified?"
msgstr "**问：**Nitrokey存储系统是否经过通用标准或FIPS认证？"

#: ../storage/faq.rst:60
msgid ""
"`Cure53`_ has performed an `independent security audit`_ of the hardware,"
" firmware, and Nitrokey App. The security controler's hardware is Common "
"Criteria certified (`Report`_; See `here`_, click \"ICs, Smart Cards and "
"Smart Card-Related Devices and Systems\" and search for \"NXP Smart Card "
"Controller P5CD081V1A and its major configurations P5CC081V1A, "
"P5CN081V1A, P5CD041V1A, P5CD021V1A and P5CD016V1A each with IC dedicated "
"Software\")."
msgstr ""
"`Cure53`_已经对硬件、固件和Nitrokey应用程序进行了`独立的安全审计`_。安全控制器的硬件通过了通用标准认证（`报告`_；见`这里`_，"
"点击\"集成电路、智能卡和智能卡相关的设备和系统\"。并搜索\"恩智浦智能卡控制器P5CD081V1A及其主要配置P5CC081V1A"
"、P5CN081V1A、P5CD041V1A、P5CD021V1A和P5CD016V1A各自的IC专用软件\"）。"

#: ../storage/faq.rst:78
msgid "**Q:** How can I use the encrypted mobile Storage?"
msgstr "**问：**我如何使用加密的移动存储？"

#: ../storage/faq.rst:68
msgid ""
"Prior of using the encrypted mobile storage you need to install and "
"initialize the Nitrokey Storage and download the latest Nitrokey App."
msgstr "在使用加密的移动存储之前，你需要安装和初始化Nitrokey存储并下载最新的Nitrokey应用程序。"

#: ../storage/faq.rst:70
msgid "Start the Nitrokey App."
msgstr "启动Nitrokey应用程序。"

#: ../storage/faq.rst:71
msgid "Press its tray icon and select \"unlock encrypted volume\" in the menu."
msgstr "按其托盘图标，在菜单中选择\"解锁加密卷\"。"

#: ../storage/faq.rst:72
msgid "Enter your User PIN in the appearing popup window."
msgstr "在出现的弹出窗口中输入你的用户密码。"

#: ../storage/faq.rst:73
msgid ""
"If this is the first time you may need to create a partition on the "
"encrypted volume. Windows will open an appropriate window and ask you to "
"do so. On Linux and Mac you may need to open a partition manager and "
"create a partition manually. You can create as many partitions as you "
"want. We recommend FAT(32) if you want to access the partition from "
"various operating systems."
msgstr ""
"如果这是第一次，您可能需要在加密的卷上创建一个分区。Windows会打开一个适当的窗口并要求你这样做。在Linux和Mac上，您可能需要打开一个分区管理器"
"并手动创建一个分区。您可以根据您的需要创建任意多的分区。如果你想从不同的操作系统访问该分区，我们建议使用FAT(32)。"

#: ../storage/faq.rst:74
msgid ""
"Now you can use the encrypted volume as you would use any other ordinary "
"USB drive. But all data stored on it will be encrypted in the Nitrokey "
"hardware automatically."
msgstr "现在你可以像使用其他普通USB驱动器一样使用加密的卷。但是，存储在上面的所有数据都将在Nitrokey硬件中自动加密。"

#: ../storage/faq.rst:75
msgid "To remove or lock the encrypted volume you should unmount/eject it first."
msgstr "要删除或锁定加密的卷，你应该先卸载/弹出它。"

#: ../storage/faq.rst:76
msgid ""
"Afterwards you can disconnect the Nitrokey or select \"lock encrypted "
"volume\" from the Nitrokey App menu."
msgstr "之后，你可以断开Nitrokey的连接，或从Nitrokey应用程序菜单中选择\"锁定加密卷\"。"

#: ../storage/faq.rst:78
msgid ""
"The Nitrokey Storage is able to create hidden volumes as well. Please "
"have a look at the corresponding instructions for hidden volumes."
msgstr "Nitrokey Storage也能够创建隐藏卷。请看一下隐藏卷的相应说明。"

#: ../storage/faq.rst:101
msgid "**Q:** How can I use the hidden volume?"
msgstr "**问：**如何使用隐藏卷？"

#: ../storage/faq.rst:81
msgid ""
"Hidden volumes allow to hide data in the encrypted volume. The data is "
"protected with an additional password. Without the password the data "
"existence's can't be proven. Hidden volumes are not setup by default so "
"that their existence can be denied plausibly. The concept is similar to "
"VeraCrypt's/TrueCrypt's hidden volume but with Nitrokey Storage the "
"entire functionality of hidden volumes is implemented in hardware."
msgstr ""
"隐藏卷允许在加密卷中隐藏数据。这些数据受到额外密码的保护。没有密码，数据的存在就不能被证明。默认情况下，隐藏卷不会被设置，因此它们的存在可以被合理地否认。"
"这个概念类似于VeraCrypt/TrueCrypt的隐藏卷，但在Nitrokey Storage中，隐藏卷的整个功能是在硬件中实现的。"

#: ../storage/faq.rst:88
msgid ""
"You can configure up to four hidden volumes. Once unlocked, hidden "
"volumes behave like ordinary storage where you can create various "
"partitions, filesystems and store files as you like."
msgstr "你最多可以配置四个隐藏卷。一旦解锁，隐藏卷的行为与普通存储一样，你可以创建各种分区、文件系统，并按你的意愿存储文件。"

#: ../storage/faq.rst:92
msgid ""
"If you decide to configure Hidden Volumes, you can not use the encrypted "
"storage anymore. Because the Hidden Volume is situated on the free space "
"of the encrypted storage, there is the potential of overwriting data in "
"the Hidden Volume. You can say, even the encrypted storage \"does not "
"know\" that there is a hidden volumes. The general structure is shown in "
"the diagram below. Therefore, please do not write anything in the "
"encrypted storage after creating a hidden volume (you have to unlock it "
"first though)."
msgstr ""
"如果您决定配置隐藏卷，您就不能再使用加密的存储。因为隐藏卷位于加密存储的自由空间上，有可能会覆盖隐藏卷中的数据。你可以说，即使是加密存储也不知道有一个隐藏"
"卷。一般的结构如下图所示。因此，在创建了隐藏卷之后，请不要在加密存储中写入任何东西（虽然你必须先解锁它）。"

#: ../storage/faq.rst:100
msgid ""
"Hidden volumes are like containers inside of a container, the encrypted "
"volume."
msgstr "隐藏卷就像一个容器中的容器，即加密卷。"

#: ../storage/faq.rst:112
msgid "**Q:** Do you have resources for development and integration?"
msgstr "**问：**你们有开发和整合的资源吗？"

#: ../storage/faq.rst:104
msgid ""
"Use Nitrokey library to manage the encrypted mass store, one-time "
"passwords and password safe functionality."
msgstr "使用Nitrokey库来管理加密的大量存储、一次性密码和密码安全功能。"

#: ../storage/faq.rst:105
msgid ""
"The project nitrokey-get-totp and nitrokey-get-password are nice examples"
" for using the python bindings of Nitrokey library to get a custom "
"interface."
msgstr ""
"nitrokey-get-totp和nitrokey-get-password项目是使用Nitrokey库的python绑定来获得自定义界面的好例子。"

#: ../storage/faq.rst:106
msgid ""
"In order to access the integrated smart card, you can use OpenSC's "
"command line tools."
msgstr "为了访问集成智能卡，你可以使用OpenSC'的命令行工具。"

#: ../storage/faq.rst:107
msgid "If your application has a PKCS#11 interface, use OpenSC's PKCS#11 driver."
msgstr "如果你的应用程序有一个PKCS#11接口，请使用OpenSC'的PKCS#11驱动程序。"

#: ../storage/faq.rst:108
msgid "To work with the smart card low level, see the OpenPGP Card specification."
msgstr "要与智能卡低级别的工作，请参阅OpenPGP卡规范。"

#: ../storage/faq.rst:109
msgid "The source code of the firmware and the hardware layout are available too."
msgstr "固件的源代码和硬件布局也是可用的。"

#: ../storage/faq.rst:110
msgid ""
"To develop special applications or for command line access one can use "
"the nitrocli created by d-e-s-o."
msgstr "要开发特殊的应用程序或用于命令行访问，可以使用d-e-s-o创建的nitrocli。"

#: ../storage/faq.rst:111
msgid "A libnitrokey wrapper for Rust providing access to Nitrokey devices."
msgstr "一个用于Rust的libnitrokey包装器，提供对Nitrokey设备的访问。"

#: ../storage/firmware-update-manually.rst:2
msgid "Activate Update Mode Manually"
msgstr "手动激活更新模式"

#: ../storage/firmware-update-manually.rst:10
msgid ""
"The following steps are only necessary if you are using Windows 10 Build "
"1809 (or higher) and Nitrokey Storage with firmware 0.52 or older. In all"
" other cases, or if you have access to another system, the regular update"
" as described `here <firmware-update.html>`_ is sufficient and easier."
msgstr ""
"只有当你使用Windows 10 Build 1809（或更高版本）和固件为0.52或更高版本的Nitrokey "
"Storage时，才需要进行以下步骤。在所有其他情况下，或者如果你可以使用另一个系统，那么按照`这里<firmware-update."
"html>`_所述的常规更新就足够了，而且更容易。"

#: ../storage/firmware-update-manually.rst:13
msgid "What is needed"
msgstr "需要什么"

#: ../storage/firmware-update-manually.rst:15
msgid ""
"To put the Nitrokey Storage manually into Update Mode (without using the "
"Nitrokey App), the following is required:"
msgstr "要将硝基钥匙存储器手动放入更新模式（不使用硝基钥匙应用程序），需要以下条件。"

#: ../storage/firmware-update-manually.rst:17
msgid ""
"A USB stick (**All data on the USB stick will be lost! Please make a "
"backup of the creation before!**)"
msgstr "一个U盘（**U盘上的所有数据都会丢失！请在创建前做好备份！**）。请在创建之前做一个备份！**)"

#: ../storage/firmware-update-manually.rst:20
msgid "The `Balena Etcher <https://www.balena.io/etcher/>`_ software"
msgstr "`Balena Etcher <https://www.balena.io/etcher/>`_软件"

#: ../storage/firmware-update-manually.rst:22
msgid ""
"The `USB Image <https://github.com/Nitrokey/nitrokey-storage-update-"
"boot/releases/latest>`_ we created for this purpose. Please download only"
" the file ending with “.img.zip”."
msgstr ""
"`USB图像<https://github.com/Nitrokey/nitrokey-storage-update-boot/releases/"
"latest>`_我们为此目的而创建。请只下载以\".img.zip \"结尾的文件。"

#: ../storage/firmware-update-manually.rst:28
msgid "Install Balena Etcher"
msgstr "安装Balena Etcher"

#: ../storage/firmware-update-manually.rst:30
msgid ""
"Balena Etcher helps us to install the USB image on the USB stick. Please "
"double click on the `previously downloaded installation file "
"<https://www.balena.io/etcher/>`_ and follow the instructions."
msgstr ""
"Balena Etcher帮助我们在U盘上安装USB镜像。请双击`之前下载的安装文件<https://www.balena.io/etcher/"
">`_并按照指示操作。"

#: ../storage/firmware-update-manually.rst:43
msgid "Installing the USB image with Balena Etcher"
msgstr "用Balena Etcher安装USB镜像"

#: ../storage/firmware-update-manually.rst:45
msgid ""
"The program usually opens immediately after installation. If not, you "
"will find a shortcut on the desktop. Using the application, select the "
"`previously downloaded image file <https://github.com/Nitrokey/nitrokey-"
"storage-update-boot/releases>`_, which ends with “.img.zip”. Now insert "
"the USB stick. It should be recognized automatically. Press “Flash!” to "
"proceed."
msgstr ""
"该程序通常在安装后立即打开。如果没有，你会在桌面上找到一个快捷方式。使用该程序，选择`之前下载的图像文件<https://github.com/"
"Nitrokey/nitrokey-storage-update-boot/releases>`_，它以\".img.zip \"结尾"
"。现在插入U盘。它应该被自动识别。按 \"Flash！\"继续。"

#: ../storage/firmware-update-manually.rst:55
msgid "You must allow the application to make changes."
msgstr "你必须允许应用程序进行更改。"

#: ../storage/firmware-update-manually.rst:67
msgid ""
"After the image has been successfully transferred, Windows may ask if the"
" device should be formatted. It is important that you click “Cancel”, "
"otherwise the USB stick will be overwritten by Windows."
msgstr "镜像成功传输后，Windows可能会问是否应该格式化设备。重要的是，你要点击 \"取消\"，否则U盘将被Windows覆盖。"

#: ../storage/firmware-update-manually.rst:75
msgid "Booting from the USB stick"
msgstr "从U盘启动"

#: ../storage/firmware-update-manually.rst:77
msgid ""
"Now the system must be restarted. The USB stick must remain in the USB "
"port so that the system can be started on the USB stick. Some devices are"
" configured to start automatically from USB stick if it contains a "
"system. If Windows instead of the USB image is booting right after the "
"restart, you have to set your BIOS to boot from USB. On many systems this"
" can be done with the Escape key, the F10, F11 or F12 key. Often, when "
"starting the device there is also a hint which key to use the so-called "
"“boot menu”."
msgstr ""
"现在必须重新启动系统。U盘必须保持在USB端口中，这样才能从U盘上启动系统。一些设备被配置为如果它包含一个系统，就会自动从U盘启动。如果重启后马上启动的是"
"Windows而不是USB镜像，你必须将BIOS设置为从USB启动。在许多系统上，这可以通过Escape键、F10、F11或F12键完成。通常，在启动设备"
"时，也会有一个提示，即使用所谓的 \"启动菜单 \"的哪个键。"

#: ../storage/firmware-update-manually.rst:79
msgid ""
"After the system has started, please choose the language by typing 1 "
"(English) and hit Enter."
msgstr "系统启动后，请选择语言，输入1（英语）并点击回车键。"

#: ../storage/firmware-update-manually.rst:86
msgid "Please insert the Nitrokey Storage when asked to."
msgstr "请在要求时插入Nitrokey存储。"

#: ../storage/firmware-update-manually.rst:93
msgid ""
"The Firmware Update Mode will be started automatically if the standard "
"password is set. Otherwise you need to input your password and hit enter."
msgstr "如果设置了标准密码，固件更新模式就会自动启动。否则你需要输入密码并点击回车。"

#: ../storage/firmware-update-manually.rst:100
msgid ""
"After the system has activated the firmware update on the Nitrokey "
"Storage, a restart is issued after 60 seconds. Please remove the USB "
"Stick. Afterwards you can use the Nitrokey Update Tool in Windows as "
"described `here <firmware-update.html>`_."
msgstr ""
"在系统激活了Nitrokey存储的固件更新后，60秒后会发出重启。请取出U盘。之后，你可以在Windows中使用Nitrokey更新工具，如`这里"
"<firmware-update.html>`_所述。"

#: ../storage/firmware-update-manually.rst:103
msgid "Restoring the USB Stick"
msgstr "恢复U盘"

#: ../storage/firmware-update-manually.rst:105
msgid ""
"Windows should automatically ask to format your USB Stick as soon as you "
"insert the USB Stick the first time again in Windows. Just accept the "
"request for being able to use the USB Stick as previously."
msgstr "当你第一次在Windows中插入U盘时，Windows会自动要求你格式化U盘。只要接受要求就可以像以前一样使用U盘。"

#: ../storage/index.rst:2
msgid "Nitrokey Storage 2"
msgstr "Nitrokey Storage 2"

#: ../storage/index.rst:6
msgid "First check the:"
msgstr "首先检查一下。"

#: ../storage/index.rst:14
msgid "or choose your operating system:"
msgstr "或选择你的操作系统。"

#: ../pro/2fa-google.rst:2
msgid "Two-factor Authentication for Google"
msgstr "谷歌的双因素认证"

#: ../storage/linux/product_platform_heading.rst:3
msgid "(Nitrokey Storage 2 - Linux)"
msgstr "(Nitrokey Storage 2 - Linux)"

#: ../pro/2fa-google.rst:8
msgid ""
"These are the basic steps for registering the Nitrokey Pro or Nitrokey "
"Storage as a second factor of a Google account:"
msgstr "这些是注册Nitrokey Pro或Nitrokey Storage作为谷歌账户第二要素的基本步骤。"

#: ../pro/2fa-google.rst:10
msgid ""
"Go to `https://myaccount.google.com/security#signin "
"<https://myaccount.google.com/intro/security>`_"
msgstr ""
"转到`https://myaccount.google.com/security#signin <https://myaccount.google."
"com/intro/security>`_。"

#: ../pro/2fa-google.rst:13
msgid "Click “2-Step Verification” on the right side"
msgstr "点击右侧的 \"2步验证\"。"

#: ../pro/2fa-google.rst:15
msgid ""
"You need to define a first 2-Step Verfication (e.g. your phone number) "
"method to have access to the alternative second step option (the first "
"2-Step Verification can’t be the security key)"
msgstr "你需要定义第一个2步验证（例如你的电话号码）方法，以便能够访问替代的第二步选项（第一个2步验证不能是安全密钥）。"

#: ../pro/2fa-google.rst:19
msgid ""
"Choose “Authenticator App” as second step (though you won’t actually need"
" the app)"
msgstr "第二步选择 \"认证器应用程序\"（尽管你实际上不需要这个应用程序）。"

#: ../pro/2fa-google.rst:22
msgid ""
"Choose Android -> press on “Can’t scan it” below the qrcode to see the "
"secret key"
msgstr "选择安卓->；按qrcode下面的 \"无法扫描 \"查看密匙。"

#: ../pro/2fa-google.rst:25
msgid ""
"Copy the key (you can ignore the whitespaces, they do not get copied "
"anyway!) and paste the key into the corresponding field in the Nitrokey "
"App"
msgstr "复制钥匙（你可以忽略空白处，反正它们不会被复制！）并将钥匙粘贴到Nitrokey应用程序的相应区域。"

#: ../pro/2fa-google.rst:29
msgid ""
"Click “Next” and follow the instructions (but you use the Nitrokey App "
"instead of the Google Authenticator app to generate the keys)"
msgstr "点击 \"下一步 \"并按照指示操作（但你要使用Nitrokey应用程序而不是Google Authenticator应用程序来生成密钥）。"

#: ../pro/2fa-google.rst:32
msgid ""
"It is possible to use the same secret key for the Google Autenticator app"
" and the Nitrokey App as well. Just make sure to follow the above "
"procedure and use the qrcode for the Authenticator app afterwards before "
"clicking “Next”. Now you can use either the Google Authenticator app or "
"the Nitrokey App."
msgstr ""
"在谷歌Autenticator应用程序和Nitrokey应用程序中也可以使用相同的秘密密钥。只要确保按照上述程序操作，并在点击 \"下一步 "
"\"之前使用认证器应用程序的qrcode。现在你可以使用谷歌认证器应用程序或Nitrokey应用程序。"

#: ../pro/2fa-nextcloud.rst:2
msgid "Two-factor Authentication for Nextcloud accounts"
msgstr "Nextcloud账户的双因素认证"

#: ../pro/2fa-nextcloud.rst:8
msgid ""
"These are the basic steps for registering the Nitrokey Pro or Nitrokey "
"Storage as a second factor of a Nextcloud account."
msgstr "这些是注册Nitrokey Pro或Nitrokey Storage作为Nextcloud账户第二要素的基本步骤。"

#: ../pro/2fa-nextcloud.rst:10
msgid ""
"At first, log in to your Nextcloud account, click on the top right symbol"
" of your account and open the settings menu."
msgstr "首先，登录您的Nextcloud账户，点击您账户的右上方符号，打开设置菜单。"

#: ../pro/2fa-nextcloud.rst:17
msgid "Now choose “Security” on the left hand side."
msgstr "现在，在左手边选择 \"安全\"。"

#: ../pro/2fa-nextcloud.rst:24
msgid ""
"Now you can tick the box reading “Enable TOTP”. There is shown the TOTP "
"secret which we need to add to our Nitrokey via the Nitrokey App."
msgstr ""
"现在你可以勾选 \"启用TOTP \"的方框。这里显示了TOTP的秘密，我们需要通过Nitrokey应用程序将其添加到我们的Nitrokey中。"

#: ../pro/2fa-nextcloud.rst:31
msgid "Copy and save secret code into the Nitrokey App."
msgstr "复制并保存秘密代码到Nitrokey应用程序。"

#: ../pro/2fa-nextcloud.rst:43
msgid ""
"Now we request a one-time password for the Nextcloud to verify the "
"process by inserting the password on the website and pressing “verify”."
msgstr "现在我们要求Nextcloud的一次性密码，通过在网站上插入密码并按下 \"验证 \"来验证这一过程。"

#: ../pro/2fa-nextcloud.rst:55
msgid ""
"From now on, when signing in you need an OTP additionally to your "
"password. Get one by the Nitrokey App like before and insert it in when "
"logging in."
msgstr "从现在开始，当你登录时，除了你的密码之外，还需要一个OTP。像以前一样通过Nitrokey应用程序获得一个，并在登录时插入。"

#: ../pro/2fa-nextcloud.rst:62
msgid ""
"Nextcloud provides you with backup codes, in case you lost your Nitrokey."
" It is recommended to print out these codes and store them somewhere save"
" otherwise you might not be able to log in to your account anymore!"
msgstr ""
"Nextcloud为您提供了备份代码，以防您丢失您的Nitrokey。建议您打印出这些代码，并将其保存在某个地方，否则您可能无法再登录您的账户了。"

#: ../pro/2fa-odoo.rst:2
msgid "Two-factor Authentication for ERP Software Odoo"
msgstr "ERP软件Odoo的双因素认证"

#: ../pro/2fa-odoo.rst:8
msgid ""
"`Odoo <https://www.odoo.com/>`_ is a powerful ERP (Enterprise Resource "
"Planning) software for companies of all sizes. Odoo is available as open "
"source and contains modules for CRM, website, e-commerce, accounting, "
"financial accounting, production, warehouse management, project "
"management, document management, among others."
msgstr ""
"`Odoo <https://www.odoo.com/>`_是一个功能强大的ERP（企业资源计划）软件，适用于各种规模的公司。Odoo以开放源码的形式提"
"供，包含CRM、网站、电子商务、会计、财务会计、生产、仓库管理、项目管理、文档管理等模块。"

#: ../pro/2fa-odoo.rst:10
msgid ""
"The secure access to such a central software is especially important and "
"can be realized with the Nitrokey. In this case the Nitrokey will be "
"checked during user login in addition to the user password. Phishing "
"attacks are thus foiled and your critical company data is protected."
msgstr ""
"对这样一个中央软件的安全访问特别重要，可以用Nitrokey来实现。在这种情况下，除了用户密码外，在用户登录时还会检查Nitrokey。这样，钓鱼式攻击就"
"被挫败了，你的重要公司数据也得到保护。"

#: ../pro/2fa-odoo.rst:13
msgid ""
"Video: Zwei-Faktor-Authentifizierung mit dem Nitrokey Pro und Nitrokey "
"Storage in Odoo"
msgstr ""
"视频。在Odoo中用Nitrokey Pro和Nitrokey Storage进行Zwei-Faktor-Authentifizierung操作"

#: ../pro/linux/automatic-screen-lock.rst:2
msgid "Automatic Screen Lock at Removal"
msgstr "移除时的自动屏幕锁"

#: ../pro/linux/automatic-screen-lock.rst:8
msgid ""
"This guide will walk you through the configuration of your computer, to "
"automatically lock your session when you remove the Nitrokey."
msgstr "本指南将指导你完成电脑的配置，以便在你移除Nitrokey时自动锁定你的会话。"

#: ../pro/linux/automatic-screen-lock.rst:10
msgid ""
"The configuration requires the creation of two files under two different "
"directories."
msgstr "该配置要求在两个不同的目录下创建两个文件。"

#: ../pro/linux/automatic-screen-lock.rst:13
#: ../pro/linux/disk-encryption-luks.rst:26
msgid "Requirements"
msgstr "要求"

#: ../pro/linux/automatic-screen-lock.rst:15
msgid ""
"Ubuntu 20.04 or Debian 10 (Buster), both with `Gnome Display Manager "
"<https://wiki.gnome.org/Projects/GDM>`_ installed."
msgstr ""
"Ubuntu 20.04或Debian 10（Buster），都安装了`Gnome显示管理器<https://wiki.gnome.org/"
"Projects/GDM>`_。"

#: ../pro/linux/automatic-screen-lock.rst:18
msgid "Nitrokey Pro 2, Nitrokey Storage 2, or Nitrokey HSM 2"
msgstr "Nitrokey Pro 2，Nitrokey Storage 2，或Nitrokey HSM 2"

#: ../pro/linux/automatic-screen-lock.rst:21
msgid "Configuration"
msgstr "配置"

#: ../pro/linux/automatic-screen-lock.rst:24
msgid "Create the ``.rules`` file"
msgstr "创建``.rules``文件。"

#: ../pro/linux/automatic-screen-lock.rst:26
msgid "With your favorite text editor create a file called ``85-nitrokey.rules``"
msgstr "用你最喜欢的文本编辑器创建一个名为``的文件，85-nitrokey.rules``。"

#: ../pro/linux/automatic-screen-lock.rst:32
msgid "Add the following line to the file"
msgstr "在文件中添加以下一行"

#: ../pro/linux/automatic-screen-lock.rst:38
msgid "Save the file and quit the editor."
msgstr "保存文件并退出编辑器。"

#: ../pro/linux/automatic-screen-lock.rst:40
msgid ""
"This file sets up a new hardware rule that executes the ``gnome-"
"screensaver-lock`` at removal of the Nitrokey device."
msgstr "这个文件设置了一个新的硬件规则，在移除Nitrokey设备时执行``gnome-screensaver-lock``。"

#: ../pro/linux/automatic-screen-lock.rst:42
msgid ""
"You should change the configuration according to the device you are using"
" as following:"
msgstr "你应该根据你所使用的设备改变配置，如下所示。"

#: ../pro/linux/automatic-screen-lock.rst:44
msgid "Nitrokey Pro: ``ENV{PRODUCT}==\"20a0/4108/101\"``"
msgstr "Nitrokey Pro。``ENV{PRODUCT}==\"20a0/4108/101\"``<"

#: ../pro/linux/automatic-screen-lock.rst:45
msgid "Nitrokey HSM: ``ENV{PRODUCT}==\"20a0/4230/101\"``"
msgstr "Nitrokey HSM: ``ENV{PRODUCT}==\"20a0/4230/101\"``。"

#: ../pro/linux/automatic-screen-lock.rst:46
msgid "Nitrokey Storage: ``ENV{PRODUCT}==\"20a0/4109/101\"``"
msgstr "硝基键存储。``ENV{PRODUCT}==\"20a0/4109/101\"``"

#: ../pro/linux/automatic-screen-lock.rst:49
msgid "Create the ``gnome-screensaver-lock`` script"
msgstr "创建``gnome-screensaver-lock``脚本。"

#: ../pro/linux/automatic-screen-lock.rst:51
msgid ""
"With your favorite text editor create a file called ``gnome-screensaver-"
"lock``"
msgstr "用你最喜欢的文本编辑器创建一个名为``的文件，gnome-screensaver-lock``。"

#: ../pro/linux/automatic-screen-lock.rst:57
msgid "Add the following text"
msgstr "添加以下文字"

#: ../pro/linux/automatic-screen-lock.rst:67
msgid ""
"In the first step, this script looks for the user-name of the gnome "
"session, i.e. ``user``."
msgstr "在第一步，这个脚本寻找gnome会话的用户名，即``user``。"

#: ../pro/linux/automatic-screen-lock.rst:69
msgid ""
"When it is called at Nitrokey removal, the script queries ``user``, "
"switches to its session, and locks the screen by prompting the screen-"
"saver screen."
msgstr "当它在移除Nitrokey时被调用，脚本查询``user``，切换到它的会话，并通过提示屏保画面锁定屏幕。"

#: ../pro/linux/automatic-screen-lock.rst:72
msgid "Execute the script"
msgstr "执行脚本"

#: ../pro/linux/automatic-screen-lock.rst:74
msgid ""
"Once all set up, execute the script once, and it will lock the screen. It"
" does not matter if the Nitrokey is plugged or not for this first "
"execution."
msgstr "一旦全部设置完毕，执行一次脚本，它就会锁定屏幕。在第一次执行时，硝基钥匙是否被插上并不重要。"

#: ../pro/linux/automatic-screen-lock.rst:77
#: ../pro/linux/disk-encryption-luks.rst:140
#: ../pro/linux/hard-disk-encryption.rst:116 ../pro/openpgp-outlook.rst:26
#: ../pro/openpgp.rst:49 ../pro/smime-outlook.rst:36
#: ../pro/smime-thunderbird.rst:45 ../pro/smime.rst:57
msgid "Usage"
msgstr "使用方法"

#: ../pro/linux/automatic-screen-lock.rst:79
msgid ""
"By now you can log back to your session by entering your password, and "
"(re)plug you Nitrokey if you did not do it before."
msgstr "现在，你可以通过输入密码登录到你的会话中，如果你以前没有这样做，可以（重新）插入你的Nitrokey。"

#: ../pro/linux/automatic-screen-lock.rst:81
msgid ""
"The next time(s) you unplug your Nitrokey from the computer, it will "
"automatically lock the screen."
msgstr "下次你从电脑上拔下Nitrokey时，它将自动锁定屏幕。"

#: ../pro/change-pins.rst:2
msgid "Change User and Admin PIN"
msgstr "更改用户和管理员密码"

#: ../pro/change-pins.rst:9
msgid "User PIN"
msgstr "用户密码"

#: ../pro/change-pins.rst:11
msgid ""
"The user PIN is at least 6-digits long and is used to get access to the "
"content of the Nitrokey. This is the PIN you will use a lot in every day "
"use e.g. for decrypting messages, for unlocking your encrypted storage "
"(NK Storage only) etc."
msgstr ""
"用户PIN码至少有6位数，用于访问Nitrokey的内容。这是你在日常使用中经常用到的PIN码，例如解密信息、解锁你的加密存储空间（仅限NK存储）等。"

#: ../pro/change-pins.rst:13
msgid ""
"You can change the user PIN with the Nitrokey App if using a Nitrokey Pro"
" or Nitrokey Storage. In the `Nitrokey "
"<https://www.nitrokey.com/download>`_ App open ‘Menu -> Configure -> "
"Change User PIN’ to open the dialog to change the PIN."
msgstr ""
"如果使用Nitrokey Pro或Nitrokey Storage，你可以通过Nitrokey应用程序改变用户的PIN码。在`Nitrokey "
"<https://www.nitrokey.com/download>`_应用程序中，打开'菜单-> 配置-> 更改用户密码'以打开更改密码的对话框。"

#: ../pro/change-pins.rst:21
msgid "You can change the User PIN in the dialog window now."
msgstr "你现在可以在对话窗口中更改用户密码。"

#: ../pro/change-pins.rst:23
msgid ""
"The user PIN can have up to 20 digits and other characters (e.g. "
"alphabetic and special characters). But as the user PIN is blocked as "
"soon three wrong PIN attempts were done, it is sufficiently secure to "
"only have a 6 digits PIN. The default PIN is 123456."
msgstr ""
"用户密码可以有多达20位数字和其他字符（如字母和特殊字符）。但是，由于用户的PIN码在三次错误的PIN码尝试后就会被阻止，所以只有6位数的PIN码就足够安"
"全了。默认的PIN码是123456。"

#: ../pro/change-pins.rst:31
msgid "Admin PIN"
msgstr "管理密码"

#: ../pro/change-pins.rst:33
msgid ""
"The admin PIN is at least 8-digits long and is used to change "
"contents/settings of the Nitrokey. That is to say after initializing the "
"Nitrokey you probably won’t need this PIN too often (e.g. if you want to "
"add another password to the password safe of the Nitrokey Pro or Nitrokey"
" Storage)."
msgstr ""
"管理密码至少有8位数，用于改变硝基钥匙的内容/设置。也就是说，在初始化Nitrokey后，你可能不会经常需要这个PIN码（例如，"
"如果你想在Nitrokey Pro或Nitrokey Storage的密码箱中添加另一个密码）。"

#: ../pro/change-pins.rst:35
msgid ""
"You can change the admin PIN with the Nitrokey App if using a Nitrokey "
"Pro or Nitrokey Storage. In the `Nitrokey App "
"<https://www.nitrokey.com/download>`_ open ‘Menu -> Configure -> Change "
"Admin PIN’ to open the dialog to change the PIN."
msgstr ""
"如果使用Nitrokey Pro或Nitrokey Storage，你可以通过Nitrokey "
"App更改管理密码。在`硝基钥匙应用程序<https://www.nitrokey.com/download>`_打开'菜单-> 配置-> "
"更改管理密码'，以打开更改密码的对话框。"

#: ../pro/change-pins.rst:43
msgid "You can change the admin PIN in the dialog window now."
msgstr "你现在可以在对话窗口中改变管理密码。"

#: ../pro/change-pins.rst:45
msgid ""
"The admin PIN can have up to 20 digits and other characters (e.g. "
"alphabetic and special characters). But as the admin PIN is blocked as "
"soon three wrong PIN attempts were done, it is sufficiently secure to "
"only have 8 digits PIN. The default PIN is 12345678."
msgstr ""
"管理密码最多可以有20位数字和其他字符（如字母和特殊字符）。但是，由于只要有三次错误的PIN尝试，管理PIN就会被阻止，所以只有8位数的PIN就足够安全了"
"。默认的PIN码是12345678。"

#: ../pro/linux/disk-encryption-luks.rst:2
msgid "Full-Disk Encryption With cryptsetup/LUKS"
msgstr "用cryptsetup/LUKS进行全盘加密"

#: ../pro/linux/disk-encryption-luks.rst:8
msgid ""
"This guide shows how to configure LUKS-encrypted volumes, to authenticate"
" at boot with `Nitrokey Pro <https://shop.nitrokey.com/shop/product/nk-"
"pro-2-nitrokey-pro-2-3>`_ or `Nitrokey Storage "
"<https://shop.nitrokey.com/shop/product/nitrokey-storage-2-56>`_."
msgstr ""
"本指南展示了如何配置LUKS加密卷，在启动时用`Nitrokey Pro <https://shop.nitrokey.com/shop/product/"
"nk-pro-2-nitrokey-pro-2-3>`_或`Nitrokey Storage <https://shop.nitrokey.com/"
"shop/product/nitrokey-storage-2-56>`_验证。"

#: ../pro/linux/disk-encryption-luks.rst:10
msgid ""
"To provide some background, cryptsetup-initramfs now has support for "
"using OpenPGP smart cards like the Nitrokey Pro and Nitrokey Storage to "
"unlock LUKS-encrypted volumes. Once you finish the setup, you will just "
"need to insert your Nitrokey at boot and enter your User PIN, instead of "
"typing in your regular disk encryption passphrase."
msgstr ""
"为了提供一些背景资料，cryptsetup-initramfs现在支持使用Nitrokey Pro和Nitrokey Storage等OpenPGP智能卡"
"来解锁LUKS加密的卷。一旦你完成设置，你只需要在启动时插入Nitrokey并输入用户密码，而不是输入常规的磁盘加密口令。"

#: ../pro/linux/disk-encryption-luks.rst:16
msgid "These instructions have been tested on Ubuntu 20.04 and Debian 10."
msgstr "这些说明已经在Ubuntu 20.04和Debian 10上进行了测试。"

#: ../pro/linux/disk-encryption-luks.rst:20
msgid ""
"The following guide can potentially lock you out of your computer. You "
"should be aware of these risks, and we recommend you use the script below"
" on a secondary computer, or after a full backup as you might lose your "
"data."
msgstr ""
"下面的指南有可能会把你的电脑锁住。你应该意识到这些风险，我们建议你在第二台电脑上使用下面的脚本，或者在完全备份后使用，因为你可能会丢失你的数据。"

#: ../pro/linux/disk-encryption-luks.rst:28
msgid "An Ubuntu or Debian computer with at least one LUKS-encrypted volume."
msgstr "一台至少有一个LUKS加密卷的Ubuntu或Debian电脑。"

#: ../pro/linux/disk-encryption-luks.rst:30
msgid ""
"See the section below to determine which method is compatible with this "
"guide."
msgstr "请参阅下面的章节，以确定哪种方法与本指南兼容。"

#: ../pro/linux/disk-encryption-luks.rst:32
msgid ""
"A Nitrokey Pro 2 or Nitrokey Storage 2 `initialized <openpgp.html>`_ with"
" keys."
msgstr "一个Nitrokey Pro 2或Nitrokey Storage 2 `初始化<openpgp.html>`_的键。"

#: ../pro/linux/disk-encryption-luks.rst:37
msgid "Known Issues"
msgstr "已知问题"

#: ../pro/linux/disk-encryption-luks.rst:39
msgid ""
"So far, the script works only with manually-partitioned volumes, that are"
" composed of an unencrypted ``/boot`` partition, and an encrypted root "
"``/`` partition."
msgstr "到目前为止，该脚本只适用于手动分区的卷，即由未加密的``/boot``分区和加密的根``/`` 分区组成。"

#: ../pro/linux/disk-encryption-luks.rst:43
msgid ""
"Please do not select the automatic full-disk encryption provided by the "
"operating system you are using for this guide. You will face recurrent "
"errors when the partitioning is done automatically, using the "
"installation interface on Ubuntu and Debian."
msgstr "请不要选择你所使用的操作系统为本指南提供的自动全盘加密功能。在Ubuntu和Debian上使用安装界面自动进行分区时，你将面临反复的错误。"

#: ../pro/linux/disk-encryption-luks.rst:49
msgid "Instructions"
msgstr "说明"

#: ../pro/linux/disk-encryption-luks.rst:51
msgid "Install dependencies"
msgstr "安装依赖项"

#: ../pro/linux/disk-encryption-luks.rst:58
msgid "Create smartcard-luks directory"
msgstr "创建智能卡-鲁克斯目录"

#: ../pro/linux/disk-encryption-luks.rst:65
msgid "Download the smartcard-luks-script"
msgstr "下载智能卡-鲁克斯-脚本"

#: ../pro/linux/disk-encryption-luks.rst:73
msgid "Export the public key"
msgstr "导出公钥"

#: ../pro/linux/disk-encryption-luks.rst:75
msgid "To export your public key from GnuPG’s keyring:"
msgstr "要从GnuPG的钥匙圈中导出你的公钥。"

#: ../pro/linux/disk-encryption-luks.rst:82
msgid ""
"If you already have uploaded a public key to a keyserver (or have it "
"stored somewhere else), you should retrieve it in the way you are most "
"comfortable with, and proceed to step 5."
msgstr "如果你已经将公钥上传到钥匙服务器（或将其储存在其他地方），你应该以你最习惯的方式检索它，并继续进行第5步。"

#: ../pro/linux/disk-encryption-luks.rst:86
msgid "Determine and verify the correct LUKS device name for your root-partition:"
msgstr "为你的根分区确定并验证正确的LUKS设备名称。"

#: ../pro/linux/disk-encryption-luks.rst:94
msgid ""
"Usually this should be something like `nvme0n1p3_crypt` (for NitroPC) or "
"`sda3_crypt` (for NitroPads).  You can and should crosscheck that the "
"UUID referred inside `/etc/crypttab` is the designated partition by "
"checking the symbolic link inside `/dev/disks/by-uuid/`."
msgstr ""
"通常这应该是`nvme0n1p3_crypt`（用于NitroPC）或`sda3_crypt`（用于NitroPads）。  你可以而且应该通过检查`/"
"etc/crypttab`中提到的UUID是指定的分区，即`/dev/disks/by-uuid/`中的符号链接。"

#: ../pro/linux/disk-encryption-luks.rst:99
msgid ""
"Execute the script with the luks device name (e.g., `nvme0n1p3_crypt`) "
"and `pubkey.asc` as arguments."
msgstr "以luks设备名称（例如：`nvme0n1p3_crypt`）和`pubkey.asc`为参数执行脚本。"

#: ../pro/linux/disk-encryption-luks.rst:107
msgid ""
"Once, you run the script with the OpenPGP public key as argument, it "
"automatically sets up a new LUKS secret, encrypts it against that public "
"key, and sets up crypttab, LUKS, initramfs, and GRUB."
msgstr ""
"一旦你用OpenPGP公钥作为参数运行该脚本，它就会自动设置一个新的LUKS秘密，用该公钥进行加密，并设置crypttab、LUKS、initramfs和"
"GRUB。"

#: ../pro/linux/disk-encryption-luks.rst:111
msgid "First you will be prompted for the ``User PIN``"
msgstr "首先，你会被提示``User PIN``。"

#: ../pro/linux/disk-encryption-luks.rst:116
msgid ""
"Once you unlock the Nitrokey, you will be prompted for your ``OLD "
"passphrase``. It is the passphrase you entered to encrypt your volume at "
"installation."
msgstr "一旦你解锁了Nitrokey，你会被提示你的``OLD passphrase``。这是你在安装时输入的加密卷的口令。"

#: ../pro/linux/disk-encryption-luks.rst:122
msgid ""
"This is a fall-back alternative in case you lose your Nitrokey, or if "
"it’s unavailable. So far, it was not tested, and users must be aware of "
"the risk of getting locked out of their computer, if the fall-back method"
" does not work."
msgstr ""
"这是在你丢失Nitrokey或无法使用的情况下的一种后备选择。到目前为止，它还没有经过测试，用户必须意识到，如果后备方法不奏效，就有可能被锁在电脑外。"

#: ../pro/linux/disk-encryption-luks.rst:127
msgid ""
"Once you enter the passphrase, the script finishes the setup in about one"
" minute. Do not interrupt the script, or you might get locked out of your"
" computer after reboot."
msgstr "一旦你输入了口令，脚本就会在大约一分钟内完成设置。不要打断脚本，否则你可能会在重启后被锁定在你的电脑之外。"

#: ../pro/linux/disk-encryption-luks.rst:134
msgid "Done!"
msgstr "完成了!"

#: ../pro/linux/disk-encryption-luks.rst:136
msgid ""
"By now you must reboot, and you should be able to use your Nitrokey to "
"unlock your encrypted drive."
msgstr "现在你必须重新启动，你应该能够使用你的Nitrokey来解锁你的加密驱动器。"

#: ../pro/linux/disk-encryption-luks.rst:142
msgid "After reboot you should be prompted for your User PIN"
msgstr "重新启动后，系统会提示你输入用户密码。"

#: ../pro/linux/disk-encryption-luks.rst:147
msgid "Enter your User PIN to unlock the drive"
msgstr "输入你的用户密码以解锁硬盘"

#: ../pro/linux/disk-encryption-luks.rst:154
msgid "Further Hints"
msgstr "进一步提示"

#: ../pro/linux/disk-encryption-luks.rst:157
msgid "Change Passphrase"
msgstr "更改密码锁"

#: ../pro/linux/disk-encryption-luks.rst:159
msgid ""
"Once this setup is done, you should not use the (gnome) *disks* utility "
"anymore to change the (fallback) passphrase. The proper way to do this is"
" to call *cryptsetup* directly like this:"
msgstr "一旦完成这个设置，你就不应该再使用（gnome）*disks*工具来改变（后备）密码。正确的方法是像这样直接调用*cryptsetup*。"

#: ../pro/linux/disk-encryption-luks.rst:167
msgid "With `nvme0n1p3` being the partition you set up the keys for."
msgstr "`nvme0n1p3`是你为之设置钥匙的分区。"

#: ../pro/linux/disk-encryption-luks.rst:170
msgid "Use Multiple Keys"
msgstr "使用多个键"

#: ../pro/linux/disk-encryption-luks.rst:172
msgid ""
"It is easy to use multiple (hardware) security keys so that each of them "
"is able to unlock the LUKS drive independently. Just export multiple "
"public keys and also *pass multiple keys* to the setup script like this:"
msgstr "使用多个（硬件）安全密钥是很容易的，这样每个密钥都能独立解锁LUKS驱动器。只要导出多个公钥，同时*将多个密钥*传给设置脚本，像这样。"

#: ../pro/linux/disk-encryption-luks.rst:182
msgid "Set Cardholder Name"
msgstr "设置持卡人姓名"

#: ../pro/linux/disk-encryption-luks.rst:184
msgid ""
"During the PIN entry on boot for decryption of the LUKS root partition a "
"cardholder is presented to the user, to set this please use ``$ gpg "
"--edit-card`` and inside the prompt type ``admin`` and ``name`` to set "
"the cardholder for the OpenPGP Card (Nitrokey Storage 2 or Nitrokey Pro "
"2)."
msgstr ""
"在启动时输入PIN码以解密LUKS根分区时，会向用户展示一个持卡人。请使用``$ gpg --edit-card``并在提示中输入 "
"``admin<xid=\"189\"></x>`和``name``来设置OpenPGP卡（Nitrokey Storage 2或Nitrokey "
"Pro 2）的持卡人。"

#: ../pro/linux/disk-encryption-luks.rst:190
msgid "Replace/Delete Keys"
msgstr "替换/删除钥匙"

#: ../pro/linux/disk-encryption-luks.rst:192
msgid ""
"It is not possible to add/remove keys directly. Therefore you need to "
"delete/remove the old setup and re-run the setup with the designated "
"key(s):"
msgstr "不可能直接添加/删除钥匙。因此，你需要删除/删除旧的设置，然后用指定的钥匙重新运行设置。"

#: ../pro/linux/disk-encryption-luks.rst:196
msgid ""
"Remove the keyfile (path, if you used the script above) from luks-device "
"(*nvme0n1p3*):"
msgstr "从luks-device（*nvme0n1p3*）中删除密钥文件（路径，如果你使用了上面的脚本）。"

#: ../pro/linux/disk-encryption-luks.rst:202
msgid "Remove the keyfile itself:"
msgstr "删除密钥文件本身。"

#: ../pro/linux/disk-encryption-luks.rst:208
msgid "Re-run setup above."
msgstr "重新运行上述设置。"

#: ../pro/linux/disk-encryption-luks.rst:211
msgid "Unlocking LUKS2 with X509 certificate"
msgstr "用X509证书解锁LUKS2"

#: ../pro/linux/disk-encryption-luks.rst:213
msgid ""
"SystemD supports unlocking a LUKS2 partition using a X509 certificate, "
"find a great blog entry on how to realize this at the `Personal blog of "
"Vladimir Timofeenko`_"
msgstr ""
"SystemD支持使用X509证书解锁LUKS2分区，在`Vladimir Timofeenko的个人博客上有一篇关于如何实现这一功能的精彩博客文章。"

#: ../pro/ecc.rst:2
msgid "Elliptic Curves (ECC) Support"
msgstr "椭圆曲线（ECC）支持"

#: ../pro/ecc.rst:9
msgid "RSA-2048 Becomes Increasingly Insecure"
msgstr "RSA-2048变得越来越不安全了"

#: ../pro/ecc.rst:11
msgid ""
"For security reasons, the German Federal Office for Information Security "
"(Bundesamt für Sicherheit in der Informationstechnik, BSI) no longer "
"recommends RSA keys with a length of 2048 bit `to be used after 2022 "
"<https://www.bsi.bund.de/SharedDocs/Downloads/EN/BSI/Publications/TechGuidelines/TG02102"
"/BSI-TR-02102-1.pdf?_blob=publicationFile&v=10>`_. This means that longer"
" keys will need to come into use in the foreseeable future. Assuming a "
"usage period of five years, is is already necessary to generate longer "
"keys. However, longer RSA keys with 3072 bit or 4096 bit are "
"significantly slower. For this reason the new Nitrokey Storage 2 and Pro "
"2 (resp. the integrated OpenPGP Card version 3.3) supports encryption by "
"means of `elliptic-curve cryptography (ECC) "
"<https://en.wikipedia.org/wiki/Elliptic-curve_cryptography>`_. This "
"method is considered to be just as secure with smaller ECC keys as longer"
" RSA keys and is also considerably faster."
msgstr ""
"出于安全考虑，德国联邦信息安全办公室（Bundesamt für Sicherheit in der Informationstechnik, "
"BSI）不再建议在2022年之后使用长度为2048位的RSA密钥` <https://www.bsi.bund.de/SharedDocs/"
"Downloads/EN/BSI/Publications/TechGuidelines/TG02102/BSI-TR-02102-1.pdf?_blob"
"=publicationFile&v=10>`_。这意味着在可预见的未来，更长的密钥将需要投入使用。假设使用期为5年，已经有必要产生更长的密钥了。然而，3"
"072位或4096位的较长RSA密钥的速度明显较慢。由于这个原因，新的Nitrokey Storage 2和Pro 2（即集成的OpenPGP卡3."
"3版）支持通过`椭圆曲线加密法（ECC）<https://en.wikipedia.org/wiki/Elliptic-"
"curve_cryptography>`_加密。这种方法被认为与较长的RSA密钥一样，使用较小的ECC密钥是安全的，而且速度也相当快。"

#: ../pro/ecc.rst:16
msgid "Basics of Elliptic-Curve Cryptography"
msgstr "椭圆曲线加密法的基础知识"

#: ../pro/ecc.rst:18
msgid ""
"In contrast to RSA, there are many different forms (so-called curves) of "
"elliptic-curve cryptography. Notably, the `NSA was involved "
"<https://www.schneier.com/essays/archives/2007/11/did_nsa_put_a_secret.html>`_"
" in the development of the NIST curves. Even if there is no evidence of "
"back doors in the curves, using a certain curve can pose a question of "
"trust. Fortunately the new Nitrokey Storage 2 and Pro 2 support two kind "
"of curves, namely NIST and Brainpool. In what follows we will use "
"Brainpool curves. `This article <https://arstechnica.com/information-"
"technology/2013/10/a-relatively-easy-to-understand-primer-on-elliptic-"
"curve-cryptography/>`_ provides a good entry point for gaining a general "
"understanding of elliptic-curve cryptography."
msgstr ""
"与RSA相比，椭圆曲线加密法有许多不同的形式（所谓的曲线）。值得注意的是，`NSA参与了<https://www.schneier.com/essays/"
"archives/2007/11/did_nsa_put_a_secret."
"html>`_NIST曲线的开发工作。即使没有证据表明曲线中存在后门，使用某种曲线也会带来信任问题。幸运的是，新的Nitrokey Storage "
"2和Pro "
"2支持两种曲线，即NIST和Brainpool。在下面的内容中，我们将使用Brainpool曲线。`这篇文章<https://arstechnica."
"com/information-technology/2013/10/"
"a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/"
">`_为获得对椭圆曲线密码学的一般理解提供了一个很好的入口。"

#: ../pro/ecc.rst:21
msgid "System Requirements"
msgstr "系统要求"

#: ../pro/ecc.rst:23
msgid ""
"In order to create keys based on elliptic curves a Nitrokey Storage 2 / "
"Pro 2 and GnuPG version 2.1.17 or higher are required."
msgstr "为了创建基于椭圆曲线的钥匙，需要Nitrokey Storage 2 / Pro 2和GnuPG 2.1.17版或更高版本。"

#: ../pro/ecc.rst:26
msgid "You can read Nitrokey’s OpenPGP Card version via ``gpg2 —card-status``:"
msgstr "你可以通过``gpg2 —card-status``读取Nitrokey的OpenPGP卡版本。"

#: ../pro/ecc.rst:36
msgid ""
"The ‘Version’ field represents the version of the OpenPGP Card integrated"
" in the Nitrokey — in this case it is 3.3 as needed for Elliptic-curve "
"cryptography. OpenPGP Card version 2.2 doesn’t support ECC."
msgstr ""
"版本 \"字段表示集成在Nitrokey中的OpenPGP卡的版本--在这种情况下，它是3.3，因为椭圆曲线加密法需要。OpenPGP卡2."
"2版本不支持ECC。"

#: ../pro/ecc.rst:38
msgid ""
"You can learn about the installed version of GnuPG via ``gpg2  "
"--version``. At least version 2.1.16 is required. The newest GnuPG "
"version for Windows can be found `here <https://www.gpg4win.org/>`_ and "
"the newest version for MacOS can be found `here "
"<https://gpgtools.org/>`_. A suitable version of GnuPG is included in the"
" GNU/Linux distributions Ubuntu (since 18.04), Debian (from Stretch "
"onwards), Arch Linux, Fedora (from Release 26 onwards) and openSUSE "
"Tumbleweed. At the end of this articles are instructions how to manually "
"update GnuPG on older Ubuntu versions."
msgstr ""
"你可以通过``gpg2  --version``了解GnuPG的安装版本。至少需要2.1."
"16版本。最新的Windows版GnuPG可以在`这里<https://www.gpg4win.org/"
">`_，最新的MacOS版可以在`这里<https://gpgtools.org/>`_找到。GNU/Linux发行版Ubuntu（从18."
"04开始）、Debian（从Stretch开始）、Arch Linux、Fedora（从26版开始）和openSUSE "
"Tumbleweed中都有合适的GnuPG版本。在这篇文章的末尾有如何在较早的Ubuntu版本上手动更新GnuPG的说明。"

#: ../pro/ecc.rst:42
msgid ""
"GnuPG 2.0 is still being used, but support for it has been discontinuied "
"in 2017. All communication partners must use GnuPG 2.1 or newer for email"
" encryption by means of ECC, otherwise incompatibility issues might "
"arise. Therefore you should only use ECC if you are sure you will be able"
" to circumvent this problem."
msgstr ""
"GnuPG 2.0仍在使用，但对它的支持已在2017年停止。所有通信伙伴必须使用GnuPG 2."
"1或更新版本，通过ECC进行电子邮件加密，否则可能出现不兼容问题。因此，你应该只使用ECC，如果你确定你将能够规避这个问题。"

#: ../pro/ecc.rst:49
msgid "Key Generation on the Nitrokey Storage 2 / Pro 2"
msgstr "在Nitrokey Storage 2 / Pro 2上生成钥匙"

#: ../pro/ecc.rst:51
msgid ""
"Once these requirements are fulfilled, you can get started. (Warning: "
"existing keys will be overwritten in the process!) You now have two "
"options. The first option is to create the key directly on the Nitrokey "
"Storage 2 / Pro 2. The benefit here is that the key will never be outside"
" the device and as such can never be read out. The second option is to "
"import a previously locally generated key. The advantage in this case is "
"that you can securely store a backup of the key, which can then be "
"restored in case the Nitrokey is lost. Only the first option is described"
" below. In order to create a key with backup, you can access `the "
"following instructions "
"<https://www.gniibe.org/memo/software/gpg/keygen-25519.html>`_ and use "
"this `general information "
"<https://wiki.fsfe.org/TechDocs/CardHowtos/CardWithSubkeysUsingBackups>`_"
" to transfer the key to the Nitrokey."
msgstr ""
"一旦这些要求得到满足，你就可以开始了。(警告：现有的钥匙在这个过程中会被覆盖！）你现在有两个选择。第一个选择是直接在Nitrokey Storage 2 "
"/ Pro 2上创建钥匙。这样做的好处是，钥匙将永远不会在设备之外，因此永远不会被读出。第二个选择是导入以前在本地生成的密钥。这种情况的好处是，你可以安全"
"地存储钥匙的备份，一旦硝基钥匙丢失，就可以恢复。下面只介绍第一个选项。为了创建一个带备份的钥匙，你可以访问`下面的说明<https://www."
"gniibe.org/memo/software/gpg/keygen-25519.html>`_并使用这个`一般信息<https://wiki.fsfe"
".org/TechDocs/CardHowtos/CardWithSubkeysUsingBackups>`_来将钥匙转移到Nitrokey上。"

#: ../pro/ecc.rst:53
msgid ""
"Within GnuPG there is already a “generate” command, which can be used to "
"easily create keys on the device. However it is not as yet possible to "
"select the type of key directly, so the key must first be prepared. We "
"use the following commands for this:"
msgstr ""
"在GnuPG中，已经有一个 \"生成 \"命令"
"，可以用来在设备上轻松地创建钥匙。但是，目前还不能直接选择钥匙的类型，所以必须首先准备好钥匙。我们使用以下命令来实现这一点。"

#: ../pro/ecc.rst:61
msgid ""
"Alternatively, other curves could be selected, as described in the next "
"section."
msgstr "另外，也可以选择其他曲线，如下一节所述。"

#: ../pro/ecc.rst:63
msgid ""
"Now we enter ``gpg2 --card-edit`` and see that brainpoolP256r1 is under "
"“key attributes” instead of rsa2048."
msgstr "现在我们输入``gpg2 --card-edit``，看到brainpoolP256r1在 \"密钥属性 \"下而不是rsa2048。"

#: ../pro/ecc.rst:89
msgid "Then we create the key."
msgstr "然后我们创建密钥。"

#: ../pro/ecc.rst:121
msgid ""
"The Nitrokey now incorporates elliptic-curve cryptography instead of RSA "
"keys and can be used as usual."
msgstr "Nitrokey现在采用了椭圆曲线加密法，而不是RSA密钥，可以照常使用。"

#: ../pro/ecc.rst:124
msgid "Available Curves"
msgstr "可用的曲线"

#: ../pro/ecc.rst:126
msgid ""
"In the above procedure we chose the Brainpool curves. Alternatively, NIST"
" curves can be used. The configuration is carried out as follows:"
msgstr "在上述程序中，我们选择了Brainpool的曲线。另外，也可以使用NIST曲线。配置工作按以下方式进行。"

#: ../pro/ecc.rst:135
msgid "Update of GnuPG on Ubuntu"
msgstr "Ubuntu上GnuPG的更新"

#: ../pro/ecc.rst:137
msgid ""
"The following steps are needed only if you are running a Ubuntu version "
"older than 18.04. You can install GnuPG 2.1.18 on such system with the "
"commands below. This involves newer Debian packages, which is the easiest"
" option. This approach has been tested successfully on Ubuntu 17.10 and "
"propbably works on 16.04 as well. However, the occurence of problems "
"during usage can‘t be excluded."
msgstr ""
"只有当你运行的Ubuntu版本超过18.04时才需要以下步骤。你可以用下面的命令在这种系统上安装GnuPG 2.1."
"18。这涉及到较新的Debian软件包，这是最简单的选择。这种方法已经在Ubuntu 17.10上测试成功，可能在16."
"04上也适用。然而，不能排除在使用过程中出现问题的可能性。"

#: ../pro/ecc.rst:152
msgid ""
"In case you want to undo the installation, you have to execute the "
"following commands:"
msgstr "如果你想撤消安装，你必须执行以下命令。"

#: ../storage/linux/firmware-update.rst:2
#: ../storage/windows/firmware-update.rst:2
msgid "Firmware Update"
msgstr "固件更新"

#: ../storage/linux/firmware-update.rst:10
#: ../storage/windows/firmware-update.rst:10
msgid ""
"You should backup all data from the device before upgrading, as firmware "
"upgrades may destroy all data on the device (especially coming from "
"firmware version <0.45)!"
msgstr "在升级之前，你应该备份设备上的所有数据，因为固件升级可能会破坏设备上的所有数据（特别是来自固件版本<0.45的数据）!"

#: ../storage/linux/firmware-update.rst:14
msgid ""
"Download the `Nitrokey App <https://www.nitrokey.com/download>`_ and the "
"program “dfu-programmer” which should be available through your package-"
"manager, e.g. ``apt-get update && apt-get install dfu-programmer`` on "
"Debian-based systems."
msgstr ""
"下载`Nitrokey应用程序<https://www.nitrokey.com/download>`_和 \"dfu-programmer \"程序"
"，这应该可以通过你的软件包管理器获得，例如``apt-get update && apt-get install dfu-programmer``在基于 "
"Debian 的系统上。"

#: ../storage/linux/firmware-update.rst:16
msgid ""
"Download the latest firmware \".hex\" file from `here "
"<https://github.com/Nitrokey/nitrokey-storage-firmware/releases/latest>`_"
" and store it as \"firmware.hex\" in your home folder. Older releases are"
" `here <https://github.com/Nitrokey/nitrokey-storage-"
"firmware/releases>`_."
msgstr ""
"从`这里<https://github.com/Nitrokey/nitrokey-storage-firmware/releases/latest>`"
"_下载最新的固件\".hex\"文件，并将其作为\"firmware.hex\"存储在你的主文件夹中。较早的版本是 `这里 <https://github"
".com/Nitrokey/nitrokey-storage-firmware/releases>`_。"

#: ../storage/linux/firmware-update.rst:18
#: ../storage/windows/firmware-update.rst:18
msgid ""
"Right click on the icon of the Nitrokey App and go to “Configure” -> "
"“Enable Firmware Update”. The default firmware password is ‘12345678’."
msgstr "右击Nitrokey应用程序的图标，进入 \"配置\"-> \"启用固件更新\"。默认的固件密码是 \"12345678\"。"

#: ../storage/linux/firmware-update.rst:25
#: ../storage/windows/firmware-update.rst:25
msgid ""
"The Nitrokey Storage is not detected by Nitrokey App anymore once update "
"mode got activated. You have to proceed with the instructions described "
"below to make it work again."
msgstr "一旦更新模式被激活，Nitrokey应用程序就无法检测到Nitrokey存储。你必须按照下面的说明进行操作，使其重新工作。"

#: ../storage/linux/firmware-update.rst:30
msgid "Open a terminal and execute:"
msgstr "打开一个终端并执行。"

#: ../storage/linux/firmware-update.rst:39
msgid ""
"whereas “firmware.hex” needs to be the path and file name of the firmware"
" which you downloaded in step 2."
msgstr "而 \"firmware.hex \"需要是你在步骤2中下载的固件的路径和文件名。"

#: ../pro/gpa.rst:2
msgid "Setup with Gnu Privacy Assistant (GPA)"
msgstr "用Gnu隐私助理（GPA）进行设置"

#: ../pro/gpa.rst:4
msgid ""
"This document describes how to use Gnu Privacy Assistant (GPA) to set up "
"the Nitrokey for its first usage."
msgstr "本文介绍了如何使用Gnu隐私助手（GPA）来设置Nitrokey的首次使用。"

#: ../pro/gpa.rst:6
msgid ""
"First you need to install Gnu Privacy Assistant (GPA). For Windows you "
"should download and install the `GPG4Win <https://www.gpg4win.org/>`_ "
"package which contains GPA. For Linux you should install the GPA package "
"of your distribution (e.g. on Ubuntu: sudo apt-get install gpa )."
msgstr ""
"首先，你需要安装Gnu隐私助理（GPA）。对于Windows，你应该下载并安装`GPG4Win <https://www.gpg4win.org/"
">`_软件包，其中包含GPA。对于Linux，你应该安装你的发行版的GPA包（例如，在Ubuntu：sudo apt-get install gpa ）。"

#: ../pro/gpa.rst:8
msgid ""
"Start GPA and select the Card Manager; either by pressing the icon at the"
" top or by choosing Card Manager in the Windows menu."
msgstr "启动GPA并选择卡片管理器；可以按顶部的图标或在Windows菜单中选择卡片管理器。"

#: ../pro/gpa.rst:13
msgid ""
"The window of the Card Manager will appear. Enter your salutation, name "
"and optional other information. While doing so you might be asked to "
"enter the admin PIN."
msgstr "将出现卡片管理器的窗口。输入你的问候语、姓名和可选的其他信息。在这样做的时候，你可能会被要求输入管理密码。"

#: ../pro/gpa.rst:18
msgid "Confirm this window and enter the admin PIN in the next window."
msgstr "确认这个窗口，并在下一个窗口输入管理密码。"

#: ../pro/gpa.rst:23
msgid ""
"In the Card Manager window you might need to scroll down until you see "
"the buttons to change the PINs. The term PIN is used interchangeable with"
" \"password\". Press the first button \"Change PIN\" in order to change "
"the user password. Read and confirm the following information window."
msgstr ""
"在卡片管理器窗口中，你可能需要向下滚动，直到你看到改变PIN的按钮。术语PIN与\"密码\"可以互换使用。按第一个按钮\"改变PIN\""
"，以改变用户密码。阅读并确认以下信息窗口。"

#: ../pro/gpa.rst:28
msgid ""
"Choose and enter your own PIN with a minimum length of six characters. "
"This PIN is required for the daily usage of the Nitrokey."
msgstr "选择并输入你自己的PIN码，长度至少为六个字符。在日常使用Nitrokey时，需要输入这个密码。"

#: ../pro/gpa.rst:33
msgid ""
"Go back to the Card Manager window in step three. This time you choose "
"the third button Change PIN in order to change the admin PIN. The admin "
"PIN is required to change the information on the Nitrokey and to change "
"the cryptographic keys. Proceed as described in steps four and five."
msgstr ""
"回到第三步的卡片管理器窗口。这一次，你选择第三个按钮 \"改变PIN\""
"，以改变管理PIN。要改变硝基钥匙上的信息和改变加密钥匙，就需要管理密码。按第四和第五步所述进行。"

#: ../pro/gpa.rst:35
msgid ""
"After changing both the user and the admin PIN, you are back in the Card "
"Manager window. Select \"Generate key\" in the \"Card\" menu."
msgstr "在改变了用户和管理员的PIN后，你又回到了卡片管理器窗口。在\"卡片\"菜单中选择\"生成密钥\"。"

#: ../pro/gpa.rst:40
msgid ""
"Enter your name and e-mail address. You should keep \"backup\" enabled in"
" order to create a backup file of your cryptographic keys. Optionally you"
" might select an expiration date for your cryptographic keys."
msgstr "输入你的姓名和电子邮件地址。你应该保持启用\"备份\"，以便为你的加密钥匙创建一个备份文件。您可以选择为您的密码钥匙选择一个到期日。"

#: ../pro/gpa.rst:45
msgid "Wait until the keys are generated successfully."
msgstr "等待，直到钥匙成功生成。"

#: ../pro/gpa.rst:50
msgid ""
"Enter a strong passphrase for your backup keys. We strongly recommend to "
"store the backup file on a separate storage(e.g. CD-ROM) and on a safe "
"location."
msgstr "为你的备份钥匙输入一个强密码。我们强烈建议将备份文件存储在一个单独的存储器（如CD-ROM）上，并放在一个安全的地方。"

#: ../pro/gpa.rst:55
msgid ""
"Congratulations, your Nitrokey is now ready to use. Please see the "
"`applications <https://www.nitrokey.com/documentation/applications>`_ "
"section for further information of its usage."
msgstr ""
"恭喜你，你的Nitrokey现在已经可以使用了。请参阅`应用<https://www.nitrokey.com/documentation/"
"applications>`_部分，了解更多使用信息。"

#: ../pro/linux/hard-disk-encryption.rst:2
msgid "Hard Disk Encryption"
msgstr "硬盘加密"

#: ../pro/linux/hard-disk-encryption.rst:9
msgid "VeraCrypt (formerly TrueCrypt)"
msgstr "VeraCrypt (以前的TrueCrypt)"

#: ../pro/linux/hard-disk-encryption.rst:11
msgid ""
"`VeraCrypt <https://www.veracrypt.fr/en/Home.html>`_ is a free and Open "
"Source disk encryption software for Windows, macOS, and GNU/Linux. It is "
"the successor of TrueCrypt and thus recommended, although the following "
"instructions should apply to TrueCrypt as well."
msgstr ""
"`VeraCrypt <https://www.veracrypt.fr/en/Home.html>`_是一款适用于Windows、macOS和GNU/"
"Linux的免费开源磁盘加密软件。它是TrueCrypt的继承者，因此被推荐使用，尽管以下说明也应适用于TrueCrypt。"

#: ../pro/linux/hard-disk-encryption.rst:13
msgid ""
"Follow these steps to use the program with `Nitrokey Storage 2 "
"<https://shop.nitrokey.com/shop/product/nitrokey-storage-2-56>`_ or "
"`Nitrokey Pro 2 <https://shop.nitrokey.com/shop/product/nk-pro-2"
"-nitrokey-pro-2-3>`_:"
msgstr ""
"按照这些步骤，在`Nitrokey Storage 2 <https://shop.nitrokey.com/shop/product/nitrokey-"
"storage-2-56>`_或`Nitrokey Pro 2 <https://shop.nitrokey.com/shop/product/nk-"
"pro-2-nitrokey-pro-2-3>`_使用程序。"

#: ../pro/linux/hard-disk-encryption.rst:17
msgid ""
"Install the latest release of `OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki>`_, or download the `PKCS#11 "
"library <http://smartcard-auth.de/download-en.html>`_."
msgstr ""
"安装最新版本的`OpenSC <https://github.com/OpenSC/OpenSC/wiki>`_，或下载`PKCS#11库 <http"
"://smartcard-auth.de/download-en.html>`_。"

#: ../pro/linux/hard-disk-encryption.rst:20
msgid ""
"Choose the library in VeraCrypt under Settings>Preferences>Security Token"
" (location depends on system, e.g. ``/usr/lib/opensc``)."
msgstr ""
"在VeraCrypt的Settings>Preferences>Security Token（位置取决于系统，例如：``/usr/lib/"
"opensc``）中选择库。"

#: ../pro/linux/hard-disk-encryption.rst:22
msgid "Generate a 64 Byte key file via Tools>Keyfile Generator."
msgstr "通过Tools>Keyfile Generator生成一个64字节的密钥文件。"

#: ../pro/linux/hard-disk-encryption.rst:23
msgid ""
"Now you should be able to import the generated key file via Tools>Manage "
"Security Token Keyfiles. You should choose the first Slot (``[0] User "
"PIN``). The keyfile is then stored on the Nitrokey as ‘Private Data "
"Object 1’ (``PrivDO1``)."
msgstr ""
"现在你应该能够通过Tools>Manage Security Token Keyfiles导入生成的密钥文件。你应该选择第一个插槽（``[0] User "
"PIN``）。然后，该密钥文件将作为 \"私人数据对象1\"（``PrivDO1``）存储在Nitrokey上。"

#: ../pro/linux/hard-disk-encryption.rst:27
msgid "After this you should wipe the original keyfile on your Computer securely!"
msgstr "在这之后，你应该安全地擦除你电脑上的原始密钥文件!"

#: ../pro/linux/hard-disk-encryption.rst:29
msgid ""
"Now you can use VeraCrypt with the Nitrokey: Create a container, choose "
"the keyfile on the device as an alternative to a password."
msgstr "现在你可以用Nitrokey使用VeraCrypt：创建一个容器，选择设备上的密钥文件作为密码的替代。"

#: ../pro/linux/hard-disk-encryption.rst:34
msgid "Security Consideration"
msgstr "安全方面的考虑"

#: ../pro/linux/hard-disk-encryption.rst:36
msgid ""
"Please note that VeraCrypt doesn’t make use of the full security which "
"Nitrokey (and smart cards in general) offer. Instead it stores a keyfile "
"on the Nitrokey which theoretically could be stolen by a computer virus "
"after the user enters the PIN."
msgstr ""
"请注意，VeraCrypt并没有利用Nitrokey（以及一般的智能卡）提供的全部安全性。相反，它在Nitrokey上存储了一个密钥文件，理论上，在用户输"
"入PIN后，该文件可能被计算机病毒窃取。"

#: ../pro/linux/hard-disk-encryption.rst:41
msgid ""
"Note: `Aloaha Crypt <http://www.aloaha.com/aloaha-crypt-disk/>`_ is based"
" on TrueCrypt/VeraCrypt but without the described security limitation."
msgstr ""
"注意：`Aloaha Crypt <http://www.aloaha.com/aloaha-crypt-disk/>`_是基于TrueCrypt/"
"VeraCrypt，但没有描述的安全限制。"

#: ../pro/linux/hard-disk-encryption.rst:44
msgid "Hard Disk Encryption on Linux with LUKS/dm-crypt"
msgstr "在Linux上用LUKS/dm-crypt进行硬盘加密"

#: ../pro/linux/hard-disk-encryption.rst:46
msgid ""
"Here are `excellent instructions <http://blog.kumina.nl/2010/07/two-"
"factor-luks-using-ubuntu/>`_ how to use Nitrokey to encrypt your hard "
"disk under Linux with LUKS/dm-crypt. `Other instructions "
"<https://wiki.ubuntu.com/SmartCardLUKSDiskEncryption>`_."
msgstr ""
"这里有`出色的说明<http://blog.kumina.nl/2010/07/two-factor-luks-using-ubuntu/"
">`_如何在Linux下使用Nitrokey用LUKS/dm-crypt加密你的硬盘。`其他说明 <https://wiki.ubuntu.com/"
"SmartCardLUKSDiskEncryption>`_。"

#: ../pro/linux/hard-disk-encryption.rst:48
msgid ""
"Purism has created a `simple script "
"<https://docs.puri.sm/PureBoot/LibremKeyLUKS.html>`_ to add the "
"Nitrokey/LibremKey as a way to unlock LUKS partitions (not tested by "
"Nitrokey yet)."
msgstr ""
"Purism创建了一个`简单的脚本<https://docs.puri.sm/PureBoot/LibremKeyLUKS.html>`_来添加"
"Nitrokey/LibremKey作为解锁LUKS分区的方法（还没有经过Nitrokey测试）。"

#: ../pro/linux/hard-disk-encryption.rst:50
msgid ""
"`This project <https://github.com/artosan/nitroluks/>`_ aims to ease the "
"use of LUKS with the Nitrokey Pro or Storage based on the Password Safe "
"(not tested by Nitrokey yet). A description on how to use it on Gentoo "
"can be found `here <https://amedeos.github.io/gentoo/nitrokey/2019/01/21"
"/gentoo-nitrokey-luks.html>`_."
msgstr ""
"`这个项目<https://github.com/artosan/nitroluks/>`_旨在使LUKS与Nitrokey "
"Pro或基于Password Safe的Storage（尚未经过Nitrokey的测试）的使用更加简便。关于如何在Gentoo上使用它的描述可以在`这里找"
"到<https://amedeos.github.io/gentoo/nitrokey/2019/01/21/gentoo-nitrokey-luks."
"html>`_。"

#: ../pro/linux/hard-disk-encryption.rst:52
msgid ""
"For Arch Linux, see `initramfs-scencrypt <https://github.com/fuhry"
"/initramfs-scencrypt>`_."
msgstr ""
"对于Arch Linux，见`initramfs-scencrypt <https://github.com/fuhry/initramfs-"
"scencrypt>`_。"

#: ../pro/linux/hard-disk-encryption.rst:55
msgid "Storage Encryption on Linux with EncFS"
msgstr "在Linux上用EncFS进行存储加密"

#: ../pro/linux/hard-disk-encryption.rst:59
msgid "Prerequisite"
msgstr "先决条件"

#: ../pro/linux/hard-disk-encryption.rst:61
msgid ""
"Please ensure that you `installed the device driver, changed the default "
"PINs and generated or imported keys with GnuPG "
"<https://www.nitrokey.com/start>`_."
msgstr ""
"请确保你`安装了设备驱动程序，改变了默认的PIN码，并使用GnuPG <https://www.nitrokey.com/start>`_生成或导入密钥。"

#: ../pro/linux/hard-disk-encryption.rst:65
msgid ""
"`EncFS <http://www.arg0.net/encfs>`_ is an easy to utlity for encrypted "
"file systems and it is based on `FUSE "
"<http://de.wikipedia.org/wiki/Filesystem_in_Userspace>`_. You may follow "
"these steps to use it with very long passwords and Nitrokey Pro 2:"
msgstr ""
"`EncFS <http://www.arg0.net/encfs>`_是一个易于使用的加密文件系统，它是基于`FUSE <http://de."
"wikipedia.org/wiki/Filesystem_in_Userspace>`_。你可以按照这些步骤，用很长的密码和Nitrokey Pro "
"2来使用它。"

#: ../pro/linux/hard-disk-encryption.rst:69
msgid "Initialization"
msgstr "初始化"

#: ../pro/linux/hard-disk-encryption.rst:71
msgid "Create a key file with random data:"
msgstr "创建一个具有随机数据的密钥文件。"

#: ../pro/linux/hard-disk-encryption.rst:78
msgid "Encrypt the key file and use the User-ID of your Nitrokey"
msgstr "加密密钥文件，并使用你的Nitrokey的用户ID。"

#: ../pro/linux/hard-disk-encryption.rst:85
msgid "Remove the key file in clear text:"
msgstr "移除明文的密钥文件。"

#: ../pro/linux/hard-disk-encryption.rst:92
msgid "Create mount point:"
msgstr "创建挂载点。"

#: ../pro/linux/hard-disk-encryption.rst:99
msgid "Create the actual encryption folder"
msgstr "创建实际的加密文件夹"

#: ../pro/linux/hard-disk-encryption.rst:108
msgid "Unmount the new file system:"
msgstr "解除对新文件系统的挂载。"

#: ../pro/linux/hard-disk-encryption.rst:118
msgid "Mount encrypted file system and enter PIN of Nitrokey:"
msgstr "挂载加密的文件系统，并输入Nitrokey的PIN码。"

#: ../pro/linux/hard-disk-encryption.rst:125
msgid "After usage, unmount the file system:"
msgstr "使用完毕后，解除对文件系统的挂载。"

#: ../pro/linux/hard-disk-encryption.rst:133
msgid "Storage Encryption on Linux with ECryptFS"
msgstr "在Linux上使用ECryptFS进行存储加密"

#: ../pro/linux/hard-disk-encryption.rst:135
msgid ""
"`eCryptfs <https://www.ecryptfs.org/>`_ is a file based transparent "
"encryption file system for Linux which can be used with Nitrokey through "
"a PKCS#11 driver."
msgstr ""
"`eCryptfs <https://www.ecryptfs.org/"
">`_是一个基于文件的Linux透明加密文件系统，可以通过一个PKCS#11驱动与Nitrokey一起使用。"

#: ../pro/linux/hard-disk-encryption.rst:137
msgid "See `these <http://tkxuyen.com/blog/?p=293>`_ instructions:"
msgstr "见`这些<http://tkxuyen.com/blog/?p=293>`_说明。"

#: ../pro/linux/hard-disk-encryption.rst:139
msgid "Import the certificate and key to the Nitrokey"
msgstr "将证书和密钥导入到Nitrokey。"

#: ../pro/linux/hard-disk-encryption.rst:147
msgid "Create the file ~/.ecryptfsrc.pkcs11:"
msgstr "创建文件~/.ecryptfsrc.pkcs11。"

#: ../pro/linux/hard-disk-encryption.rst:154
msgid "Enter this content:"
msgstr "输入这个内容。"

#: ../pro/linux/hard-disk-encryption.rst:166
msgid "Copy the serialized id for later usage:"
msgstr "复制序列化的ID，供以后使用。"

#: ../pro/linux/hard-disk-encryption.rst:176
msgid ""
"Alternatively, try `ESOSI <http://sourceforge.net/projects/esosi/>`_ or "
"follow these steps using OpenSC and OpenVPN."
msgstr ""
"或者，尝试`ESOSI <http://sourceforge.net/projects/esosi/"
">`_或者使用OpenSC和OpenVPN遵循这些步骤。"

#: ../pro/linux/hard-disk-encryption.rst:178
msgid ""
"Source of the guide: "
"https://www.nitrokey.com/documentation/applications#a:hard-disk-"
"encryption"
msgstr ""
"指南的来源：https://www.nitrokey.com/documentation/applications#a:hard-disk-"
"encryption"

#: ../storage/linux/index.rst:2
msgid "Nitrokey Storage, Linux"
msgstr "Nitrokey Storage, Linux"

#: ../storage/linux/index.rst:13
msgid ""
"To access the OpenPGP smart card of the Nitrokey, install the package "
"libccid. On Debian/Ubuntu based Distributions type in terminal: *sudo "
"apt-get update && sudo apt-get install libccid*"
msgstr ""
"要访问Nitrokey的OpenPGP智能卡，请安装libccid软件包。在基于Debian/Ubuntu的发行版上，在终端键入。*sudo apt-"
"get update && sudo apt-get install libccid*。"

#: ../storage/linux/index.rst:17
msgid ""
"If your distribution has a rather old version of libccid (<1.4.21) you "
"have to add the device information by yourself (for example if you are "
"using Ubuntu 14.04 or older). In this case please follow these "
"`instructions <https://www.nitrokey.com/documentation/frequently-asked-"
"questions-faq#latest-device-driver-missing-on-older-linux-"
"distribution>`_."
msgstr ""
"如果你的发行版有一个相当老的libccid（<1.4.21）版本，你必须自己添加设备信息（例如，如果你使用Ubuntu 14."
"04或更老的版本）。在这种情况下，请遵循这些`说明<https://www.nitrokey.com/documentation/frequently-"
"asked-questions-faq#latest-device-driver-missing-on-older-linux-"
"distribution>`_。"

#: ../storage/linux/index.rst:23
msgid ""
"Download and start the `Nitrokey App "
"<https://www.nitrokey.com/download>`_."
msgstr "下载并启动`Nitrokey App <https://www.nitrokey.com/download>`_。"

#: ../storage/linux/index.rst:26 ../storage/mac/index.rst:19
#: ../storage/windows/index.rst:25
msgid ""
"Open the About window from Nitrokey App’s menu and check if you have the "
"`latest firmware <https://github.com/Nitrokey/nitrokey-storage-"
"firmware/releases>`_ installed. If it’s not the latest, please `update "
"<firmware-update.html>`_."
msgstr ""
"从Nitrokey应用程序的菜单中打开关于窗口，检查你是否安装了`最新的固件<https://github.com/Nitrokey/"
"nitrokey-storage-firmware/releases>`_。如果它不是最新的，请`更新<firmware-update.html>`_。"

#: ../storage/linux/index.rst:32 ../storage/mac/index.rst:24
#: ../storage/windows/index.rst:28
msgid ""
"Use the Nitrokey App to change the default User PIN (default: 123456) and"
" Admin PIN (default: 12345678) to your own choices."
msgstr "使用Nitrokey应用程序，将默认的用户密码（默认：123456）和管理密码（默认：12345678）改为您自己的选择。"

#: ../storage/linux/index.rst:35 ../storage/mac/index.rst:27
#: ../storage/windows/index.rst:31
msgid ""
"Your Nitrokey is now ready to use. `Checkout "
"<https://www.nitrokey.com/documentation/applications>`_ the various use "
"cases and supported applications."
msgstr ""
"你的Nitrokey现在已经可以使用了。`查看<https://www.nitrokey.com/documentation/"
"applications>`_的各种使用情况和支持的应用程序。"

#: ../storage/linux/index.rst:41 ../storage/mac/index.rst:39
#: ../storage/windows/index.rst:35
msgid ""
"For many use cases described, it is necessary to have either OpenPGP or "
"S/MIME keys installed on the device (see below)."
msgstr "对于所述的许多用例，有必要在设备上安装OpenPGP或S/MIME密钥（见下文）。"

#: ../storage/linux/index.rst:45 ../storage/mac/index.rst:43
#: ../storage/windows/index.rst:38
msgid "Key Creation with OpenPGP or S/MIME"
msgstr "用OpenPGP或S/MIME创建密钥"

#: ../storage/linux/index.rst:47 ../storage/mac/index.rst:45
#: ../storage/windows/index.rst:40
msgid ""
"There are two widely used standards for email encryption. While "
"OpenPGP/GnuPG is popular among individuals, S/MIME/x.509 is mostly used "
"by enterprises. If you are in doubt which one to choose, you should use "
"OpenPGP."
msgstr ""
"目前有两种广泛使用的电子邮件加密标准。OpenPGP/GnuPG在个人中很受欢迎，而S/MIME/x."
"509则大多被企业使用。如果你对选择哪一个有疑问，你应该使用OpenPGP。"

#: ../storage/linux/index.rst:52 ../storage/mac/index.rst:50
msgid ""
"`instructions <openpgp.html>`_ for using the OpenPGP standard with the "
"Nitrokey"
msgstr "`说明 <openpgp.html>`_使用Nitrokey的OpenPGP标准。"

#: ../storage/linux/index.rst:55 ../storage/mac/index.rst:53
msgid "`instructions <smime.html>`_ for using S/MIME with the Nitrokey"
msgstr "`说明 <smime.html>`_用Nitrokey使用S/MIME。"

#: ../pro/openpgp.rst:2
msgid "OpenPGP Email Encryption"
msgstr "OpenPGP电子邮件加密"

#: ../pro/openpgp.rst:8 ../pro/smime.rst:11
msgid "There are two widely used standards for email encryption."
msgstr "目前有两种广泛使用的电子邮件加密标准。"

#: ../pro/openpgp.rst:10 ../pro/smime.rst:13
msgid "OpenPGP/GnuPG is popular among individuals,"
msgstr "OpenPGP/GnuPG在个人中很受欢迎。"

#: ../pro/openpgp.rst:12 ../pro/smime.rst:15
msgid "S/MIME/X.509 is mostly used by enterprises."
msgstr "S/MIME/X.509大多被企业使用。"

#: ../pro/openpgp.rst:14
msgid ""
"If you are in doubt which one to choose, you should use OpenPGP. While "
"this page describes the usage of OpenPGP, S/MIME is described `here "
"<smime.html>`_."
msgstr "如果你对选择哪一个有疑问，你应该使用OpenPGP。本页介绍了OpenPGP的用法，而S/MIME则在`这里<smime.html>`_。"

#: ../pro/openpgp.rst:16
msgid ""
"Please familiarize yourself with the general concept behind the OpenPGP "
"standard first, for example by reading `this info graphic "
"<https://emailselfdefense.fsf.org/en/infographic.html>`_ of the Free "
"Software Foundation."
msgstr ""
"请先熟悉OpenPGP标准背后的一般概念，例如通过阅读`这个信息图形<https://emailselfdefense.fsf.org/en/"
"infographic.html>`_的自由软件基金会。"

#: ../pro/openpgp-keygen-backup.rst:11 ../pro/openpgp-keygen-gpa.rst:13
#: ../pro/openpgp-keygen-on-device.rst:19 ../pro/openpgp.rst:19
msgid "Key Generation"
msgstr "密钥生成"

#: ../pro/openpgp.rst:21
msgid "If you do not have OpenPGP keys yet, you need to generate them first."
msgstr "如果你还没有OpenPGP密钥，你需要先生成它们。"

#: ../pro/openpgp.rst:23
msgid ""
"`Generate keys on Nitrokey <openpgp-keygen-gpa.html>`_ - this is the best"
" option if you are unexperienced, but you won’t have a backup of your "
"keys and therefore won’t be able to mitigate the loss of the Nitrokey"
msgstr ""
"`在Nitrokey上生成钥匙 <openpgp-keygen-gpa.html>`_ - "
"如果你没有经验，这是最好的选择，但你不会有钥匙的备份，因此无法减轻Nitrokey的损失。"

#: ../pro/openpgp.rst:29
msgid ""
"`Generate keys on Nitrokey with different algorithm or key size <openpgp-"
"keygen-on-device.html>`_ - this is as secure as the previous option and "
"thus you won’t have a backup as well, but you can change the key "
"attributes (that is the algorithm and key size)"
msgstr ""
"`在Nitrokey上生成具有不同算法或密钥大小的密钥 <openpgp-keygen-on-device.html>`_ - "
"这和之前的选项一样安全，因此你也不会有备份，但你可以改变密钥属性（也就是算法和密钥大小）。"

#: ../pro/openpgp.rst:35
msgid ""
"`Generate keys locally <openpgp-keygen-backup.html>`_ and copy them to "
"Nitrokey - this is the most flexible, expert option, but only secure if "
"your system is not compromised, because you can create a backup key "
"outside your Nitrokey A similar description in french can be found `here "
"<https://xieme-art.org/post/importer-des-clefs-gnupg-dans-sa-nitrokey-"
"pro/>`_."
msgstr ""
"`在本地生成密钥 <openpgp-keygen-backup.html>`_并将其复制到Nitrokey - "
"这是最灵活、最专业的选择，但只有在你的系统没有被破坏时才安全，因为你可以在Nitrokey之外创建一个备份密钥。 类似的法语描述可以在这里找到 ``_。"

#: ../pro/openpgp.rst:44
msgid "Importing Existing Keys"
msgstr "导入现有的钥匙"

#: ../pro/openpgp.rst:46
msgid ""
"If you already have OpenPGP keys you may want to use them with your "
"Nitrokey, instead of generating new ones. Importing exsiting keys works "
"basically the same as generating keys locally first and copy them to the "
"Nitrokey (see above). Therefore, please have a look at the `corresponding"
" instructions <openpgp-keygen-backup.html#key-import>`_. Note that you "
"probably want to generate another subkey for authentication to your "
"existing key. See at the same instructions for `subkey generation "
"<openpgp-keygen-backup.html#subkey-for-authentication>`_."
msgstr ""
"如果你已经有OpenPGP密钥，你可能想在你的Nitrokey上使用它们，而不是生成新的密钥。导入现有密钥的方法与在本地生成密钥并将其复制到Nitroke"
"y上的方法基本相同（见上文）。因此，请看`相应的说明<openpgp-keygen-backup.html#key-"
"import>`_。请注意，你可能想生成另一个子密钥来验证你现有的密钥。请看同样的说明`子密钥生成<openpgp-keygen-backup.html"
"#subkey-for-authentication>`_。"

#: ../pro/openpgp.rst:51 ../pro/smime.rst:59
msgid "You can find further information about the usage on these pages:"
msgstr "你可以在这些网页上找到有关使用的进一步信息。"

#: ../pro/openpgp.rst:53
msgid ""
"for using `OpenPGP encryption with Thunderbird <openpgp-"
"thunderbird.html>`_"
msgstr "为使用`OpenPGP加密的Thunderbird <openpgp-thunderbird.html>`_。"

#: ../pro/openpgp.rst:56
msgid "for using `OpenPGP encryption with Outlook <openpgp-outlook.html>`_"
msgstr "用于使用`OpenPGP加密的Outlook <openpgp-outlook.html>`_"

#: ../pro/openpgp.rst:59
msgid ""
"for using `Claws Mail <https://www.claws-"
"mail.org/plugin.php?plugin=gpg>`_, an email client (and news reader) for "
"Linux and Windows"
msgstr ""
"使用`Claws Mail <https://www.claws-mail.org/plugin."
"php?plugin=gpg>`_，一个Linux和Windows的电子邮件客户端（和新闻阅读器）。"

#: ../pro/openpgp.rst:63 ../pro/smime.rst:67
msgid ""
"for using `Evolution <https://help.gnome.org/users/evolution/stable/mail-"
"encryption.html.en>`_, an email client for the Gnome Desktop on Linux "
"systems"
msgstr ""
"为使用`Evolution <https://help.gnome.org/users/evolution/stable/mail-encryption."
"html.en>`_，Linux系统上Gnome桌面的电子邮件客户端。"

#: ../pro/openpgp.rst:67
msgid "for using `GPGTools <https://gpgtools.org/>`_ on macOS."
msgstr "用于在macOS上使用`GPGTools <https://gpgtools.org/>`_。"

#: ../pro/openpgp-keygen-backup.rst:2
msgid "OpenPGP Key Generation With Backup"
msgstr "带备份的OpenPGP密钥生成"

#: ../pro/openpgp-keygen-backup.rst:8
msgid ""
"The following instructions explain the generation of OpenPGP keys and how"
" to copy them to the Nitrokey. This method has the advantage of providing"
" a backup of the keys in case of losing or breaking the Nitrokey. The "
"instructions are based on the command line interface of GnuPG. Thus, you "
"need to have GnuPG installed on your system. The newest GnuPG version for"
" Windows can be found `here <https://www.gpg4win.org/>`_ and the newest "
"version for MacOS can be found `here <https://gpgtools.org/>`_. Users of "
"Linux systems please install GnuPG with help of the package manager."
msgstr ""
"下面的说明解释了OpenPGP密钥的生成以及如何将其复制到Nitrokey上。这种方法的好处是在Nitrokey丢失或损坏的情况下可以提供钥匙的备份。这些"
"说明是基于GnuPG的命令行界面的。因此，你需要在你的系统上安装GnuPG。最新的Windows版GnuPG可以在`这里<https://www."
"gpg4win.org/>`_，最新的MacOS版可以在`这里<https://gpgtools.org/"
">`_找到。Linux系统的用户请在软件包管理器的帮助下安装GnuPG。"

#: ../pro/openpgp-keygen-backup.rst:13
msgid ""
"At first, you need to generate a key locally. You can decide, which key "
"attributes to use and - most importantly - you can export the key and "
"keep it somewhere save in case you need to restore the key."
msgstr "首先，你需要在本地生成一个密钥。你可以决定使用哪种密钥属性，最重要的是，你可以导出密钥并将其保存在某个地方，以备你需要恢复密钥。"

#: ../pro/openpgp-keygen-backup.rst:16
msgid "Main Key and Encryption Subkey"
msgstr "主密钥和加密子密钥"

#: ../pro/openpgp-keygen-backup.rst:18
msgid ""
"We can use the command ``gpg --full-generate-key --expert`` to start a "
"guided key generation with all possible options. You can choose the key "
"type (usually RSA (1) or ECC (9)), the length of the key and other "
"attributes. The following output is just a simple example, you may choose"
" other values."
msgstr ""
"我们可以使用``gpg --full-generate-key --expert``命令来启动一个具有所有可能选项的指导性密钥生成。你可以选择钥匙类型（通"
"常是RSA（1）或ECC（9）），钥匙的长度和其他属性。下面的输出只是一个简单的例子，你可以选择其他值。"

#: ../pro/openpgp-keygen-backup.rst:81
msgid ""
"The following table illustrates which algorithm can be used on which "
"device, in case you want to use different key attributes."
msgstr "下表说明了在你想使用不同的密钥属性的情况下，哪种算法可用于哪种设备。"

#: ../pro/openpgp-keygen-backup.rst:84 ../pro/openpgp-keygen-on-device.rst:193
msgid "\\"
msgstr "\\"

#: ../pro/openpgp-keygen-backup.rst:90 ../pro/openpgp-keygen-on-device.rst:199
msgid "curve25519 (ECC)"
msgstr "curve25519 (ECC)"

#: ../pro/openpgp-keygen-backup.rst:91 ../pro/openpgp-keygen-on-device.rst:200
msgid "NIST (ECC)"
msgstr "NIST (ECC)"

#: ../pro/openpgp-keygen-backup.rst:92 ../pro/openpgp-keygen-on-device.rst:201
msgid "Brainpool (ECC)"
msgstr "脑库（ECC）"

#: ../pro/openpgp-keygen-backup.rst:93 ../pro/openpgp-keygen-on-device.rst:202
msgid "secp256k1"
msgstr "secp256k1"

#: ../pro/openpgp-keygen-backup.rst:97
msgid "Subkey for Authentication"
msgstr "认证的子密钥"

#: ../pro/openpgp-keygen-backup.rst:99
msgid ""
"You now have a main key with the capability to sign and certify (marked "
"as [SC]) and a subkey for encryption (marked as [E]). It is necessary to "
"have another subkey for use cases in which authentication is needed. This"
" subkey is generated in the next step. Type in ``gpg --edit-key --expert "
"keyID`` to start the process, whereas “keyID” is either the id of the key"
" or the email address used during key generation."
msgstr ""
"你现在有一个能够签名和认证的主钥匙（标记为[SC]）和一个用于加密的子钥匙（标记为[E]）。在需要认证的情况下，有必要拥有另一个子密钥。这个子密钥将在下一"
"步生成。输入``gpg --edit-key --expert keyID``来开始这个过程，而 \"keyID "
"\"是钥匙的id或在钥匙生成时使用的电子邮件地址。"

#: ../pro/openpgp-keygen-backup.rst:120
msgid ""
"Now you are in the interactive mode of GnuPG and you can add a key by "
"simply typing ``addkey``. You need to choose the key you want to use. It "
"is crucial to choose “set your own capabilities”, because we want to have"
" the “authenticate” capability which is not available otherwise. We "
"toggle sign and encrypt by typing ``s`` and ``e`` and we activate "
"authenticate by typing ``a``."
msgstr ""
"现在你处于GnuPG的交互式模式，你可以通过简单地输入``addkey``添加一个密钥。你需要选择你想使用的密钥。选择 \"设置你自己的能力 "
"\"是很关键的，因为我们想拥有 \"验证 \"能力，否则就没有这个能力。我们通过输入``s`和``<xid=\"330\""
"></x>``，我们通过输入``a``激活认证。"

#: ../pro/openpgp-keygen-backup.rst:178
msgid ""
"We quit with ``q``. Afterwards we need to answer the same questions as "
"before. Finally, we have a ready-to-go key set which we can import to our"
" device."
msgstr "我们以``q``退出。之后，我们需要回答和之前一样的问题。最后，我们有一个准备好的密钥集，可以导入到我们的设备中。"

#: ../pro/openpgp-keygen-backup.rst:212
msgid ""
"Now is good time to backup your key. Please keep this backup very secure."
" It is best practice to never have this key on a regular computer which "
"has connection to the internet, so that the key never gets compromised. "
"You can create a backup with something like:"
msgstr ""
"现在是备份你的钥匙的好时机。请保持这个备份非常安全。最好的做法是永远不要把这个密钥放在有互联网连接的普通计算机上，这样密钥就不会被破坏。你可以用以下方法创"
"建一个备份。"

#: ../pro/openpgp-keygen-backup.rst:219
msgid "Key Import"
msgstr "关键进口"

#: ../pro/openpgp-keygen-backup.rst:221
msgid ""
"You have a main key and two subkeys which can be imported to your "
"Nitrokey. Before proceeding please make sure that you really have a "
"backup of the key, if you need one. The ``keytocard`` command used in the"
" next steps will **delete** your key from your disk!"
msgstr ""
"你有一个主钥匙和两个子钥匙，可以导入到你的Nitrokey。在继续进行之前，请确保你真的有一个钥匙的备份，如果你需要的话。在接下来的步骤中使用的``key"
"tocard``命令将从你的磁盘中**删除你的钥匙!"

#: ../pro/openpgp-keygen-backup.rst:223
msgid ""
"We start the process by accessing the interactive interface of GnuPG "
"again with ``gpg --edit-key --expert keyID``, whereas ``keyID`` is either"
" the id of the key or the email address used during key generation."
msgstr ""
"我们用``gpg --edit-key --expert "
"keyID``再次访问GnuPG的交互式界面，而``keyID``是钥匙的id或钥匙生成时使用的电子邮件地址。"

#: ../pro/openpgp-keygen-backup.rst:259
msgid ""
"We just imported the main key to the card. Now we proceed with the two "
"subkeys. We type ``key 1`` to select the encryption subkey and type in "
"``keytocard`` again and select the slot to use."
msgstr ""
"我们刚刚把主钥匙导入卡中。现在我们继续处理两个子密钥。我们输入``key 1``来选择加密子密钥，并输入``keytocard``，再次选择要使用的插槽。"

#: ../pro/openpgp-keygen-backup.rst:288
msgid ""
"Now we deselect the first key with ``key 1`` and select the second subkey"
" with ``key 2`` and move it as well with ``keytocard``. Afterwards we "
"quit and save the changes."
msgstr ""
"现在我们用``key 1``取消对第一个子键的选择，用<xid=\"79\"></x>`key "
"2``并且用``keytocard``移动它。之后，我们退出并保存更改。"

#: ../pro/openpgp-keygen-backup.rst:331
msgid ""
"Your keys are now moved to the Nitrokey and thus secured in hardware. "
"Congratulations!"
msgstr "你的钥匙现在已经转移到了Nitrokey，从而在硬件上得到了保障。祝贺你!"

#: ../pro/openpgp-keygen-backup.rst:334 ../pro/openpgp-keygen-gpa.rst:53
#: ../pro/openpgp-keygen-on-device.rst:206
msgid "Exporting Public Key and Keyserver Usage"
msgstr "导出公钥和钥匙服务器的使用"

#: ../pro/openpgp-keygen-backup.rst:336 ../pro/openpgp-keygen-gpa.rst:55
#: ../pro/openpgp-keygen-on-device.rst:208
msgid ""
"Although you can start to use your Nitrokey right away after generating "
"the keys on your system, you need to import your public key on every "
"system, you want to use the Nitrokey on. So to be prepared you have two "
"options: You either save the public key anywhere you like and use it on "
"another system or you save the public key on a webpage/keyserver."
msgstr ""
"虽然你可以在你的系统上生成钥匙后立即开始使用你的Nitrokey，但你需要在每个你想使用Nitrokey的系统上导入你的公钥。所以为了做好准备，你有两个选"
"择。你可以把公钥保存在你喜欢的任何地方，然后在另一个系统上使用，或者把公钥保存在一个网页/钥匙服务器上。"

#: ../pro/openpgp-keygen-backup.rst:339 ../pro/openpgp-keygen-on-device.rst:211
msgid "Generating a Public Key File"
msgstr "生成公钥文件"

#: ../pro/openpgp-keygen-backup.rst:341
msgid ""
"To get a simple file of your public key, you can just use ``gpg --armor "
"--export keyID > pubkey.asc``. Use either the fingerprint as “keyID” "
"(look at ``gpg -K`` to get it) or just use your email address as an "
"identifier."
msgstr ""
"要获得你的公钥的简单文件，你可以直接使用``gpg --armor --export keyID > pubkey.asc``。使用指纹作为 "
"\"keyID\"（查看``gpg -K``以获得它），或者直接使用你的电子邮件地址作为标识。"

#: ../pro/openpgp-keygen-backup.rst:343
msgid ""
"You can carry this file with you or send it to anyone who you like. This "
"file is not secret at all. If you want to use the Nitrokey on another "
"system, you first import this public key via ``gpg --import pubkey.asc`` "
"and then types ``gpg --card-status`` so that the system knows where to "
"look for this key. That’s all."
msgstr ""
"你可以随身携带这个文件，或者把它发送给你喜欢的人。这个文件一点也不秘密。如果你想在另一个系统上使用Nitrokey，你首先通过``gpg --"
"import pubkey.asc``导入这个公钥，然后输入``gpg --card-status``，这样系统就知道要在哪里寻找这个密钥。这就是全部。"

#: ../pro/openpgp-keygen-backup.rst:347 ../pro/openpgp-keygen-on-device.rst:218
msgid "Uploading the Public Key"
msgstr "上传公钥"

#: ../pro/openpgp-keygen-backup.rst:349 ../pro/openpgp-keygen-on-device.rst:220
msgid ""
"If you do not want to carry a public keyfile with you, you can upload it "
"to keyserver. You can do this by typing ``gpg --keyserver "
"search.keyserver.net --send-key keyID``. If you are using another machine"
" you can just import it by using ``gpg --keyserver search.keyserver.net "
"--recv-key keyID``."
msgstr ""
"如果你不想随身携带公钥文件，你可以把它上传到钥匙服务器。你可以通过输入``gpg --keyserver search.keyserver.net "
"--send-key keyID``来实现。如果你使用另一台机器，你可以通过使用``gpg --keyserver "
"search.keyserver.net --recv-key keyID``导入它。"

#: ../pro/openpgp-keygen-backup.rst:351
msgid ""
"Another possibility is to change the URL setting on your card. Start "
"``gpg --card-edit`` again and first set the URL where the key is situated"
" (e.g. on the keyserver or on your webpage etc.) via the ``url`` command."
" From now on you can import the key on another system by just using the "
"``fetch`` command within the ``gpg --card-edit environment``."
msgstr ""
"另一个可能性是改变你的卡上的URL设置。再次启动``gpg --card-"
"edit``并首先通过``url``命令设置钥匙所在的URL（例如，在钥匙服务器或你的网页上等）。从现在起，你可以通过使用``fetch``命令在``"
"gpg --card-edit environment``中导入另一个系统上的密钥。"

#: ../pro/openpgp-keygen-gpa.rst:2
msgid "OpenPGP Key Generation Using GPA"
msgstr "使用GPA生成OpenPGP密钥"

#: ../pro/openpgp-keygen-gpa.rst:8
msgid ""
"The following instructions explain the generation of OpenPGP keys "
"directly on the Nitrokey with help of the GNU Privacy Assistant (GPA). "
"You won’t be able to create a backup of these keys. Thus, if you lose the"
" Nitrokey or it breaks you can not decrypt mails or use these keys "
"anymore. Please see `here <openpgp-outlook.html>`_ for a comparison of "
"the different methods to generate OpenPGP keys."
msgstr ""
"下面的说明解释了在GNU隐私助手（GPA）的帮助下直接在Nitrokey上生成OpenPGP密钥的过程。你将无法创建这些密钥的备份。因此，如果你丢失了Ni"
"trokey或它坏了，你就不能再解密邮件或使用这些密钥了。请参阅`这里<openpgp-outlook."
"html>`_以了解不同方法生成OpenPGP密钥的比较。"

#: ../pro/openpgp-keygen-gpa.rst:10
msgid ""
"You need to have GnuPG and GPA installed on your system. The newest "
"version for Windows can be found `here <https://www.gpg4win.org/>`_ (make"
" sure to check “GPA” during the installation!). Users of Linux systems "
"please install GnuPG and GPA with help of the package manager (e.g. using"
" ``sudo apt install gnupg gpa`` on Ubuntu)."
msgstr ""
"你需要在你的系统上安装GnuPG和GPA。最新的Windows版本可以在`这里找到<https://www.gpg4win.org/>`_（"
"确保在安装时选中 \"GPA\"！）。Linux系统的用户请在软件包管理器的帮助下安装GnuPG和GPA（例如，在Ubuntu上使用``sudo apt "
"install gnupg gpa``）。"

#: ../pro/openpgp-keygen-gpa.rst:15
msgid ""
"At first, open the GNU Privacy Assistant (GPA). You may are asked to "
"generate a key, you can skip this step for now by clicking “Do it later”."
" In the main window, please click on “Card” or “Card Manager”."
msgstr ""
"首先，打开GNU隐私助理（GPA）。你可能会被要求生成一个密钥，你可以点击 \"以后再做 \"暂时跳过这一步。在主窗口中，请点击 \"卡 \"或 "
"\"卡管理器\"。"

#: ../pro/openpgp-keygen-gpa.rst:22
msgid ""
"Another windows opens. Please go to “Card” -> “Generate key” to start the"
" key generation process."
msgstr "另一个窗口打开。请进入 \"卡片\"-> \"生成密钥\"，开始密钥生成过程。"

#: ../pro/openpgp-keygen-gpa.rst:29
msgid ""
"Now you can put in your name and the email address you want to use for "
"the key that will be generated next. You may choose an expiration date "
"for your key, but you don’t have to."
msgstr "现在你可以输入你的名字和你想用于接下来生成的密钥的电子邮件地址。你可以为你的钥匙选择一个到期日，但你不一定要选择。"

#: ../pro/openpgp-keygen-gpa.rst:31
msgid ""
"**Please do not use the backup checkbox**. This “backup” does only save "
"the encryption key. In case of a loss of the device, you will not be able"
" to restore the whole key set. So on the one hand it is no full backup "
"(use `these instructions <openpgp-keygen-backup.html>`_ instead, if you "
"need one) and on the other hand you risk that someone else can get in "
"possession of your encryption key. The advantage of generating keys on-"
"device is to make sure that keys are stored securely. Therefore, we "
"recommend to skip this half-backup."
msgstr ""
"**请不要使用备份复选框**。这种 \"备份 \"只保存加密密钥"
"。在设备丢失的情况下，你将无法恢复整个密钥集。因此，一方面它不是完整的备份（如果你需要的话，请使用`这些说明<openpgp-keygen-backup."
"html>`_代替），另一方面，你有可能被别人占有你的加密密钥。在设备上生成密钥的好处是确保密钥被安全地存储。因此，我们建议跳过这个半备份。"

#: ../pro/openpgp-keygen-gpa.rst:38
msgid ""
"You will be asked for the admin PIN (default: 12345678) and the user PIN "
"(default: 123456). When the key generation is finished, you can see the "
"fingerprints of the keys on the bottom of the window. You may fill up the"
" fields shown above, which are saved on your Nitrokey as well."
msgstr ""
"你将被要求提供管理密码（默认：12345678）和用户密码（默认：123456）。当钥匙生成完成后，你可以在窗口的底部看到钥匙的指纹。你可以填写上面显示的"
"字段，这些字段也会保存在你的Nitrokey上。"

#: ../pro/openpgp-keygen-gpa.rst:45
msgid ""
"Now you can close the window and go back to the main window. Your key "
"will be visible in the key manager after refreshing. Every application "
"which makes use of GnuPG will work with your Nitrokey as well, because "
"GnuPG is fully aware of the fact, that the keys are stored on your "
"Nitrokey."
msgstr ""
"现在你可以关闭该窗口并回到主窗口。刷新后，你的钥匙将在钥匙管理器中可见。每一个使用GnuPG的应用程序都可以使用你的Nitrokey，因为GnuPG完全知"
"道钥匙是存储在你的Nitrokey上的事实。"

#: ../pro/openpgp-keygen-gpa.rst:62
msgid ""
"Right-click on your key entry in the key manager and click “Export Keys…”"
" to export the public key to a file and/or “Send Keys…” to upload the key"
" to a keyserver."
msgstr ""
"在钥匙管理器中右击你的钥匙条目，点击 \"导出钥匙...... \"将公钥导出到文件中，和/或点击 \"发送钥匙...... \"将钥匙上传至钥匙服务器。"

#: ../pro/openpgp-keygen-gpa.rst:64
msgid ""
"You can carry the keyfile with you or send it to anyone who you like. "
"This file is not secret at all. If you want to use the Nitrokey on "
"another system, you first import this public key via clicking on “Keys” "
"-> “Importing Keys…” and choosing the file."
msgstr ""
"你可以随身携带钥匙文件，或将其发送给任何你喜欢的人。这个文件根本就不是秘密。如果你想在另一个系统上使用Nitrokey，你首先要通过点击 \"钥匙\"-"
"> \"导入钥匙... \"并选择文件来导入这个公钥。"

#: ../pro/openpgp-keygen-gpa.rst:67
msgid ""
"If you do not want to carry a public keyfile with you, you can upload it "
"to keyserver. If you are using another machine you can just import it by "
"using “Server” -> “Retrieve Keys…” and entering your name or key id."
msgstr ""
"如果你不想随身携带公钥文件，你可以把它上传到keyserver。如果你使用的是另一台机器，你可以通过使用 \"服务器\"-> \"检索钥匙... "
"\"并输入你的名字或钥匙ID来导入它。"

#: ../pro/openpgp-keygen-gpa.rst:69
msgid ""
"Another possibility is to change the URL setting on your card. Open the "
"card manager again and fill in the URL where the key is situated (e.g. on"
" the keyserver or on your webpage etc.). From now on you can import the "
"key on another system by right-clicking on the URL and click on “Fetch "
"Key”."
msgstr ""
"另一种可能是改变你的卡片上的URL设置。再次打开卡片管理器，填写钥匙所在的URL（例如在钥匙服务器或你的网页上等）。从现在开始，"
"你可以通过在URL上点击右键并点击 \"Fetch Key\"，将钥匙导入另一个系统。"

#: ../pro/openpgp-keygen-on-device.rst:2
msgid "OpenPGP Key Generation On-Device"
msgstr "在设备上生成OpenPGP密钥"

#: ../pro/openpgp-keygen-on-device.rst:8
msgid ""
"The following instructions explain the generation of OpenPGP keys "
"directly on the Nitrokey. This is done by using the command line "
"interface of GnuPG. Thus, you need to have GnuPG installed on your "
"system. The newest GnuPG version for Windows can be found `here "
"<https://www.gpg4win.org/>`_ and the newest version for MacOS can be "
"found `here <https://gpgtools.org/>`_. Users of Linux systems please "
"install GnuPG with help of the package manager."
msgstr ""
"下面的说明解释了如何在Nitrokey上直接生成OpenPGP密钥。这是通过使用GnuPG的命令行界面完成的。因此，你需要在你的系统上安装GnuPG。最新"
"的Windows版GnuPG可以在`这里<https://www.gpg4win.org/"
">`_，最新的MacOS版可以在`这里<https://gpgtools.org/>`_找到。Linux系统的用户请在软件包管理器的帮助下安装GnuPG。"

#: ../pro/openpgp-keygen-on-device.rst:12
msgid ""
"These instructions are based on GnuPG version 2.2.6 or higher. Some Linux"
" Distributions have an older version installed. In this case please "
"choose a different method as listed `here <openpgp.html>`_ or install a "
"newer version if possible."
msgstr ""
"这些说明是基于GnuPG 2.2.6或更高版本。有些Linux发行版安装的是旧版本。在这种情况下，请选择不同的方法，如`这里<openpgp."
"html>`_或者尽可能地安装一个较新的版本。"

#: ../pro/openpgp-keygen-on-device.rst:21
msgid ""
"The following descriptions explain the basic key generation on-device via"
" GnuPG’s command line interface. The default behaviour is to generate RSA"
" keys of 2048 bit size. If you want to change the key algorithm and "
"length, have a look at the next section first."
msgstr ""
"下面的描述说明了通过GnuPG的命令行界面在设备上生成基本的密钥。默认行为是生成2048比特大小的RSA密钥。如果你想改变钥匙的算法和长度，请先看看下一节"
"。"

#: ../pro/openpgp-keygen-on-device.rst:23
msgid "Open a command line and type ``gpg2 --card-edit``."
msgstr "打开一个命令行，输入``gpg2 --card-edit``。"

#: ../pro/openpgp-keygen-on-device.rst:25 ../pro/smime.rst:29
msgid ""
"To open the Windows command line please push the Windows-key and R-key. "
"Now type ‘cmd.exe’ in the text field and hit enter. To open a Terminal on"
" macOS or GNU/Linux please use the application search (e.g. spotlight on "
"macOS)."
msgstr ""
"要打开Windows命令行，请按下Windows键和R键。现在在文本字段中输入 \"cmd.exe \"并点击回车。要在macOS或GNU/"
"Linux上打开终端，请使用应用程序搜索（例如macOS的spotlight）。"

#: ../pro/openpgp-keygen-on-device.rst:53
msgid ""
"Now you are in the interactive interface of GnuPG. Activate the admin "
"commands with ``admin`` and use ``generate`` afterwards to start the "
"generation of keys."
msgstr "现在你进入了GnuPG的交互界面。用``admin``激活管理命令，之后用``generate``开始生成密钥。"

#: ../pro/openpgp-keygen-on-device.rst:95
msgid ""
"**Please do not create the suggested off-card backup.** This “backup” "
"does only save the encryption key, but not the signature and "
"authentication keys. In case of a loss of the device, you will not be "
"able to restore the whole key set. So on the one hand it is no full "
"backup (use `these instructions <openpgp-keygen-backup.html>`_ instead, "
"if you need one) and on the other hand you risk that someone else can get"
" in possession of your encryption key. The advantage of generating keys "
"on-device is to make sure that keys are stored securely. Therefore, we "
"recommend to skip this half-backup."
msgstr ""
"**请不要创建建议的卡外备份。**这种 \"备份 \"只保存加密密钥"
"，但不保存签名和认证密钥。在设备丢失的情况下，你将无法恢复整个密钥集。因此，一方面，它不是完整的备份（如果你需要，可以使用`这些说明<openpgp-"
"keygen-backup."
"html>`_代替），另一方面，你有可能被其他人占有你的加密密钥。在设备上生成密钥的好处是确保密钥被安全地存储。因此，我们建议跳过这个半备份。"

#: ../pro/openpgp-keygen-on-device.rst:98
msgid ""
"Now you have a complete key set on your device which can be used for the "
"`various applications "
"<https://www.nitrokey.com/documentation/applications>`_ listed on our "
"site. Type ``quit`` and hit enter to exit."
msgstr ""
"现在你的设备上有一个完整的密钥集，可以用于我们网站上列出的各种应用程序`<https://www.nitrokey.com/documentation/"
"applications>`_。输入``quit``并点击回车键退出。"

#: ../pro/openpgp-keygen-on-device.rst:101
msgid "Change Key Attributes"
msgstr "改变关键属性"

#: ../pro/openpgp-keygen-on-device.rst:103
msgid ""
"This section is about changing the key attributes. If you want to use the"
" default values, you can proceed with the next section."
msgstr "本节是关于改变关键属性的。如果你想使用默认值，你可以继续下一节。"

#: ../pro/openpgp-keygen-on-device.rst:105
msgid "Open a command line and type ``gpg2 --card-edit --expert``."
msgstr "打开一个命令行，输入``gpg2 --card-edit --expert``。"

#: ../pro/openpgp-keygen-on-device.rst:131
msgid ""
"Now you are in the interactive interface of GnuPG. As you can see in the "
"“Key attributes” field above, the default value rsa2048 is set. To change"
" them, activate the admin commands with ``admin`` and use ``key-attr`` "
"afterwards to change the attributes of the keys."
msgstr ""
"现在你进入了GnuPG的交互界面。正如你在上面的 \"密钥属性 \"字段中看到的"
"，默认值是rsa2048。要改变它们，用``admin``激活管理命令，然后用``key-attr``来改变钥匙的属性。"

#: ../pro/openpgp-keygen-on-device.rst:162
msgid ""
"You can choose the attribute for each key (that is, signature, encryption"
" and authentication key). Most people will use the same attributes for "
"every key. Type ``list`` to see the results (have look at the “Key "
"attributes” field, which now reads rsa4096)."
msgstr ""
"你可以为每个密钥（即签名、加密和认证密钥）选择属性。大多数人将为每个密钥使用相同的属性。输入``list``以查看结果（请看 \"密钥属性 \"字段"
"，现在是rsa4096）。"

#: ../pro/openpgp-keygen-on-device.rst:188
msgid ""
"Type ``quit`` and hit enter to exit or proceed directly with the previous"
" section to actually generate the keys with the key attributes you just "
"set."
msgstr "输入``quit``，然后点击回车键退出，或者直接进行上一节，用你刚才设置的钥匙属性实际生成钥匙。"

#: ../pro/openpgp-keygen-on-device.rst:190
msgid ""
"The following table illustrates which algorithm can be used on which "
"device."
msgstr "下表说明了哪种算法可以在哪种设备上使用。"

#: ../pro/openpgp-keygen-on-device.rst:213
msgid ""
"To get a simple file of your public key, you can just use ``gpg2 --armor "
"--export keyID > pubkey.asc``. Use either the fingerprint as “keyID” "
"(look at ``gpg -K`` to get it) or just use your email address as an "
"identifier."
msgstr ""
"要获得你的公钥的简单文件，你可以直接使用``gpg2 --armor --export keyID > pubkey.asc``。使用指纹作为 "
"\"keyID\"（查看``gpg -K``来获得它），或者直接使用你的电子邮件地址作为标识。"

#: ../pro/openpgp-keygen-on-device.rst:215
msgid ""
"You can carry this file with you or send it to anyone who you like. This "
"file is not secret at all. If you want to use the Nitrokey on another "
"system, you first import this public key via ``gpg2 --import pubkey.asc``"
" and then types ``gpg2 --card-status`` so that the system knows where to "
"look for this key. That’s all."
msgstr ""
"你可以随身携带这个文件，或者把它发送给你喜欢的人。这个文件一点也不秘密。如果你想在另一个系统上使用Nitrokey，你首先通过``gpg2 --"
"import pubkey.asc``导入这个公钥，然后输入``gpg2 --card-status``，以便系统知道去哪里寻找这个密钥。这就是全部。"

#: ../pro/openpgp-keygen-on-device.rst:222
msgid ""
"Another possibility is to change the URL setting on your card. Start gpg "
"–card-edit again and first set the URL where the key is situated (e.g. on"
" the keyserver or on your webpage etc.) via the ``url`` command. From now"
" on you can import the key on another system by just using the ``fetch`` "
"command within the ``gpg --card-edit`` environment."
msgstr ""
"另一个可能性是改变你卡上的 URL 设置。再次启动 gpg -card-edit 并首先通过 ``url`` 命令设置钥匙所在的 "
"URL（例如，在钥匙服务器或你的网页上等）。从现在起，你可以通过在``fetch``命令在``gpg --card-edit``环境中导入密钥。"

#: ../pro/openpgp-outlook.rst:2
msgid "OpenPGP Email Encryption with Outlook"
msgstr "使用Outlook的OpenPGP电子邮件加密"

#: ../pro/openpgp-outlook.rst:10
msgid ""
"Unfortunately, there is no solution to use OpenPGP in Outlook for macOS "
"yet."
msgstr "不幸的是，目前还没有在Outlook for macOS中使用OpenPGP的解决方案。"

#: ../pro/linux/openvpn-easyrsa.rst:24 ../pro/openpgp-outlook.rst:14
#: ../pro/smime-outlook.rst:9 ../pro/smime-thunderbird.rst:9 ../pro/smime.rst:9
#: ../pro/windows/openpgp-csp.rst:11
msgid "Prerequisites"
msgstr "先决条件"

#: ../pro/openpgp-outlook.rst:16
msgid ""
"If you do not have PGP-Keys on your Nitrokey yet, please look at `this "
"page <openpgp.html>`_ first."
msgstr "如果你的Nitrokey上还没有PGP-Keys，请先看看`这个页面<openpgp.html>`_。"

#: ../pro/openpgp-outlook.rst:18
msgid ""
"You need to have GnuPG installed on your System. The newest GnuPG version"
" for Windows can be found `here <https://www.gpg4win.org>`_. You need to "
"make sure to have “GpgOL” checked during installation process (see "
"below)."
msgstr ""
"你需要在你的系统上安装GnuPG。最新的Windows版GnuPG可以在`这里找到 <https://www.gpg4win.org>`_。"
"你需要确保在安装过程中选中 \"GpgOL\"（见下文）。"

#: ../pro/openpgp-outlook.rst:28
msgid ""
"After installing GPG4Win along with GpgOL, you will see a new icon "
"labeled “Secure” in the composing window. To encrypt and sign a mail you "
"just click on the sign like seen below."
msgstr ""
"在安装了GPG4Win和GpgOL之后，你会在合成窗口中看到一个标有 \"安全 \"的新图标。要对邮件进行加密和签名，你只需点击下面的签名即可。"

#: ../pro/openpgp-outlook.rst:35
msgid ""
"GnuPG will start signing and encrypting the mail as soon as you click on "
"‘send’. You are requested to choose the identity you want to sign with "
"and encrypt for."
msgstr "当你点击 \"发送 \"时，GnuPG将开始对邮件进行签名和加密。你被要求选择你想签名和加密的身份。"

#: ../pro/openpgp-outlook.rst:42
msgid ""
"Furthermore, you are asked for typing in the User PIN of the Nitrokey for"
" signing the mail."
msgstr "此外，还要求你输入Nitrokey的用户密码来签署邮件。"

#: ../pro/openpgp-outlook.rst:49
msgid ""
"You will be asked automatically for your User PIN if you want to read an "
"encrypted mail."
msgstr "如果你想阅读加密的邮件，你会被自动要求提供你的用户密码。"

#: ../pro/openpgp-thunderbird.rst:2
msgid "OpenPGP Email Encryption With Thunderbird"
msgstr "使用雷鸟的OpenPGP电子邮件加密"

#: ../pro/openpgp-thunderbird.rst:9
msgid "Thunderbird 78.3 and newer"
msgstr "雷鸟78.3及以上版本"

#: ../pro/openpgp-thunderbird.rst:11
msgid ""
"At the moment Thunderbird’s 78 support for the OpenPGP emails is not easy"
" to set up. See `Thunderbird’s documentation "
"<https://wiki.mozilla.org/Thunderbird:OpenPGP:Smartcards>`_ for details. "
"Here is a `comprehensive German guide "
"<https://decatec.de/it/thunderbird-78-pgp-verschluesselung-mit-dem-"
"nitrokey-storage/>`_."
msgstr ""
"目前，Thunderbird对OpenPGP邮件的78项支持并不容易设置。详情见`Thunderbird的文档<https://wiki.mozilla."
"org/Thunderbird:OpenPGP:Smartcards>`_。这里有一份`全面的德国指南<https://decatec.de/it/"
"thunderbird-78-pgp-verschluesselung-mit-dem-nitrokey-storage/>`_。"

#: ../pro/openpgp-thunderbird.rst:14 ../pro/smime.rst:72
msgid "Troubleshooting"
msgstr "故障排除"

#: ../pro/openpgp-thunderbird.rst:16
msgid ""
"Error message: ``The configured key ID '4BA0183FCBA844A7' cannot be found"
" on your keyring``"
msgstr ""
"错误信息。``The configured key ID '4BA0183FCBA844A7' cannot be found on your "
"keyring``"

#: ../pro/openpgp-thunderbird.rst:18
msgid "Make sure that the public key is imported to the Thunderbird’s manager and"
msgstr "确保公钥被导入到Thunderbird的管理器和"

#: ../pro/openpgp-thunderbird.rst:19
msgid ""
"The key ID does not contain any whitespace, and consists of 16 characters"
" from range 0-9 A-F"
msgstr "密钥ID不包含任何空格，由16个字符组成，范围为0-9 A-F"

#: ../pro/openpgp-thunderbird.rst:20
msgid "you have GPA or Kleopatra software installed."
msgstr "您已安装GPA或Kleopatra软件。"

#: ../pro/openpgp-thunderbird.rst:22
msgid ""
"Please use Kleopatra or `GPA <openpgp-keygen-gpa.html>`_ software to "
"handle the smart card."
msgstr "请使用Kleopatra或`GPA <openpgp-keygen-gpa.html>`_软件来处理智能卡。"

#: ../pro/openpgp-thunderbird.rst:25
msgid "Thunderbird 77 and older"
msgstr "雷鸟77及以上版本"

#: ../pro/openpgp-thunderbird.rst:28
msgid "Installation"
msgstr "安装"

#: ../pro/openpgp-thunderbird.rst:30
msgid ""
"Install the device driver as described `here "
"<https://www.nitrokey.com/documentation/installation>`_."
msgstr "按照`的描述安装设备驱动程序 <https://www.nitrokey.com/documentation/installation>`_。"

#: ../pro/openpgp-thunderbird.rst:33
msgid ""
"Install `Thunderbird <https://www.thunderbird.net/en-US/>`_ and the Add-"
"on `Enigmail <https://www.enigmail.net/index.php/en/>`_."
msgstr ""
"安装`Thunderbird <https://www.thunderbird.net/en-US/>`_和插件`Enigmail "
"<https://www.enigmail.net/index.php/en/>`_。"

#: ../pro/openpgp-thunderbird.rst:37
msgid "Changing PINs"
msgstr "更改密码"

#: ../pro/openpgp-thunderbird.rst:39
msgid "There are two PINs for the Nitrokey:"
msgstr "Nitrokey有两个密码。"

#: ../pro/openpgp-thunderbird.rst:41
msgid "The User PIN required for daily work"
msgstr "日常工作所需的用户密码"

#: ../pro/openpgp-thunderbird.rst:43
msgid ""
"The Admin PIN is required to change keys or other settings of the device."
" In addition, the Nitrokey can be unlocked (for example, after 3 times "
"incorrect input of the User PIN) by means of the Admin PIN."
msgstr "在改变钥匙或设备的其他设置时，需要有管理密码。此外，Nitrokey可以通过管理密码来解锁（例如，在错误输入3次用户密码后）。"

#: ../pro/openpgp-thunderbird.rst:47
msgid ""
"After receiving the Nitrokey, you should immediately change the User PIN "
"= “123456” and Admin PIN = “12345678”."
msgstr "收到硝基钥匙后，你应立即更改用户密码=\"123456 \"和管理员密码=\"12345678\"。"

#: ../pro/openpgp-thunderbird.rst:51
msgid "Procedure"
msgstr "程序"

#: ../pro/openpgp-thunderbird.rst:53
msgid "Insert the Nitrokey into a USB port on your computer."
msgstr "将Nitrokey插入电脑上的USB接口。"

#: ../pro/openpgp-thunderbird.rst:55
msgid "Start Thunderbird."
msgstr "启动Thunderbird。"

#: ../pro/openpgp-thunderbird.rst:57
msgid ""
"In Thunderbird, select as shown in the following picture. “OpenPGP” → "
"“Manage smart card”"
msgstr "在Thunderbird中，选择如下图所示。\"OpenPGP\" → \"管理智能卡\""

#: ../pro/openpgp-thunderbird.rst:65
msgid "In the “SmartCard Details” window, select “SmartCard → Change PIN”"
msgstr "在 \"智能卡详细信息 \"窗口，选择 \"智能卡→更改密码\""

#: ../pro/openpgp-thunderbird.rst:72
msgid ""
"Select “Change PIN”. This is your User PIN you need for daily work. Enter"
" the current PIN ( “123456” for delivery) and twice your new PIN. For "
"this PIN you can use the characters: a-z A-Z 0-9 / .;;:- !? () [] {}% +. "
"The PIN should be at least 6 characters long. Click “OK”."
msgstr ""
"选择 \"更改密码\"。这是你在日常工作中需要的用户密码。输入当前的PIN码（\"123456 \"用于送货"
"）和两次你的新PIN码。对于这个密码，你可以使用以下字符：a-z A-Z 0-9 / ...；；：- !?() [] {}% +.密码应该至少有6个字符。"
"点击 \"确定\"。"

#: ../pro/openpgp-thunderbird.rst:83
msgid "Repeat the procedure for the Admin PIN. “SmartCard → Change PIN”"
msgstr "重复管理密码的程序。\"智能卡→更改密码\""

#: ../pro/openpgp-thunderbird.rst:90
msgid ""
"Select Change Admin PIN. This is your Admin PIN that you only rarely "
"need. Enter the current PIN ( “12345678” for delivery) and the new PIN "
"twice. For this PIN, you can use the characters: a-z A-Z 0-9 / .;;:- !? "
"() [] {}% +. The PIN should be at least 8 characters long. Click “OK”."
msgstr ""
"选择 \"更改管理员密码\"。这是你的管理密码，你很少需要。输入当前的PIN码（\"12345678\""
"，用于交付）和新的PIN码两次。对于这个PIN，您可以使用以下字符：a-z A-Z 0-9 / ...；；：- !?() [] {}% +."
"该PIN码应至少有8个字符。点击 \"确定\"。"

#: ../pro/openpgp-thunderbird.rst:101
msgid ""
"You have now changed the PINs and should continue to generate your "
"personal keys."
msgstr "你现在已经改变了PIN码，应该继续生成你的个人密钥。"

#: ../pro/openpgp-thunderbird.rst:104
msgid "Generation of Keys"
msgstr "钥匙的产生"

#: ../pro/openpgp-thunderbird.rst:106
msgid ""
"To encrypt data and e-mails, a key pair consisting of a public key and a "
"private key, must first be generated. The so-called public key is used to"
" **en**\\ crypt the data or e-mails. You can distribute this to all those"
" with whom you want to communicate securely (for example, publish it "
"publicly on your site). The so-called private key is used to **de**\\ "
"crypt the data or messages. This key should **NEVER** be made known! "
"Usually, you also do not have direct access to it (see below), since this"
" is stored securely on the Nitrokey. Use the Nitrokey to create both keys"
" using the following procedure:"
msgstr ""
"要对数据和电子邮件进行加密，首先必须生成一个由公钥和私钥组成的密钥对。所谓的公钥是用来对数据或电子邮件进行***/加密的。你可以把它分发给所有你想与之进行"
"安全通信的人（例如，在你的网站上公开发布）。所谓的私钥是用来对数据或邮件进行****加密的。这把钥匙应该***永远不被人知道!通常情况下，你也不能直接接触"
"到它（见下文），因为它被安全地储存在Nitrokey上。使用Nitrokey创建这两把钥匙的程序如下。"

#: ../pro/openpgp-thunderbird.rst:109
msgid "Insert the Nitrokey into a USB port on your computer. StartThunderbird"
msgstr "将Nitrokey插入电脑上的USB接口。启动Thunderbird"

#: ../pro/openpgp-thunderbird.rst:112
msgid ""
"In Thunderbird, select as shown in the following picture „OpenPGP“ → "
"„Manage Smart Card“"
msgstr "在Thunderbird中，选择如下图所示的 \"OpenPGP\"→\"管理智能卡\""

#: ../pro/openpgp-thunderbird.rst:115
msgid "In the “SmartCard details” window, select “SmartCard” → “Generate key”"
msgstr "在 \"智能卡详情 \"窗口，选择 \"智能卡\"→\"生成密钥\""

#: ../pro/openpgp-thunderbird.rst:118
msgid ""
"In the following window, select your e-mail address for which you want to"
" generate keys. Verify that the e-mail address specified in “User ID” is "
"correct. You can also specify whether a private key backup copy should be"
" stored on your computer."
msgstr ""
"在下面的窗口中，选择你的电子邮件地址，你想为其生成密钥。确认在 \"用户ID \"中指定的电子邮件地址是正确的"
"。你还可以指定是否要在你的电脑上存储一个私钥备份副本。"

#: ../pro/openpgp-thunderbird.rst:128
msgid ""
"If you do not create a backup copy, you have no chance to get your "
"encrypted data if the Nitrokey is lost or damaged!"
msgstr "如果你不创建一个备份，在Nitrokey丢失或损坏的情况下，你就没有机会得到你的加密数据!"

#: ../pro/openpgp-thunderbird.rst:136
msgid ""
"It is recommended to store this safety device. Select “Save key copy of "
"the key outside the Smard Card”. Then enter your personal password for "
"the backup copy under “Passphrase”. This password should not be less than"
" 8 characters, and should contain both uppercase and lowercase letters "
"and numbers. You can also use a long sentence, but avoid known prose or "
"lyric. Also, no name or known term should be used."
msgstr ""
"建议储存这个安全装置。选择 \"在Smard卡外保存钥匙副本\"。然后在 \"Passphrase \"下输入备份副本的个人密码"
"。这个密码不应少于8个字符，并应包含大写和小写字母和数字。你也可以使用一个长句子，但要避免已知的散文或抒情诗。另外，不应使用姓名或已知术语。"

#: ../pro/openpgp-thunderbird.rst:144
msgid ""
"**Allowed characters**: a-z A-Z 0-9 /.,;:-!?( )%+ (no umlauts ä,ü,ö,Ä,Ü,Ö"
" or ß)"
msgstr "**允许的字符**: a-z A-Z 0-9 /。,;:-!( )%+ (没有 umlauts ä、ü、ö、Ä、Ü、Ö 或 ß)"

#: ../pro/openpgp-thunderbird.rst:146
msgid ""
"**Poor Password**: qwerty123, ILoveSusi3, Password, If you can dream it, "
"you can do it."
msgstr "**可怜的密码**: qwerty123, ILoveSusi3, 密码, 如果你能梦想，你就能做到。"

#: ../pro/openpgp-thunderbird.rst:148
#, python-format
msgid ""
"**Strong Password**: g(Ak?2Pn7Yn or Ki.stg2bLqzp%d or A dog with greeen "
"Earz and fife legs (spelling errors increase security)"
msgstr "**强密码**：g(Ak?2Pn7Yn或Ki.stg2bLqzp%d或一只有格里恩-厄兹和法夫腿的狗（拼写错误会增加安全性）。"

#: ../pro/openpgp-thunderbird.rst:150
msgid ""
"You do **not** need this password for daily work. It is only necessary "
"for the restoration of the secret key, e.g. if you have lost the "
"Nitrokey. Therefore, keep the password in a safe place."
msgstr "在日常工作中，你不**需要这个密码。只有在恢复密匙时才需要，例如，如果你丢失了Nitrokey。因此，请将该密码保存在安全的地方。"

#: ../pro/openpgp-thunderbird.rst:152
msgid ""
"You can also specify whether and when the key should be automatically "
"invalid. This means, from this point onwards, no more e-mails can be "
"encrypted with this key and you have to create a new key pair."
msgstr "你还可以指定该密钥是否以及何时自动失效。这意味着，从这时起，就不能再用这个密钥加密电子邮件了，你必须创建一个新的密钥对。"

#: ../pro/openpgp-thunderbird.rst:154
msgid "Finally, click on “Generate key pair”."
msgstr "最后，点击 \"生成密钥对\"。"

#: ../pro/openpgp-thunderbird.rst:161
msgid "You are now asked if the key should be generated. Confirm with “Yes”."
msgstr "现在会问你是否应该生成密钥。请确认 \"是\"。"

#: ../pro/openpgp-thunderbird.rst:168
msgid ""
"In order for the program to write your keys to the stick, you must enter "
"the admin PIN and the user PIN (changed above)."
msgstr "为了让程序把你的钥匙写到记忆棒上，你必须输入管理密码和用户密码（上面已经改变）。"

#: ../pro/openpgp-thunderbird.rst:176
msgid ""
"The key generation can take a few minutes. Do not terminate the program "
"prematurely!"
msgstr "钥匙的生成可能需要几分钟的时间。不要过早地终止该程序!"

#: ../pro/openpgp-thunderbird.rst:178
msgid ""
"When the key generation is complete, you receive the following message. A"
" certificate is now created that allows you to invalidate your key in an "
"emergency. This certificate is automatically saved with your private key."
" This should be printed out or backed up on at least one other external "
"medium so that you can revoke the validity of the keys if your keys and "
"backups are lost. Click “Yes”"
msgstr ""
"当密钥生成完成后，你会收到以下信息。现在已经创建了一个证书，允许你在紧急情况下使你的钥匙失效。该证书会自动与你的私钥一起保存。这应该被打印出来或至少备份到"
"另一个外部媒介上，这样，如果你的钥匙和备份丢失，你就可以撤销钥匙的有效性。点击 \"是\""

#: ../pro/openpgp-thunderbird.rst:185
msgid ""
"You can now select the directory in which the backup copy is stored. This"
" copy is encrypted with your password entered above. This means that no "
"one can read or use the keys without your password. Do not give your "
"password to anyone. This file with the name of your e-mail address and "
"the suffix “.asc” should be backed up on another medium. After selecting "
"the directory, click “Save”."
msgstr ""
"现在你可以选择存储备份副本的目录。这个副本是用你上面输入的密码加密的。这意味着，没有你的密码，任何人都不能阅读或使用这些钥匙。不要把你的密码给任何人。"
"这个带有你的电子邮件地址名称和后缀\".asc \"的文件应该被备份在另一个介质上。选择目录后，点击 \"保存\"。"

#: ../pro/openpgp-thunderbird.rst:192
msgid "Here you must again specify your user PIN or passphrase. Then click “OK”"
msgstr "在这里你必须再次指定你的用户密码或口令。然后点击 \"确定\""

#: ../pro/openpgp-thunderbird.rst:200
msgid ""
"You will now see the message that the certificate was created and saved. "
"Click “OK”"
msgstr "现在你会看到证书已创建并保存的信息。点击 \"确定\""

#: ../pro/openpgp-thunderbird.rst:208
msgid ""
"Key generation is now complete. You can now exit the program (File - "
"Close)."
msgstr "钥匙生成现在已经完成。你现在可以退出程序（文件-关闭）。"

#: ../pro/openpgp-thunderbird.rst:216
msgid ""
"Your Nitrokey is personalized and ready to use. **Have fun with the "
"secure email encryption!**"
msgstr "你的Nitrokey是个性化的，可以随时使用。**在安全的电子邮件加密中享受乐趣！**。"

#: ../pro/linux/openvpn-easyrsa.rst:2
msgid "OpenVPN Configuration with Easy-RSA"
msgstr "用Easy-RSA配置OpenVPN"

#: ../pro/linux/openvpn-easyrsa.rst:11
msgid ""
"This guide is work-in-progress, and will be updated accordinlgy. Please "
"take this status into consideration."
msgstr "本指南是正在进行的工作，并将根据情况进行更新。请考虑到这一状况。"

#: ../pro/linux/openvpn-easyrsa.rst:13
msgid ""
"This guide shows how to configure OpenVPN clients to login using a "
"`Nitrokey Pro 2 <https://shop.nitrokey.com/shop/product/nk-pro-2"
"-nitrokey-pro-2-3>`_ or a `Nitrokey Storage 2 "
"<https://shop.nitrokey.com/de_DE/shop/product/nitrokey-storage-2-56>`_. "
"For software key management we will be using `Easy-RSA "
"<https://github.com/OpenVPN/easy-rsa>`_, a utility that has been evolving"
" alongside OpenVPN."
msgstr ""
"本指南展示了如何配置OpenVPN客户端使用`Nitrokey Pro 2 <https://shop.nitrokey.com/shop/"
"product/nk-pro-2-nitrokey-pro-2-3>`_或`Nitrokey Storage 2 <https://shop."
"nitrokey.com/de_DE/shop/product/nitrokey-storage-2-56>`_登陆。对于软件密钥管理，我们将使用"
"`Easy-RSA <https://github.com/OpenVPN/easy-rsa>`_，一个与OpenVPN一起发展的工具。"

#: ../pro/linux/openvpn-easyrsa.rst:17
msgid ""
"To sign the certificates, we will use a `Nitrokey HSM 2 "
"<https://shop.nitrokey.com/shop/product/nk-pro-2-nitrokey-pro-2-3>`_ set "
"up as `Certificate Authority <certificate-authority.html#creating-the-"
"intermediate-certificate-authority>`_, however this guide does not cover "
"the set up of the CA itself (it is clear and `well documented here "
"<certificate-authority.html#sign-a-server-certificate>`_)."
msgstr ""
"为了签署证书，我们将使用`Nitrokey HSM 2 <https://shop.nitrokey.com/shop/product/nk-pro-2"
"-nitrokey-pro-2-3>`_设置为`认证机构<certificate-authority.html#creating-the-"
"intermediate-certificate-authority>`_。然而，本指南并不包括CA本身的设置（它很清楚，并且`这里有很好的记录"
"<certificate-authority.html#sign-a-server-certificate>`_）。"

#: ../pro/linux/openvpn-easyrsa.rst:20
msgid ""
"We will use Easy-RSA, because it seems to provide some flexibility, and "
"allows key management via external PKIs. We will use it on the server to "
"issue the signing request, and repeat the same process on the client. The"
" Certificate Signing Requests will be signed by the CA on the Nitorkey "
"HSM, and re-transmitted to the server and the client."
msgstr ""
"我们将使用Easy-RSA，因为它似乎提供了一些灵活性，并允许通过外部PKI进行密钥管理。我们将在服务器上使用它来发出签名请求，并在客户端重复同样的过程。"
"证书签名请求将由Nitorkey HSM上的CA签名，并重新传送到服务器和客户端。"

#: ../pro/linux/openvpn-easyrsa.rst:26
msgid ""
"In the following documentation we will require 3 different machines as "
"following:"
msgstr "在下面的文件中，我们将需要3台不同的机器，如下。"

#: ../pro/linux/openvpn-easyrsa.rst:28
msgid "OpenVPN server (v. 2.5) on Debian 10 (EC2 virtual machine - AWS)"
msgstr "OpenVPN服务器（2.5版）在Debian 10上（EC2虚拟机-AWS）。"

#: ../pro/linux/openvpn-easyrsa.rst:30
msgid "OpenVPN client (v. 2.4.9) on Fedora 30 (local machine)"
msgstr "Fedora 30上的OpenVPN客户端（2.4.9版）（本地机）。"

#: ../pro/linux/openvpn-easyrsa.rst:32
msgid ""
"The Certificate Authority will be accessible from a standalone machine "
"with Fedora 30 (local machine)"
msgstr "证书颁发机构将可以从一台装有Fedora 30的独立机器上访问（本地机器）。"

#: ../pro/linux/openvpn-easyrsa.rst:35
msgid ""
"To interact with the devices we will require `OpenSC 0.20 "
"<https://github.com/OpenSC/OpenSC/wiki>`_ installed on the client and CA "
"machine (the local machines). You can follow the instructions to set it "
"up in `this link (*Unix) <https://github.com/OpenSC/OpenSC/wiki"
"/Compiling-and-Installing-on-Unix-flavors>`_."
msgstr ""
"为了与设备互动，我们需要在客户机和CA机（本地机器）上安装`OpenSC 0.20 <https://github.com/OpenSC/OpenSC/"
"wiki>`_。你可以按照`这个链接（*Unix）<https://github.com/OpenSC/OpenSC/wiki/Compiling-"
"and-Installing-on-Unix-flavors>`_中的说明来设置它。"

#: ../pro/linux/openvpn-easyrsa.rst:38
msgid "To download the dependencies on Fedora machines we can this instruction:"
msgstr "要在Fedora机器上下载依赖项，我们可以用这个指令。"

#: ../pro/linux/openvpn-easyrsa.rst:44
msgid ""
"For Debian Linux, more recent OpenSC packages are available `here "
"<https://github.com/Nitrokey/opensc-build>`_."
msgstr ""
"对于Debian Linux，更多最新的OpenSC软件包可以在`这里获得 <https://github.com/Nitrokey/opensc-"
"build>`_。"

#: ../pro/linux/openvpn-easyrsa.rst:46
msgid "We will use the following Nitrokeys for physical key management:"
msgstr "我们将使用以下硝基钥匙进行物理钥匙管理。"

#: ../pro/linux/openvpn-easyrsa.rst:48
msgid ""
"An authentication key using the `Nitrokey Pro 2 (pdf) "
"<https://www.nitrokey.com/files/doc/Nitrokey_Pro_factsheet.pdf>`_"
msgstr ""
"一个使用`Nitrokey Pro 2 (pdf)的认证密钥 <https://www.nitrokey.com/files/doc/"
"Nitrokey_Pro_factsheet.pdf>`_"

#: ../pro/linux/openvpn-easyrsa.rst:51
msgid ""
"A Certificate Authority (CA) using the `Nitrokey HSM 2 (pdf) "
"<https://www.nitrokey.com/files/doc/Nitrokey_HSM_factsheet.pdf>`_"
msgstr ""
"一个使用`Nitrokey HSM 2 (pdf) <https://www.nitrokey.com/files/doc/"
"Nitrokey_HSM_factsheet.pdf>`_的证书机构（CA）。"

#: ../pro/linux/openvpn-easyrsa.rst:54
msgid ""
"As a reminder, to build a Certificate Authority on Nitrokey HSM 2, you "
"may follow the instructions available `in the documentation <certificate-"
"authority.html#sign-a-server-certificate>`_."
msgstr ""
"作为提醒，要在Nitrokey HSM 2上建立一个证书颁发机构，你可以按照文档`中提供的说明<certificate-authority."
"html#sign-a-server-certificate>`_。"

#: ../pro/linux/openvpn-easyrsa.rst:56
msgid ""
"Alternatively you may set up your own CA on a `on a separate machine "
"<https://www.digitalocean.com/community/tutorials/how-to-set-up-and-"
"configure-a-certificate-authority-ca-on-ubuntu-20-04>`_, or use the "
"OpenVPN tutorial which also relies on `Easy-RSA <https://openvpn.net"
"/community-resources/setting-up-your-own-certificate-authority-ca/>`_. "
"The last 2 options rely on software solutions for key management."
msgstr ""
"另外，你可以在`单独的机器上<https://www.digitalocean.com/community/tutorials/how-to-set-"
"up-and-configure-a-certificate-authority-ca-on-"
"ubuntu-20-04>`_设置你自己的CA，或者使用OpenVPN教程，它也依赖于`Easy-RSA <https://openvpn.net/"
"community-resources/setting-up-your-own-certificate-authority-ca/"
">`_。后面2个选项依靠软件解决方案进行密钥管理。"

#: ../pro/linux/openvpn-easyrsa.rst:61
msgid "Server side"
msgstr "服务器端"

#: ../pro/linux/openvpn-easyrsa.rst:64
msgid "1. Install OpenVPN"
msgstr "1.安装OpenVPN"

#: ../pro/linux/openvpn-easyrsa.rst:66
msgid "First we need to enable IP Forwarding by editing ``/etc/sysctl.conf`` file"
msgstr "首先，我们需要通过编辑``/etc/sysctl.conf``文件启用IP转发功能。"

#: ../pro/linux/openvpn-easyrsa.rst:72
msgid "Uncomment or edit accordingly the following line"
msgstr "取消注释或相应地编辑以下一行"

#: ../pro/linux/openvpn-easyrsa.rst:78
msgid "Close after saving it, and enter this command"
msgstr "保存后关闭，并输入以下命令"

#: ../pro/linux/openvpn-easyrsa.rst:84
msgid ""
"Once IP forwarding is done, we will need to download the latest release "
"of OpenvPN for our Debian 10 server, according to `these instructions "
"<https://community.openvpn.net/openvpn/wiki/OpenvpnSoftwareRepos>`_:"
msgstr ""
"一旦IP转发完成，我们将需要为我们的Debian 10服务器下载最新版本的OpenvPN，根据`这些说明<https://community."
"openvpn.net/openvpn/wiki/OpenvpnSoftwareRepos>`_。"

#: ../pro/linux/openvpn-easyrsa.rst:86
msgid "Change to root and download the GPG key that signed the package"
msgstr "改为根目录，下载签署软件包的GPG密钥。"

#: ../pro/linux/openvpn-easyrsa.rst:93
msgid "Add the URL of the adequate OpenVPN packages to the ``sources.list`` file"
msgstr "在``sources.list``文件中添加足够的OpenVPN包的URL。"

#: ../pro/linux/openvpn-easyrsa.rst:100
msgid ""
"We downloaded OpenVPN 2.5 as “password prompt” requires at least OpenVPN "
"`version 2.4.8 <https://community.openvpn.net/openvpn/ticket/1215>`_ to "
"login."
msgstr ""
"我们下载了OpenVPN 2.5，因为 \"密码提示 \"至少需要OpenVPN `版本2.4.8 <https://community.openvpn."
"net/openvpn/ticket/1215>`_才能登陆。"

#: ../pro/linux/openvpn-easyrsa.rst:103
msgid "Next we download OpenVPN"
msgstr "接下来我们下载OpenVPN"

#: ../pro/linux/openvpn-easyrsa.rst:109
msgid ""
"If you want to check the version, it possible by calling ``--version`` "
"and print the following:"
msgstr "如果你想检查版本，可以通过调用``--version``并打印如下。"

#: ../pro/linux/openvpn-easyrsa.rst:122
msgid "2. Install Easy-RSA"
msgstr "2.安装Easy-RSA"

#: ../pro/linux/openvpn-easyrsa.rst:124
msgid ""
"To build the PKI, we will download the latest version of Easy-RSA on the "
"server and client machines. To get the latest release, go to the "
"`Releases page on the official EasyRSA GitHub project "
"<https://github.com/OpenVPN/easy-rsa/releases>`_, copy the download link "
"for the file ending in ``.tgz``, and then paste it into the following "
"command:"
msgstr ""
"为了构建PKI，我们将在服务器和客户机上下载最新版本的Easy-"
"RSA。要获得最新版本，请到EasyRSA官方GitHub项目的`Releases页面<https://github.com/OpenVPN/"
"easy-rsa/releases>`_，复制以``.tgz``结尾的文件下载链接，然后将其粘贴到以下命令。"

#: ../pro/linux/openvpn-easyrsa.rst:126
msgid "Download the latest release"
msgstr "下载最新版本"

#: ../pro/linux/openvpn-easyrsa.rst:133
msgid "Extract the tarball"
msgstr "提取tarball文件"

#: ../pro/linux/openvpn-easyrsa.rst:142
msgid "3. Create a PKI for OpenVPN server"
msgstr "3.为OpenVPN服务器创建一个PKI"

#: ../pro/linux/openvpn-easyrsa.rst:144
msgid ""
"Before you can create your OpenVPN server’s private key and certificate, "
"you need to create a local Public Key Infrastructure directory on your "
"OpenVPN server. You will use this directory to manage the server and "
"clients’ certificate requests, instead of making them directly on your CA"
" server."
msgstr ""
"在创建OpenVPN服务器的私钥和证书之前，你需要在OpenVPN服务器上创建一个本地公钥基础设施目录。你将使用这个目录来管理服务器和客户的证书请求，而不"
"是直接在你的CA服务器上提出。"

#: ../pro/linux/openvpn-easyrsa.rst:146
msgid ""
"To build a PKI directory on your OpenVPN server, you’ll need to populate "
"a file called ``vars`` with some default values."
msgstr "要在你的OpenVPN服务器上建立一个PKI目录，你需要在一个名为``vars``的文件中填充一些默认值。"

#: ../pro/linux/openvpn-easyrsa.rst:148
msgid "Create a ``vars`` file"
msgstr "创建一个``vars``文件"

#: ../pro/linux/openvpn-easyrsa.rst:156
msgid "Once the file is opened, paste in the following two lines"
msgstr "一旦文件被打开，粘贴以下两行内容"

#: ../pro/linux/openvpn-easyrsa.rst:163
msgid ""
"These are the only two lines that you need in this ``vars`` file on your "
"OpenVPN server since it will not be used as a Certificate Authority. They"
" will ensure that your private keys and certificate requests are "
"configured to use Elliptic Curve Cryptography (ECC) to generate keys, and"
" secure signatures for your clients and OpenVPN server."
msgstr ""
"这是你在OpenVPN服务器上的``vars``文件中唯一需要的两行，因为它不会被用作证书授权。他们将确保你的私钥和证书请求被配置为使用椭圆曲线加密法（E"
"CC）来生成密钥，并为你的客户和OpenVPN服务器提供安全签名。"

#: ../pro/linux/openvpn-easyrsa.rst:165
msgid ""
"In regards to the choice of the cryptographic algorithms, I follow the "
"model in `this tutorial <https://www.digitalocean.com/community/tutorials"
"/how-to-set-up-and-configure-an-openvpn-server-on-centos-8>`_, and you "
"can customize these according to your specific needs."
msgstr ""
"关于加密算法的选择，我遵循`本教程<https://www.digitalocean.com/community/tutorials/how-to-"
"set-up-and-configure-an-openvpn-server-on-centos-8>`_中的模式，你可以根据你的具体需要来定制这些算法。"

#: ../pro/linux/openvpn-easyrsa.rst:167
msgid "Initialize the PKI"
msgstr "初始化PKI"

#: ../pro/linux/openvpn-easyrsa.rst:169
msgid ""
"Once you have populated the ``vars`` file you can proceed with creating "
"the PKI directory. To do so, run the easyrsa script with the init-pki "
"option:"
msgstr "一旦你填充了``vars``文件，就可以继续创建PKI目录。要做到这一点，请使用init-pki选项运行easyrsa脚本。"

#: ../pro/linux/openvpn-easyrsa.rst:175
msgid ""
"After you’ve initialized your PKI on the OpenVPN server, you are ready to"
" move on to the next step, which is creating an OpenVPN server "
"certificate request and private key."
msgstr "在你初始化了OpenVPN服务器上的PKI后，你就可以进入下一步了，也就是创建OpenVPN服务器证书请求和私钥。"

#: ../pro/linux/openvpn-easyrsa.rst:178
msgid "4. Create ``server.req`` and ``server.key``"
msgstr "4.创建``server.req`和``server.key``。"

#: ../pro/linux/openvpn-easyrsa.rst:180
msgid ""
"Now that your OpenVPN server has all the prerequisites installed, the "
"next step is to generate a key pair composed of a private key (to keep "
"secret), and a Certificate Signing Request (``.csr``) on your OpenVPN "
"server."
msgstr ""
"现在你的OpenVPN服务器已经安装了所有先决条件，下一步是在你的OpenVPN服务器上生成一个由私钥（保密）和证书签名请求（``."
"csr``）组成的密钥对。"

#: ../pro/linux/openvpn-easyrsa.rst:182
msgid ""
"In general terms, on systems where we generate a key and request, these "
"files are left unencrypted by using the ``nopass`` argument, since "
"servers usually need to start up without any password input. This "
"generates an *unencrypted key*, so mind *protect its access and file "
"permissions* carefully."
msgstr ""
"一般来说，在我们生成密钥和请求的系统上，这些文件通过使用``nopass``参数而不被加密，因为服务器通常需要在没有任何密码输入的情况下启动。这就产生了一"
"个*未加密的密钥，所以要注意*保护其访问和文件权限*。"

#: ../pro/linux/openvpn-easyrsa.rst:186
msgid "Configuration notes from OpenVPN:"
msgstr "来自OpenVPN的配置说明。"

#: ../pro/linux/openvpn-easyrsa.rst:188
msgid ""
"The server, and each client, must have their own cert and key file. The "
"server and all clients will use the same CA file."
msgstr "服务器和每个客户都必须有自己的证书和密钥文件。服务器和所有客户将使用同一个CA文件。"

#: ../pro/linux/openvpn-easyrsa.rst:190
msgid "Server certificate should have the following:"
msgstr "服务器证书应具有以下内容。"

#: ../pro/linux/openvpn-easyrsa.rst:192
msgid "``keyUsage:  digitalSignature, keyEncipherment``"
msgstr "``keyUsage:  digitalSignature, keyEncipherment``"

#: ../pro/linux/openvpn-easyrsa.rst:194
msgid "``extendedKeyUsage: serverAuth``"
msgstr "``extendedKeyUsage: serverAuth``"

#: ../pro/linux/openvpn-easyrsa.rst:196
msgid "Create the signing request for the server"
msgstr "为服务器创建签名请求"

#: ../pro/linux/openvpn-easyrsa.rst:198
msgid ""
"Navigate to the ``~/easyrsa`` directory on your OpenVPN Server as your "
"non-root user, and enter the following commands:"
msgstr "以非root用户身份导航到OpenVPN服务器上的``~/easyrsa`目录，并输入以下命令。"

#: ../pro/linux/openvpn-easyrsa.rst:205
msgid ""
"This will create a private key for the server and a certificate request "
"file called ``server.req``."
msgstr "这将为服务器创建一个私钥和一个名为``的证书请求文件，server.req``。"

#: ../pro/linux/openvpn-easyrsa.rst:207
msgid ""
"Once you have a signed certificate, you’ll transfer it back to the "
"OpenVPN server."
msgstr "一旦你有了签名的证书，你就把它转回OpenVPN服务器。"

#: ../pro/linux/openvpn-easyrsa.rst:209
msgid "Copy the key to the OpenVPN server directory"
msgstr "复制密钥到OpenVPN服务器目录"

#: ../pro/linux/openvpn-easyrsa.rst:215
msgid ""
"After completing these steps, you have successfully created a private key"
" for your OpenVPN server. You have also generated a Certificate Signing "
"Request for the OpenVPN server."
msgstr "完成这些步骤后，你已经成功为你的OpenVPN服务器创建了一个私钥。你还为OpenVPN服务器生成了一个证书签名请求。"

#: ../pro/linux/openvpn-easyrsa.rst:219
msgid "File extensions for certificate signing requests"
msgstr "证书签署请求的文件扩展名"

#: ../pro/linux/openvpn-easyrsa.rst:221
msgid ""
"The file extension that is adopted by the CA and HSM tutorial indicates "
"the creation of a ``.csr`` file, however Easy-RSA creates certificate "
"signing requests with a ``.req`` extension."
msgstr "CA和HSM教程采用的文件扩展名表示创建``.csr``文件，然而Easy-RSA创建的证书签署请求是``.req``扩展名。"

#: ../pro/linux/openvpn-easyrsa.rst:225
msgid ""
"We will use interchangeably both extensions, while making sure that we "
"transfer the right files to the Certificate Authority, and generate a "
"final certificate with a ``.crt`` extension."
msgstr "我们将交替使用这两个扩展名，同时确保将正确的文件传输给证书颁发机构，并生成一个带有``.crt``扩展的最终证书。"

#: ../pro/linux/openvpn-easyrsa.rst:229
msgid ""
"In the next section of this guide, we will sign a ``.req`` file with our "
"CA on deployed on the HSM 2 device. For this purpose, I will use a "
"dedicated machine to sign the requests."
msgstr "在本指南的下一节，我们将用我们部署在HSM 2设备上的CA签署一个``.req``文件。为此，我将使用一台专用机器来签署请求。"

#: ../pro/linux/openvpn-easyrsa.rst:232
msgid "5. Sign and retrieve ``server.crt``"
msgstr "5.签署和检索``server.crt``。"

#: ../pro/linux/openvpn-easyrsa.rst:234
msgid ""
"The following instructions require the transfer of the ``server.req`` (or"
" ``server.csr``) file to the CA system."
msgstr "以下指令要求将``server.req``（或``server.csr``）文件传输到CA系统。"

#: ../pro/linux/openvpn-easyrsa.rst:237
msgid ""
"The transfer itself is not security sensitive, though it is wise to "
"verify if the received file matches the sender’s copy, if the transport "
"is untrusted."
msgstr "传输本身并不具有安全敏感性，不过，如果传输不受信任，验证收到的文件是否与发送者的副本相符是明智的。"

#: ../pro/linux/openvpn-easyrsa.rst:239
msgid ""
"In order to go through these steps, I will extensively rely on `these "
"instructions <certificate-authority.html#creating-the-intermediate-"
"certificate-authority>`_, to sign the certificate signing requests, once "
"we generated them with Easy-RSA."
msgstr ""
"为了完成这些步骤，我将广泛依靠`这些说明<certificate-authority.html#creating-the-intermediate-"
"certificate-authority>`_，来签署证书签署请求，一旦我们用Easy-RSA生成它们。"

#: ../pro/linux/openvpn-easyrsa.rst:242
msgid "5.1. Sign the ``server.req`` file"
msgstr "5.1.签署``server.req``文件"

#: ../pro/linux/openvpn-easyrsa.rst:244
msgid ""
"On the local machine dedicated to access the HSM, we will use the tools "
"provided by Opensc 0.20 in order to sign the ``.req`` file, and send it "
"back to the OpenVPN server. We assume we have transferred the file from "
"the server machine to the CA machine."
msgstr ""
"在专用于访问HSM的本地机器上，我们将使用Opensc 0.20提供的工具来签署``."
"req``文件，并把它送回OpenVPN服务器。我们假设我们已经将文件从服务器机器传输到CA机器。"

#: ../pro/linux/openvpn-easyrsa.rst:246
msgid ""
"First we start by plugging the HSM Nitrokey, and enter this instruction "
"for listing the keys available."
msgstr "首先，我们先插上HSM Nitrokey，并输入这个指令，列出可用的按键。"

#: ../pro/linux/openvpn-easyrsa.rst:248
msgid "Query the list of available devices"
msgstr "查询可用设备的列表"

#: ../pro/linux/openvpn-easyrsa.rst:256
msgid "The key’s URI should be in this format:"
msgstr "该钥匙的URI应该是这种格式。"

#: ../pro/linux/openvpn-easyrsa.rst:262
msgid "Create ``openvpn/`` directory under ``certificate-authority/``"
msgstr "在``openvpn/``目录下创建``certificate-authority/``。"

#: ../pro/linux/openvpn-easyrsa.rst:269
msgid "Sign the ``server.req``"
msgstr "签署``server.req``。"

#: ../pro/linux/openvpn-easyrsa.rst:276
msgid "5.2. Retrieve the ``server.crt`` file to the server machine"
msgstr "5.2.检索``server.crt``文件到服务器机上"

#: ../pro/linux/openvpn-easyrsa.rst:278
msgid "Transfer the signed certificates to the server"
msgstr "将签名的证书转移到服务器上"

#: ../pro/linux/openvpn-easyrsa.rst:280
msgid ""
"From the CA machine, copy the files ``server.crt`` and ``chain.crt`` to "
"the OpenVPN server. In this example we will use the ``scp`` command as "
"following:"
msgstr ""
"从CA机器上复制文件``server.crt`和``chain.crt``到OpenVPN服务器。在这个例子中，我们将使用``scp``命令，如下所示。"

#: ../pro/linux/openvpn-easyrsa.rst:286
msgid "Place the certificates on the server’s directory"
msgstr "将证书放在服务器的目录上"

#: ../pro/linux/openvpn-easyrsa.rst:294
msgid "CA Certificate and ``chain.crt``"
msgstr "CA证书和``chain.crt``。"

#: ../pro/linux/openvpn-easyrsa.rst:296
msgid ""
"In the above, the CA returns the signed sever certificate, and includes "
"the CA certificate ``CA.crt`` which is the ``chain.crt`` file. This can "
"be done over an insecure channel, though the client is encouraged to "
"confirm if the received ``chain.crt`` is valid, if the transport is "
"untrusted."
msgstr ""
"在上面，CA返回已签名的sever证书，并包括CA证书``CA.crt``，这是``chain.crt`` "
"文件。这可以通过不安全的通道进行，尽管鼓励客户端确认收到的``chain.crt``是否有效，如果传输是不信任的。"

#: ../pro/linux/openvpn-easyrsa.rst:302
msgid ""
"It is possible to rename the file ``chain.crt`` file to ``CA.crt`` on the"
" target machine, however we will use ``chain.crt`` in the next "
"instructions."
msgstr "可以在目标机上将``chain.crt``文件重命名为``CA.crt`。但是我们将在接下来的说明中使用``chain.crt``。"

#: ../pro/linux/openvpn-easyrsa.rst:307
msgid "6. Configure the OpenVPN server"
msgstr "6.配置OpenVPN服务器"

#: ../pro/linux/openvpn-easyrsa.rst:309
msgid ""
"A connection that uses TLS requires multiple `certificates and keys for "
"authentication <https://wiki.teltonika-"
"networks.com/view/OpenVPN_configuration_examples>`_. Now that we issued "
"and signed those, we can place them in the right directories. The "
"breakdown of the certificates and keys that must be located at the root "
"directory are the following:"
msgstr ""
"一个使用TLS的连接需要多个`证书和密钥用于认证<https://wiki.teltonika-networks.com/view/OpenVPN_con"
"figuration_examples>`_。现在，我们发布并签署了这些证书，我们可以把它们放在正确的目录中。必须位于根目录下的证书和密钥的分类如下。"

#: ../pro/linux/openvpn-easyrsa.rst:320
msgid ""
"On your OpenVPN server, now you can create the configuration file "
"``server.conf`` with your favorite text editor. The file can be "
"configured according to your needs, while we make sure to change the "
"server certificate and key sections according the names you chose for the"
" your the files we signed:"
msgstr ""
"在你的OpenVPN服务器上，现在你可以用你喜欢的文本编辑器创建配置文件``server."
"conf``。该文件可以根据你的需要进行配置，同时我们确保根据你为我们签署的文件选择的名称来改变服务器证书和密钥部分。"

#: ../pro/linux/openvpn-easyrsa.rst:329
msgid "Here is the configuration file we can use for testing these instructions:"
msgstr "这里是我们可以用来测试这些指令的配置文件。"

#: ../pro/linux/openvpn-easyrsa.rst:359
msgid "To test if the configuration functions properly, we can use this command:"
msgstr "为了测试配置的功能是否正常，我们可以使用这个命令。"

#: ../pro/linux/openvpn-easyrsa.rst:366
msgid "7. Start the OpenVPN service on the server"
msgstr "7.在服务器上启动OpenVPN服务"

#: ../pro/linux/openvpn-easyrsa.rst:368
msgid ""
"Enable the OpenVPN service by adding it to systemctl, and start it using "
"these commands:"
msgstr "将OpenVPN服务添加到systemctl中启用，并使用这些命令启动它。"

#: ../pro/linux/openvpn-easyrsa.rst:375
msgid "To Double check if the OpenVPN service is active use this command:"
msgstr "要重复检查OpenVPN服务是否激活，请使用此命令。"

#: ../pro/linux/openvpn-easyrsa.rst:381
msgid "The OpenVPN should be running at this point."
msgstr "这时，OpenVPN应该正在运行。"

#: ../pro/linux/openvpn-easyrsa.rst:386
msgid "Client side configuration"
msgstr "客户端配置"

#: ../pro/linux/openvpn-easyrsa.rst:400
msgid "1. Install OpenVPN and Easy-RSA"
msgstr "1.安装OpenVPN和Easy-RSA"

#: ../pro/linux/openvpn-easyrsa.rst:402
msgid "Install the software"
msgstr "安装软件"

#: ../pro/linux/openvpn-easyrsa.rst:404
msgid ""
"We can use directly ``dnf install`` to install OpenVPN 2.4.9 and Easy-RSA"
" 3.0.7"
msgstr "我们可以直接使用``dnf install``来安装OpenVPN 2.4.9 和 Easy-RSA 3.0.7"

#: ../pro/linux/openvpn-easyrsa.rst:410
msgid "Then we create as non-root a directory for Easy RSA called ``Easy-RSA``"
msgstr "然后我们为Easy RSA创建一个非根目录，名为``Easy-RSA``。"

#: ../pro/linux/openvpn-easyrsa.rst:416
msgid "And link it to the Easy RSA package we just installed"
msgstr "并将其链接到我们刚刚安装的Easy RSA软件包上"

#: ../pro/linux/openvpn-easyrsa.rst:423
msgid "2. Create a PKI for the OpenVPN client"
msgstr "2.为OpenVPN客户端创建一个PKI"

#: ../pro/linux/openvpn-easyrsa.rst:425
msgid ""
"In the same manner we created a PKI on the OpenVPN server, we will create"
" a PKI using Easy-RSA on the client side."
msgstr "按照我们在OpenVPN服务器上创建PKI的方式，我们将在客户端使用Easy-RSA创建一个PKI。"

#: ../pro/linux/openvpn-easyrsa.rst:428
msgid "3. Create a ``client.req`` and ``client.key``"
msgstr "3.创建一个``client.req`和``client.key``。"

#: ../pro/linux/openvpn-easyrsa.rst:430
msgid ""
"In the same manner we issued the key pair on the sever, we generate a key"
" pair for the client which will be composed of the ``client.req`` file "
"and the ``client.key`` file. The latter must be kept secret on the client"
" machine."
msgstr ""
"以我们在服务器上发布密钥对的同样方式，我们为客户机生成一个密钥对，它将由``client.req`文件和``client."
"key`文件组成。后者必须在客户机上保持秘密。"

#: ../pro/linux/openvpn-easyrsa.rst:434
msgid "4. Sign ``client.req`` and issue the ``client.crt`` file"
msgstr "4.签署``client.req``并发布``client.crt``文件"

#: ../pro/linux/openvpn-easyrsa.rst:436
msgid ""
"To transfer the ``client.req`` file to the CA machine, we will use the "
"same method as we did for the ``server.req`` file."
msgstr "要把``client.req``文件传输到CA机器，我们将使用与``server.req``文件同样的方法。"

#: ../pro/linux/openvpn-easyrsa.rst:438
msgid ""
"Once transferred, on the CA machine we sign the certificate signing "
"request file with this command"
msgstr "一旦转移，在CA机器上我们用这个命令签署证书签署请求文件"

#: ../pro/linux/openvpn-easyrsa.rst:445
msgid "5. Import ``client.crt`` on the Nitrokey from the CA machine"
msgstr "5.从CA机器上导入``client.crt``在Nitrokey上。"

#: ../pro/linux/openvpn-easyrsa.rst:447
msgid ""
"After creating the ``client.crt`` file, we plug the Nitrokey Pro 2 device"
" in the CA machine, and import the ``.crt`` to the Pro 2 device using "
"this command:"
msgstr ""
"在创建了``client.crt``文件后，我们将Nitrokey Pro 2设备插入CA机器，并使用这个命令将``.crt``导入到Pro 2设备。"

#: ../pro/linux/openvpn-easyrsa.rst:453
msgid ""
"You can see if the key is effectively stored on the Nitrokey using this "
"command:"
msgstr "你可以用这个命令查看钥匙是否有效地存储在Nitrokey上。"

#: ../pro/linux/openvpn-easyrsa.rst:459
msgid "Or alternatively"
msgstr "或者说是"

#: ../pro/linux/openvpn-easyrsa.rst:465
msgid ""
"Fore more commands you can refer to the `OpenSC wiki "
"<https://github.com/OpenSC/OpenSC/wiki/OpenPGP-card>`_."
msgstr ""
"更多的命令你可以参考`OpenSC wiki <https://github.com/OpenSC/OpenSC/wiki/OpenPGP-"
"card>`_。"

#: ../pro/linux/openvpn-easyrsa.rst:468
msgid "6. Retrieve the ``chain.crt`` file from the CA machine"
msgstr "6.从CA机器上获取``chain.crt``文件"

#: ../pro/linux/openvpn-easyrsa.rst:470
msgid ""
"While we keep the ``client.crt``\\ stored on the nitrokey Pro 2 device, "
"we must retrieve the ``chain.crt`` file on the client machine, and store "
"it in the adequate directory. We may use ``scp`` as in the method "
"explained in the server section of this guide."
msgstr ""
"虽然我们把``client.crt``\\ stored on the nitrokey Pro 2 device, we must retrieve "
"the ``chain.crt``文件保存在客户端机器上，并把它存放在足够的目录中。我们可以使用``scp``，正如本指南的服务器部分所解释的方法。"

#: ../pro/linux/openvpn-easyrsa.rst:473
msgid "7. Configure the client to interact with the Nitrokey"
msgstr "7.配置客户端以与Nitrokey进行交互。"

#: ../pro/linux/openvpn-easyrsa.rst:475
msgid ""
"Now back on the client machine, we will plug the Nitrokey Pro and use it "
"to establish the VPN connection with the server. In general terms, a "
"connection that uses TLS requires multiple certificates and keys for "
"authentication:"
msgstr "现在回到客户机上，我们将插入Nitrokey Pro，用它来建立与服务器的VPN连接。一般来说，使用TLS的连接需要多个证书和密钥进行认证。"

#: ../pro/linux/openvpn-easyrsa.rst:484
msgid ""
"For this guide we can the following ``client.conf`` file, and add the "
"required options to it accordingly:"
msgstr "对于这个指南，我们可以在下面的``client.conf``文件中，相应地添加需要的选项。"

#: ../pro/linux/openvpn-easyrsa.rst:506
msgid "Determine the correct object"
msgstr "确定正确的对象"

#: ../pro/linux/openvpn-easyrsa.rst:508
msgid ""
"Each PKCS#11 provider can support multiple devices. In order to view the "
"available object list you can use the following command:"
msgstr "每个PKCS#11提供者可以支持多个设备。为了查看可用的对象列表，你可以使用以下命令。"

#: ../pro/linux/openvpn-easyrsa.rst:524
msgid ""
"Each certificate/private key pair have unique ``Serialized id`` string. "
"The serialized id string of the requested certificate should be "
"specified, in the configuration file. We can do this by adding the "
"``pkcs11-id`` option using single quote marks."
msgstr ""
"每个证书/私钥对都有唯一的``Serialized "
"id``字符串。应在配置文件中指定请求的证书的序列化id字符串。我们可以通过添加``pkcs11-id``选项，使用单引号来实现这一点。"

#: ../pro/linux/openvpn-easyrsa.rst:530
msgid "Add retrieved Serialized ID to the configuration file"
msgstr "将检索到的序列化ID添加到配置文件中"

#: ../pro/linux/openvpn-easyrsa.rst:532
msgid ""
"Using your favorite text editor, open the server.conf file, and add the "
"following lines, while taking care to insert your own ``Serialized id``:"
msgstr "使用你喜欢的文本编辑器，打开server.conf文件，并添加以下几行，同时注意插入你自己的``Serialized id``。"

#: ../pro/linux/openvpn-easyrsa.rst:539
msgid ""
"For additional `settings related to OpenVPN <https://openvpn.net"
"/community-resources/how-to/>`_ authentication, you may also add few "
"lines to handle key maganagement, although it is optional."
msgstr ""
"对于与OpenVPN有关的额外`设置<https://openvpn.net/community-resources/how-to/"
">`_认证，你也可以添加几行来处理密钥管理，尽管它是可选的。"

#: ../pro/linux/openvpn-easyrsa.rst:543 ../pro/linux/openvpn-easyrsa.rst:567
msgid "Click to view the code"
msgstr "点击查看代码"

#: ../pro/linux/openvpn-easyrsa.rst:560
msgid "Optional step"
msgstr "可选步骤"

#: ../pro/linux/openvpn-easyrsa.rst:563
msgid ""
"If you need to test the configuration, with and without the token on the "
"Nitrokey, you may add lines to the same ``client.conf`` and "
"comment/uncomment the relevant lines according to your needs:"
msgstr ""
"如果你需要测试配置，在有和没有Nitrokey的情况下，你可以在同一个``client.conf``中添加行，并根据你的需要注释/取消注释相关行。"

#: ../pro/linux/openvpn-easyrsa.rst:577
msgid "Configure the OpenVPN client"
msgstr "配置OpenVPN客户端"

#: ../pro/linux/openvpn-easyrsa.rst:579
msgid "The final configuration file ``client.conf`` should look like this one:"
msgstr "最终的配置文件``client.conf``应该看起来像这样的文件。"

#: ../pro/linux/openvpn-easyrsa.rst:622
msgid "Known issues"
msgstr "已知问题"

#: ../pro/linux/openvpn-easyrsa.rst:624
msgid ""
"There are some known issues related to OpenVPN login with OpenSC. Please "
"consult these issues `here <https://github.com/Nitrokey/wiki/wiki/3rd-"
"Party-Issues>`_."
msgstr ""
"有一些与OpenVPN登录OpenSC有关的已知问题。请参考这些问题 `这里 <https://github.com/Nitrokey/wiki/"
"wiki/3rd-Party-Issues>`_。"

#: ../pro/linux/openvpn-easyrsa.rst:627
msgid "8. Start the OpenVPN client"
msgstr "8.启动OpenVPN客户端"

#: ../pro/linux/openvpn-easyrsa.rst:629
msgid "Start the OpenVPN service on the client"
msgstr "在客户端启动OpenVPN服务"

#: ../pro/linux/openvpn-easyrsa.rst:631
msgid "Enable the OpenVPN service, and start it using these commands:"
msgstr "启用OpenVPN服务，并使用这些命令启动它。"

#: ../pro/linux/openvpn-easyrsa.rst:638
msgid "To double check if the OpenVPN service is active use this command:"
msgstr "要仔细检查OpenVPN服务是否激活，请使用此命令。"

#: ../pro/linux/openvpn-easyrsa.rst:644
msgid "Enter your User PIN"
msgstr "输入你的用户密码"

#: ../pro/linux/openvpn-easyrsa.rst:646
msgid "When executing OpenVPN client, Nitrokey’s PIN needs to be entered:"
msgstr "在执行OpenVPN客户端时，需要输入Nitrokey的PIN。"

#: ../pro/linux/openvpn-easyrsa.rst:656
msgid ""
"Unfortunately OpenVPN doesn’t seem to be able to establish a handshake "
"and stops at an error as reported `here <https://support.nitrokey.com/t"
"/nitrokey-pro-with-openssl-1-1-1-tls-1-3-and-rsa-based-"
"certificates/2180/2>`_, `here <https://support.nitrokey.com/t/openvpn-"
"openssl-error-141f0006/2637>`_ and `here "
"<https://community.openvpn.net/openvpn/ticket/1215>`_"
msgstr ""
"不幸的是，OpenVPN似乎无法建立握手，并停在一个错误上，如报告的那样 `这里 <https://support.nitrokey.com/t/"
"nitrokey-pro-with-openssl-1-1-1-tls-1-3-and-rsa-based-certificates/2180/"
"2>`_。`这里 <https://support.nitrokey.com/t/openvpn-openssl-error-141f0006/"
"2637>`_和 `这里 <https://community.openvpn.net/openvpn/ticket/1215>`_"

#: ../pro/linux/openvpn-easyrsa.rst:660
msgid "error output"
msgstr "错误输出"

#: ../pro/linux/openvpn-easyrsa.rst:662
msgid ""
"``$ sudo openvpn --client --config client.conf`` ``Fri Sep 11 17:42:01 "
"2020 OpenVPN 2.4.9 x86_64-redhat-linux-gnu [SSL (OpenSSL)] [LZO] [LZ4] "
"[EPOLL] [PKCS11] [MH/PKTINFO] [AEAD] built on Apr 24 2020`` ``Fri Sep 11 "
"17:42:01 2020 library versions: OpenSSL 1.1.1g FIPS  21 Apr 2020, LZO "
"2.08`` ``Fri Sep 11 17:42:01 2020 PKCS#11: Adding PKCS#11 provider "
"'/usr/lib64/pkcs11/opensc-pkcs11.so'`` ``Enter User PIN (OpenPGP card) "
"token Password: ******`` ``Fri Sep 11 17:42:12 2020 TCP/UDP: Preserving "
"recently used remote address: [AF_INET]18.157.180.240:1194`` ``Fri Sep 11"
" 17:42:12 2020 Socket Buffers: R=[212992->212992] S=[212992->212992]`` "
"``Fri Sep 11 17:42:12 2020 UDP link local: (not bound)`` ``Fri Sep 11 "
"17:42:12 2020 UDP link remote: [AF_INET]18.157.180.240:1194`` ``Fri Sep "
"11 17:42:12 2020 NOTE: UID/GID downgrade will be delayed because of "
"--client, --pull, or --up-delay`` ``Fri Sep 11 17:42:12 2020 TLS: Initial"
" packet from [AF_INET]18.157.180.240:1194, sid=d79690cf 9e38ce89`` ``Fri "
"Sep 11 17:42:12 2020 VERIFY OK: depth=1, CN=server_CA`` ``Fri Sep 11 "
"17:42:12 2020 VERIFY KU OK`` ``Fri Sep 11 17:42:12 2020 Validating "
"certificate extended key usage`` ``Fri Sep 11 17:42:12 2020 ++ "
"Certificate has EKU (str) TLS Web Server Authentication, expects TLS Web "
"Server Authentication`` ``Fri Sep 11 17:42:12 2020 VERIFY EKU OK`` ``Fri "
"Sep 11 17:42:12 2020 VERIFY OK: depth=0, CN=server`` ``Fri Sep 11 "
"17:42:12 2020 OpenSSL: error:141F0006:SSL "
"routines:tls_construct_cert_verify:EVP lib`` ``Fri Sep 11 17:42:12 2020 "
"TLS_ERROR: BIO read tls_read_plaintext error`` ``Fri Sep 11 17:42:12 2020"
" TLS Error: TLS object -> incoming plaintext read error`` ``Fri Sep 11 "
"17:42:12 2020 TLS Error: TLS handshake failed`` ``Fri Sep 11 17:42:12 "
"2020 SIGUSR1[soft,tls-error] received, process restarting`` ``Fri Sep 11 "
"17:42:12 2020 Restart pause, 5 second(s)``"
msgstr ""
"``$ sudo openvpn --client --config client.conf`````Fri Sep 11 17:42:01 2020 "
"OpenVPN 2.4.9 x86_64-redhat-linux-gnu [SSL (OpenSSL)] [LZO] [LZ4] [EPOLL] "
"[PKCS11] [MH/PKTINFO] [AEAD] built on Apr 24 2020 ````Fri Sep 11 17:42:01 "
"2020 library versions: OpenSSL 1.1.1g FIPS  21 Apr 2020, LZO 2.08`` <xid="
"\"292\"></x>`Fri Sep 11 17:42:01 2020 PKCS#11: Adding PKCS#11 provider '/usr/"
"lib64/pkcs11/opensc-pkcs11.so'````Enter User PIN (OpenPGP card) token "
"Password: ******````Fri Sep 11 17:42:12 2020 TCP/UDP: Preserving recently "
"used remote address: [AF_INET]18.157.180.240:1194 `` <x``Fri Sep 11 17:42:12 "
"2020 Socket Buffers: R=[212992->212992] S=[212992->212992]`` ``Fri Sep 11 "
"17:42:12 2020 UDP link local: (not bound)` `` ``Fri Sep 11 17:42:12 2020 UDP "
"link remote: [AF_INET]18.157.180.240:1194` ````Fri Sep 11 17:42:12 2020 NOTE:"
" UID/GID downgrade will be delayed because of --client, --pull, or --up-"
"delay`` ``Fri Sep 11 17:42:12 2020 TLS: Initial packet from [AF_INET]18.157."
"180.240:1194, sid=d79690cf 9e38ce89`` ``Fri Sep 11 17:42:12 2020 VERIFY OK: "
"depth=1, CN=server_CA````Fri Sep 11 17:42:12 2020 VERIFY KU OK`` ``Fri Sep "
"11 17:42:12 2020 Validating certificate extended key usage `` ``Fri Sep 11 "
"17:42:12 2020 ++ Certificate has EKU (str) TLS Web Server Authentication, "
"expects TLS Web Server Authentication<xid=\"1288\"></x>` ``Fri Sep 11 17:42:"
"12 2020 VERIFY EKU OK `` ``Fri Sep 11 17:42:12 2020 VERIFY OK: depth=0, "
"CN=server ````<xid=\"1395\"></x>`` `` Fri Sep 11 17:42:12 2020 TLS_ERROR: "
"BIO read tls_read_plaintext error`` `` Fri Sep 11 17:42:12 2020 TLS Error: "
"TLS object -> incoming plaintext read error`` <xid=\"1651\"></x>`Fri Sep 11 "
"17:42:12 2020 TLS Error: TLS handshake failed`` ``Fri Sep 11 17:42:12 2020 "
"SIGUSR1[soft,tls-error] received, process restarting`` ``Fri Sep 11 17:42:12 "
"2020 Restart pause, 5 second(s)`"

#: ../pro/linux/openvpn-easyrsa.rst:686
msgid ""
"In some reported cases it does not prompt for a PIN on the terminal. One "
"workaround would be to use to use this command to login with the PIN:"
msgstr "在一些报告的案例中，它没有在终端上提示密码。一个变通的办法是使用这个命令用PIN码来登录。"

#: ../pro/linux/openvpn-easyrsa.rst:692
msgid ""
"Alternatively, you could `recompile OpenVPN "
"<https://forums.openvpn.net/viewtopic.php?f=4&t=23318>`_ client with "
"systemd support disabled, and it will prompt you for the PIN as expected."
msgstr ""
"另外，你可以`重新编译OpenVPN <https://forums.openvpn.net/viewtopic."
"php?f=4&t=23318>`_客户端，禁用systemd支持，它将如期提示你输入密码。"

#: ../pro/linux/openvpn-easyrsa.rst:694
msgid ""
"Another option, would be to login to your OpenVPN instance with the "
"Viscosity client which provides a better user experience especially for "
"entering the PIN."
msgstr "另一个选择是用Viscosity客户端登录OpenVPN实例，它提供了更好的用户体验，特别是在输入PIN码方面。"

#: ../pro/otp.rst:2
msgid "Two-factor Authentication with One-Time Passwords (OTP)"
msgstr "使用一次性密码（OTP）的双因素认证"

#: ../pro/otp.rst:8
msgid ""
"The use of One-time Passwords (OTP) is called very differently on the "
"various services supporting it. Sometimes it is referred to as Multi-"
"factor Authentication (MFA), sometimes it is Two-factor Authentication "
"(2FA) or just “authentication via authenticator app” like Google "
"Authenticator. Most of these services are compatible for usage with the "
"Nitrokey Pro and Nitrokey Storage. The following instructions show how to"
" enable OTP on our `support forum <https://support.nitrokey.com/>`_. The "
"procedure is quite similar on most services. For a list of websites "
"supporting OTP have a look at `dongleauth.com "
"<https://www.dongleauth.com/>`_."
msgstr ""
"一次性密码（OTP）的使用在支持它的各种服务中的称呼非常不同。有时它被称为多因素认证（MFA），有时是双因素认证（2FA），或者只是 "
"\"通过认证器应用程序认证\""
"，如谷歌认证器。这些服务大多与硝基钥匙专业版和硝基钥匙存储兼容使用。下面的说明显示了如何在我们的`支持论坛<https://support."
"nitrokey.com/>`_启用OTP。该程序在大多数服务上都很相似。关于支持OTP的网站列表，请看`dongleauth.com "
"<https://www.dongleauth.com/>`_。"

#: ../pro/otp.rst:10
msgid ""
"You need to have the `Nitrokey App <https://www.nitrokey.com/download>`_ "
"installed to use the OTP feature of the Nitrokey Pro and Nitrokey "
"Storage."
msgstr ""
"你需要安装`Nitrokey应用程序<https://www.nitrokey.com/download>`_来使用Nitrokey "
"Pro和Nitrokey Storage的OTP功能。"

#: ../pro/otp.rst:13
msgid "Configure a Website/Application to Use OTP"
msgstr "配置一个网站/应用程序以使用OTP"

#: ../pro/otp.rst:15
msgid ""
"Login to the website which supports OTP (in this example, the `support "
"forum <https://support.nitrokey.com/>`_). Usually you find the option to "
"enable two-factor-authentication under your profile or in the settings."
msgstr ""
"登录支持OTP的网站（本例中，`支持论坛<https://support.nitrokey.com/"
">`_）。通常情况下，你可以在你的个人资料或设置中找到启用双因素认证的选项。"

#: ../pro/otp.rst:22
msgid ""
"Most of the time, you will get a QR-Code as seen below. There should be "
"an option, to show the secret key directly."
msgstr "大多数时候，你会得到一个QR码，如下图所示。应该有一个选项，可以直接显示密匙。"

#: ../pro/otp.rst:29
msgid "We need to copy the secret code."
msgstr "我们需要复制秘密代码。"

#: ../pro/otp.rst:31
msgid ""
"This is what the Nitrokey is actually protecting. You may create a backup"
" of it now (in case the Nitrokey get lost or breaks) by writing it down "
"on a sheet of paper and storing it securely. But be aware that anybody "
"who is in possession of this secret code, can create one-time passwords "
"for your account! *Please note that you won’t be able to backup this "
"code, once it is stored in the Nitrokey!*"
msgstr ""
"这就是Nitrokey的实际保护内容。你现在可以把它写在一张纸上并安全地保存起来，以建立一个备份（以防硝基钥匙丢失或损坏）。但请注意，任何拥有这个秘密代码"
"的人都可以为你的账户创建一次性密码。*请注意，一旦这个密码被储存在Nitrokey中，你将无法备份！*。"

#: ../pro/otp.rst:38
msgid "Now start the Nitrokey App and open the “OTP Slot Configuration”."
msgstr "现在启动Nitrokey应用程序并打开 \"OTP插槽配置\"。"

#: ../pro/otp.rst:45
msgid ""
"Paste in the secret key in the corresponding field and choose an "
"appropiate slot name. Click on “Save” and type in your admin PIN if "
"requested."
msgstr "在相应的字段中粘贴密匙，并选择一个合适的插槽名称。点击 \"保存 \"并按要求输入管理密码。"

#: ../pro/otp.rst:52
msgid ""
"After saving the slot you can go to “Menu” -> “Passwords” -> YourSlotName"
" to get your very first one-time password."
msgstr "保存插槽后，你可以到 \"菜单\"-> \"密码\"->YourSlotName获得你的第一个一次性密码。"

#: ../pro/otp.rst:60
msgid ""
"The one-time password is copied to your clipboard automatically. You just"
" need to paste it to the field on the website to confirm the correct "
"setup and thus to activate the two-factor authentication."
msgstr "一次性密码会自动复制到你的剪贴板上。你只需要把它粘贴到网站上的字段，以确认正确的设置，从而激活双因素认证。"

#: ../pro/otp.rst:68
msgid "Securely Login to Website/Application"
msgstr "安全登录到网站/应用程序"

#: ../pro/otp.rst:70
msgid ""
"From now on you will get asked for a one-time password additionally to "
"your other credentials if you try to login the the website. You just need"
" to open the Nitrokey App and go to “Menu” -> “Passwords” -> YourSlotName"
" again to get the one-time password."
msgstr ""
"从现在开始，如果你试图登录网站，除了其他证书外，你还会被要求提供一个一次性密码。你只需打开Nitrokey应用程序，进入 \"菜单\"-> \"密码\"-"
"> YourSlotName，即可获得一次性密码。"

#: ../pro/putty.rst:2
msgid "PuTTY"
msgstr "浦发银行"

#: ../pro/putty.rst:8
msgid ""
"This mini-howto assumes that the Nitrokey has been initialized and "
"contains cryptographic keys."
msgstr "本小手册假设Nitrokey已经被初始化并包含了加密密钥。"

#: ../pro/putty.rst:10
msgid "**Required on the client side:**"
msgstr "**在客户端需要：**。"

#: ../pro/putty.rst:12
msgid ""
"`PuTTY <https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html>`_"
" or a variant of it"
msgstr ""
"`PuTTY <https://www.chiark.greenend.org.uk/~sgtatham/putty/latest."
"html>`_或者它的一个变体"

#: ../pro/putty.rst:15
msgid ""
"`GPG4Win <https://gpg4win.org/>`_ or `pageant.exe <https://smartcard-"
"auth.de/download-de.html>`_ with Smartcard support from Dr. Peter Koch"
msgstr ""
"`GPG4Win <https://gpg4win.org/>`_或 `pageant.exe <https://smartcard-auth.de/"
"download-de.html>`_，Peter Koch博士提供智能卡支持。"

#: ../pro/putty.rst:19
msgid ""
"Optional: `OpenPGP Minidriver "
"<https://wald.intevation.org/frs/?group_id=49&release_id=353>`_"
msgstr ""
"可选的。`OpenPGP Minidriver <https://wald.intevation.org/frs/"
"?group_id=49&release_id=353>`_"

#: ../pro/putty.rst:22
msgid "**1) Pageant**"
msgstr "**1)选美**"

#: ../pro/putty.rst:24
msgid ""
"start pageant.exe. That this is running is shown in the notification area"
" of the taskbar."
msgstr "启动pageant.exe。该程序正在运行，并显示在任务栏的通知区域。"

#: ../pro/putty.rst:31
msgid "A double click opens the view of the current keys."
msgstr "双击可以打开当前按键的视图。"

#: ../pro/putty.rst:38
msgid "After inserting the key it looks like this."
msgstr "插入钥匙后，它看起来像这样。"

#: ../pro/putty.rst:45
msgid ""
"If nothing is displayed here, pageant may have to be restarted or another"
" application is already using the stick. A possibly running pgp-agent "
"must be terminated! Now we only need the public key we want to store in "
"the ssh configuration of the server. Therefore we press CTRL while "
"inserting the stick…"
msgstr ""
"如果这里没有显示，pageant可能需要重新启动，或者其他应用程序已经在使用这个棍子。一个可能正在运行的pgp-"
"agent必须被终止!现在我们只需要将公钥储存在服务器的ssh配置中。因此，我们在插入棍子的同时按CTRL键…"

#: ../pro/putty.rst:52
msgid "and then view the Pageant-PublicKeys.txt."
msgstr "然后查看Pageant-PublicKeys.txt。"

#: ../pro/putty.rst:59
msgid ""
"I searched for the ssh-rsa entry of the auth key and added the line on "
"the server to the authorized_keys."
msgstr "我搜索了auth钥匙的ssh-rsa条目，并在服务器上把这一行添加到authorized_keys中。"

#: ../pro/putty.rst:61
msgid "**2) PuTTY**"
msgstr "**2)PuTTY**"

#: ../pro/putty.rst:63
msgid "There is surprisingly little to say about PuTTY itself."
msgstr "关于PuTTY本身，令人惊讶的是没有什么可说的。"

#: ../pro/putty.rst:70
msgid ""
"“Attempt authentication using Pageant” must be set, which is the default "
"anyway."
msgstr "必须设置 \"尝试使用Pageant认证\"，反正这是默认的。"

#: ../pro/putty.rst:72
msgid ""
"That’s it, as soon as you connect to the server while pageant is running "
"and you have the keys, you will be asked for the password of the Crypto-"
"Stick and can log in."
msgstr "就这样，只要你在选美比赛进行时连接到服务器，并且你有钥匙，你就会被要求提供Crypto-Stick的密码并可以登录。"

#: ../pro/putty.rst:74
msgid "**3) openpgp-minidriver (optional)**"
msgstr "**3) openpgp-minidriver（可选）**"

#: ../pro/putty.rst:76
msgid ""
"If you are annoyed that Windows reports every time you plug in the stick "
"that no driver could be found for “Smartcard”, you can get rid of it. You"
" just have to install the x86 or x64 version of the above mentioned "
"driver and the smartcard looks like this:"
msgstr ""
"如果你对Windows在你每次插入记忆棒时报告说找不到 \"智能卡 \"的驱动程序感到恼火"
"，你可以摆脱它。你只需安装上述驱动程序的x86或x64版本，智能卡就会变成这样。"

#: ../pro/smime.rst:2
msgid "S/MIME Email Encryption"
msgstr "S/MIME电子邮件加密"

#: ../pro/smime.rst:17
msgid ""
"If you are in doubt which one to choose, you should use OpenPGP, see "
"`here <openpgp.html>`_. This page describes the usage of S/MIME email "
"encryption."
msgstr "如果你对选择哪一种有疑问，你应该使用OpenPGP，见`这里<openpgp.html>`_。本页介绍了S/MIME电子邮件加密的用法。"

#: ../pro/smime.rst:19
msgid ""
"You need to purchase a S/MIME certificate or may already got one by your "
"company. Furthermore, you need to install `OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki>`_ on your System. While GNU/Linux"
" users usually can install OpenSC over the package manager (e.g. ``sudo "
"apt install opensc`` on Ubuntu), macOS and Windows users can download the"
" installation files from the `OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki>`_ page."
msgstr ""
"你需要购买一个S/MIME证书，或者你的公司可能已经有了一个。此外，你需要在你的系统上安装`OpenSC <https://github.com/"
"OpenSC/OpenSC/wiki>`_。虽然GNU/Linux用户通常可以通过软件包管理器来安装OpenSC（例如：``sudo apt "
"install opensc``在Ubuntu上），但MacOS和Windows用户可以从`OpenSC<https://github.com/"
"OpenSC/OpenSC/wiki>`_页面下载安装文件。"

#: ../pro/smime-outlook.rst:17 ../pro/smime-thunderbird.rst:17
#: ../pro/smime.rst:22
msgid ""
"Windows users with 64-bit system (standard) need to install both, the "
"32-bit and the 64-bit version of OpenSC!"
msgstr "使用64位系统（标准）的Windows用户需要同时安装32位和64位版本的OpenSC!"

#: ../pro/smime.rst:25
msgid "Import Existing Key and Certificate"
msgstr "导入现有的密钥和证书"

#: ../pro/smime.rst:27
msgid ""
"The following instructions are based on the `wiki of OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki/OpenPGP-card>`_. We will assume, "
"that you already got a key-certificate pair as a .p12 file. Please have a"
" look at the wiki page, if you got a separate key and certificate file."
msgstr ""
"下面的说明是基于OpenSC的`wiki <https://github.com/OpenSC/OpenSC/wiki/OpenPGP-"
"card>`_。我们将假设你已经得到了一个作为.p12文件的密钥-证书对。如果你有一个单独的密钥和证书文件，请看一下wiki页面。"

#: ../pro/smime.rst:31
msgid ""
"To make these commands as simple as possible, the .p12 file needs to be "
"in your home folder. On Windows this is usually ‘C:\\Users\\yourusername’"
" and on macOS and GNU/Linux system it will be ‘/home/yourusername’. If "
"you do not store the .p12 file there, you have to adapt the path in the "
"commands below. Please plug in the Nitrokey before submitting the "
"commands."
msgstr ""
"为了使这些命令尽可能简单，.p12文件需要放在你的主文件夹中。在Windows系统中，这通常是'C:\\Users\\yusername'，在macOS和"
"GNU/Linux系统中，它将是'/home/yourusername'。如果你没有把."
"p12文件存放在那里，你必须调整下面的命令中的路径。在提交命令之前，请插入Nitrokey。"

#: ../pro/smime.rst:33
msgid ""
"Assuming that your key-certificate file reads ‘myprivate.p12’ the "
"commands for Windows looks like this:"
msgstr "假设你的密钥证书文件是 \"myprivate.p12\"，Windows的命令看起来像这样。"

#: ../pro/smime.rst:40
msgid "and on macOS and GNU/Linux it will be"
msgstr "而在macOS和GNU/Linux上，它将是"

#: ../pro/smime.rst:47
msgid ""
"The two commands copy the key-certificate pair to the slot 2 (needed for "
"decrypting emails) and slot 3 (needed for signing). The output looks on "
"both systems something like this:"
msgstr "这两条命令将密钥-证书对复制到槽2（解密邮件需要）和槽3（签名需要）。在两个系统上的输出看起来都是这样的。"

#: ../pro/smime.rst:54
msgid ""
"Please note that there will be error messages that can be safely ignored "
"(see output example above). You now have the key-certificate pair loaded "
"on the Nitrokey."
msgstr "请注意，会有一些可以安全忽略的错误信息（见上面的输出例子）。现在你已经在Nitrokey上加载了钥匙-证书对。"

#: ../pro/smime.rst:61
msgid "for using `S/MIME encryption on Thunderbird <smime-thunderbird.html>`_"
msgstr "用于在Thunderbird上使用`S/MIME加密<smime-thunderbird.html>`_。"

#: ../pro/smime.rst:64
msgid "for using `S/MIME encryption on Outlook <smime-outlook.html>`_"
msgstr "用于在Outlook上使用`S/MIME加密<smime-outlook.html>`_。"

#: ../pro/smime.rst:74
msgid ""
"On Windows: Did you install **both**, the 32-bit and the 64-bit version "
"of OpenSC?"
msgstr "在Windows上。你是否同时安装了***，32位和64位版本的OpenSC？"

#: ../pro/smime.rst:77
msgid ""
"Nitrokey Storage 2: You need to install OpenSC in version 0.18 or higher."
" You can find the files on the `OpenSC website "
"<https://github.com/OpenSC/OpenSC/releases>`_ for Windows and macOS user "
"or `here <https://github.com/Nitrokey/opensc-build>`_ for Debian/Ubuntu "
"users."
msgstr ""
"Nitrokey Storage 2: 你需要安装0.18或更高版本的OpenSC。你可以在`OpenSC网站<https://github.com/"
"OpenSC/OpenSC/releases>`_为Windows和macOS用户找到这些文件，或者`这里<https://github.com/"
"Nitrokey/opensc-build>`_为Debian/Ubuntu用户。"

#: ../pro/smime-outlook.rst:2
msgid "S/MIME Email Encryption with Outlook"
msgstr "使用Outlook的S/MIME电子邮件加密"

#: ../pro/smime-outlook.rst:11
msgid ""
"If you do not have a S/MIME key-certificate pair installed on your "
"Nitrokey yet, please look at `this page <smime.html>`_ first."
msgstr "如果你的Nitrokey上还没有安装S/MIME密钥-证书对，请先看`这个页面<smime.html>`_。"

#: ../pro/smime-outlook.rst:13
msgid ""
"You need to have OpenSC installed on your System. Please have a look at "
"the `wiki page of the OpenSC project "
"<https://github.com/OpenSC/OpenSC/wiki>`_."
msgstr ""
"你需要在你的系统上安装OpenSC。请看看OpenSC项目的`wiki页面<https://github.com/OpenSC/OpenSC/"
"wiki>`_。"

#: ../pro/smime-outlook.rst:21
msgid "Settings in Outlook"
msgstr "Outlook中的设置"

#: ../pro/smime-outlook.rst:23
msgid ""
"Before you can use the Nitrokey in Outlook you have to activate S/MIME "
"encryption. You can achieve this by clicking on to ‘Start’ -> ‘Options’ "
"and clicking on ‘Trust Center’ in the options window. In section ‘Email "
"Security’ you can choose your S/MIME identity. Your certificate should "
"already be recognized by Outlook."
msgstr ""
"在Outlook中使用Nitrokey之前，你必须先激活S/"
"MIME加密功能。你可以通过点击'开始'->'选项'并在选项窗口中点击'信任中心'来实现这一目标。在'电子邮件安全'部分，你可以选择你的S/"
"MIME身份。你的证书应该已经被Outlook所识别。"

#: ../pro/smime-outlook.rst:38
msgid ""
"When composing a mail you can now choose to encrypt and sign the message "
"in the ‘Options’ ribbon of the compose window."
msgstr "在撰写邮件时，你现在可以在撰写窗口的 \"选项 \"功能区选择对邮件进行加密和签名。"

#: ../pro/smime-outlook.rst:45
msgid ""
"Outlook will only encrypt message to mail addresses which are saved in "
"your address book. So make sure, that the persons you want to write an "
"encrypted mail to have an entry in Outlook’s contacts. You can ask the "
"person to write you a signed mail, so that you can import the certificate"
" information."
msgstr ""
"Outlook只对保存在通讯录中的邮件地址进行加密。因此，请确保你想写加密邮件的人在Outlook的联系人中拥有一个条目。你可以要求对方给你写一封签名邮件"
"，这样你就可以导入证书信息。"

#: ../pro/smime-outlook.rst:47
msgid ""
"Depending on your certificate or the certificate of your partners you may"
" have to import a so-called root certificate. This is the certificate of "
"the party which issued the certificate you or your partner uses. You "
"should usually got informed if this is necessary."
msgstr "根据你的证书或你的合作伙伴的证书，你可能必须导入一个所谓的根证书。这是签发你或你的伙伴使用的证书的一方的证书。如果有必要，你通常应该得到通知。"

#: ../pro/smime-thunderbird.rst:2
msgid "S/MIME Email Encryption with Thunderbird"
msgstr "使用雷鸟的S/MIME电子邮件加密"

#: ../pro/smime-thunderbird.rst:11
msgid ""
"If you do not have a S/MIME key-certificate pair installed on your "
"Nitrokey yet or if you did not installed OpenSC, please look at `this "
"page <smime.html>`_ first."
msgstr "如果你的Nitrokey上还没有安装S/MIME密钥-证书对，或者你没有安装OpenSC，请先看`这个页面<smime.html>`_。"

#: ../pro/smime-thunderbird.rst:13
msgid ""
"You need to have `OpenSC installed "
"<https://github.com/OpenSC/OpenSC/wiki>`_ on your System. While GNU/Linux"
" users usually can install OpenSC over the package manager (e.g. ``sudo "
"apt update && sudo apt install opensc`` on Ubuntu), macOS and Windows "
"users can download the installation files from OpenSC directly."
msgstr ""
"你需要在你的系统上安装`OpenSC <https://github.com/OpenSC/OpenSC/wiki>`_。虽然GNU/"
"Linux用户通常可以通过软件包管理器来安装OpenSC（例如：``sudo apt update && sudo apt install "
"opensc``在Ubuntu上），但macOS和Windows用户可以直接从OpenSC下载安装文件。"

#: ../pro/smime-thunderbird.rst:21
msgid "Settings in Thunderbird"
msgstr "雷鸟中的设置"

#: ../pro/smime-thunderbird.rst:23
msgid ""
"Before you can use the Nitrokey in Thunderbird you have to activate "
"S/MIME encryption in the account settings. You can achieve this by "
"clicking on the menu and go to ‘Preferences’ -> ‘Account Settings’ and "
"clicking on ‘Security’ in the account settings window."
msgstr ""
"在雷鸟中使用Nitrokey之前，您必须在账户设置中激活S/MIME加密。你可以通过点击菜单，进入 \"偏好\"-> \"账户设置\"，"
"并在账户设置窗口中点击 \"安全 \"来实现。"

#: ../pro/smime-thunderbird.rst:30
msgid ""
"Click on “Security Devices” to import the right PCKS11 module. Click on "
"“Load” on the right-hand side. Now give the Module a name (like “OpenSC "
"Module”) and click on “Browse” to choose the location of the Module (see "
"below)."
msgstr ""
"点击 \"安全设备\"，导入正确的PCKS11模块。点击右侧的 \"加载\"。现在给模块起个名字（比如 \"OpenSC模块\"），并点击 \"浏览 "
"\"选择模块的位置（见下文）。"

#: ../pro/smime-thunderbird.rst:37
msgid ""
"On Windows the right file lays under “C:\\Windows\\System32\\opensc-"
"pkcs11.dll”. On macOS and GNU/Linux the file should be in “/lib/pkcs11"
"/opensc-pkcs11.so” or “/usr/lib/pkcs11/opensc-pkcs11.so” or alike. Press "
"“OK” twice and you are back in security section of the account settings. "
"Now you can actually choose a certificate on the upper part of the "
"window. You should get asked for a PIN to unlock your Nitrokey. Please "
"type in your User PIN."
msgstr ""
"在 Windows 上，正确的文件位于 \"C:\\Windows\\System32\\opensc-pkcs11.dll \"下。在MacOS和"
"GNU/Linux上，该文件应该在\"/lib/pkcs11/opensc-pkcs11.so \"或\"/usr/lib/pkcs11/opensc-"
"pkcs11.so \"或类似的地方。按两次 \"确定\""
"，你就回到了账户设置的安全部分。现在你可以在窗口的上部选择一个证书。你应该被要求输入密码以解锁你的Nitrokey。请键入你的用户密码。"

#: ../pro/smime-thunderbird.rst:47
msgid ""
"When composing an email you can now choose to encrypt and sign the "
"message."
msgstr "在撰写电子邮件时，你现在可以选择对邮件进行加密和签名。"

#: ../storage/mac/product_platform_heading.rst:3
msgid "(Nitrokey Storage 2 - macOS)"
msgstr "(Nitrokey Storage 2 - macOS)"

#: ../pro/eidauthenticate.rst:2
msgid "Login With EIDAuthenticate on Stand Alone Windows Computers"
msgstr "在独立的Windows电脑上用EIDAuthenticate登录"

#: ../pro/eidauthenticate.rst:8
msgid ""
"Download and install the latest version of `OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki>`_. Please install the `OpenPGP-"
"CSP <https://github.com/vletoux/OpenPGP-CSP/releases/tag/1.3>`_ driver "
"**instead** if using Nitrokey Storage 2 or Nitrokey Pro 2."
msgstr ""
"下载并安装最新版本的`OpenSC <https://github.com/OpenSC/OpenSC/wiki>`_。如果使用Nitrokey "
"Storage 2或Nitrokey Pro 2，请安装`OpenPGP-CSP <https://github.com/vletoux/"
"OpenPGP-CSP/releases/tag/1.3>`_驱动程序**代替。"

#: ../pro/eidauthenticate.rst:9
msgid ""
"Download and install `EIDAuthenticate "
"<https://www.mysmartlogon.com/eidauthenticate/>`_."
msgstr ""
"下载并安装`EIDAuthenticate <https://www.mysmartlogon.com/eidauthenticate/>`_。"

#: ../pro/eidauthenticate.rst:12
msgid ""
"The free community edition is disabled. You may test the enterprise "
"edition instead."
msgstr "免费的社区版已被禁用。你可以测试企业版。"

#: ../pro/eidauthenticate.rst:14
msgid "Start EIDConfigurationWizard.exe"
msgstr "启动EIDConfigurationWizard.exe"

#: ../pro/eidauthenticate.rst:15
msgid "Select “Associate a new certificate”"
msgstr "选择 \"关联一个新的证书\""

#: ../pro/eidauthenticate.rst:22
msgid ""
"Select or generate a Certificate Authority which should issue the user’s "
"certificate on the Nitrokey."
msgstr "选择或生成一个证书颁发机构，该机构应在Nitrokey上颁发用户的证书。"

#: ../pro/eidauthenticate.rst:30
msgid ""
"Enter the user PIN which you defined previously in step 4. Wait a moment "
"until a new keypair and certificate are generated. In case your Nitrokey "
"is not detected you may want to execute “certutil -scinfo” for "
"troubleshooting."
msgstr ""
"输入你之前在第4步定义的用户密码。稍等片刻，新的密钥对和证书就会生成。如果你的Nitrokey没有被检测到，你可能要执行 \"certutil -"
"scinfo \"来排除故障。"

#: ../pro/eidauthenticate.rst:40
msgid "Select the newly generated certificate and press continue."
msgstr "选择新生成的证书并按继续。"

#: ../pro/eidauthenticate.rst:47
msgid "All checks should succeed. Press continue."
msgstr "所有检查都应该成功。按继续。"

#: ../pro/eidauthenticate.rst:54
msgid "Enter the password of your user account."
msgstr "输入你的用户账户的密码。"

#: ../pro/eidauthenticate.rst:61
msgid "Enter the user PIN which you defined previously in step 4."
msgstr "输入你之前在步骤4中定义的用户密码。"

#: ../pro/eidauthenticate.rst:68
msgid "The final screen may look like this."
msgstr "最后的屏幕可能看起来像这样。"

#: ../pro/eidauthenticate.rst:75
msgid ""
"You may perform further configurations such as activate the force smart "
"card policy or automatically lock the computer when removing the Nitrokey"
" (by using EIDConfigurationWizardElevated.exe)."
msgstr ""
"你可以进行进一步的配置，如激活强制智能卡策略或在移除Nitrokey时自动锁定电脑（通过使用EIDConfigurationWizardElevated."
"exe）。"

#: ../pro/eidauthenticate.rst:77 ../pro/smart-policy.rst:95
msgid ""
"From now on, when logging on to your Windows computer you need to connect"
" the Nitrokey and enter your PIN."
msgstr "从现在起，在登录Windows电脑时，你需要连接Nitrokey并输入密码。"

#: ../storage/windows/firmware-update.rst:14
msgid ""
"Download the `Nitrokey App <https://www.nitrokey.com/download>`_ and the "
"`Nitrokey Update Tool <https://github.com/Nitrokey/nitrokey-update-"
"tool/releases/latest>`_. The Nitrokey Update Tool is currently available "
"for macOS and Windows only."
msgstr ""
"下载`Nitrokey应用程序<https://www.nitrokey.com/"
"download>`_和`Nitrokey更新工具<https://github.com/Nitrokey/nitrokey-update-tool/"
"releases/latest>`_。Nitrokey更新工具目前仅适用于macOS和Windows。"

#: ../storage/windows/firmware-update.rst:16
msgid ""
"Download the latest firmware \".hex\" file from `here "
"<https://github.com/Nitrokey/nitrokey-storage-"
"firmware/releases/latest>`_. Older releases are `here "
"<https://github.com/Nitrokey/nitrokey-storage-firmware/releases>`_."
msgstr ""
"从`这里<https://github.com/Nitrokey/nitrokey-storage-firmware/releases/latest>`"
"_下载最新的固件\" .hex\" 文件。较早的版本是`这里<https://github.com/Nitrokey/"
"nitrokey-storage-firmware/releases>`_。"

#: ../storage/windows/firmware-update.rst:31
msgid ""
"If you are using Microsoft Windows Build 1809 and Nitrokey Storage "
"Firmware 0.52 or lower, you need to use another system or if this is not "
"feasible use `these instructions <firmware-update-manually.html>`_ to "
"enable the Firmware Update mode."
msgstr ""
"如果你使用的是微软Windows Build 1809和Nitrokey Storage Firmware 0."
"52或更低版本，你需要使用其他系统，如果这不可行，请使用`这些说明<firmware-update-manually.html>`_来启用固件更新模式。"

#: ../storage/windows/firmware-update.rst:37
msgid ""
"Start the Nitrokey Update Tool and click “Select firmware file”. Select "
"the previously downloaded firmware \".hex\" file. Click on “Update "
"firmware” to start the update process. Your device should get detected by"
" the Nitrokey App again as soon as the update is finished."
msgstr ""
"启动Nitrokey更新工具并点击 \"选择固件文件\"。选择先前下载的固件\".hex\"文件。点击 \"更新固件\""
"，开始更新过程。更新完成后，你的设备应该会被Nitrokey应用程序再次检测到。"

#: ../storage/mac/index.rst:2
msgid "Nitrokey Storage, Mac"
msgstr "Nitrokey Storage, Mac"

#: ../storage/mac/index.rst:13
msgid ""
"Important: Once you plug in the Nitrokey, your computer will start the "
"Keyboard Setup Assistant. **Don’t run through this assistant but exit it "
"right away.**"
msgstr "重要的是。一旦你插入Nitrokey，你的电脑将启动键盘设置助手。**不要运行这个助手，而是立即退出。"

#: ../storage/mac/index.rst:16
msgid ""
"Download and start the `Nitrokey App "
"<https://www.nitrokey.com/download>`_. Perhaps you want to store it on "
"the unencrypted partition of your Nitrokey Storage"
msgstr ""
"下载并启动`Nitrokey应用程序<https://www.nitrokey.com/"
"download>`_。也许你想把它储存在你的Nitrokey存储器的未加密分区上"

#: ../storage/mac/index.rst:33
msgid ""
"For some Versions of MacOS it is necessary to install custom `ccid driver"
" <https://github.com/martinpaljak/osx-ccid-installer>`_ (for information "
"see `here <https://ludovicrousseau.blogspot.com/2016/04/os-x-el-capitan-"
"and-ccid-driver-upgrades.html>`_), but in general MacOS should have the "
"driver onboard."
msgstr ""
"对于某些版本的MacOS来说，有必要安装自定义的`ccid驱动<https://github.com/martinpaljak/osx-ccid-"
"installer>`_（信息见`这里<https://ludovicrousseau.blogspot.com/2016/04/os-x-el-"
"capitan-and-ccid-driver-upgrades.html>`_），但一般来说MacOS应该有板载驱动。"

#: ../pro/smart-policy.rst:2
msgid "Login to Windows Domain Computers With MS Active Directory"
msgstr "用MS Active Directory登录Windows域计算机"

#: ../pro/smart-policy.rst:8
msgid ""
"Download and install the latest `OpenSC "
"<https://github.com/OpenSC/OpenSC/wiki>`_."
msgstr "下载并安装最新的`OpenSC <https://github.com/OpenSC/OpenSC/wiki>`_。"

#: ../pro/smart-policy.rst:10
msgid ""
"Use a text editor to add the following settings to *C:\\Program "
"Files:\\OpenSC Project\\OpenSC\\opensc.conf*."
msgstr ""
"使用文本编辑器将以下设置添加到*C:\\Program Files:\\OpenSC Project\\OpenSC\\opensc.conf*。"

#: ../pro/smart-policy.rst:49
msgid ""
"Open a command terminal and enter “regedit”. Use regedit to import `this "
"file <https://www.nitrokey.com/sites/default/files/nk-hsm.reg>`_."
msgstr ""
"打开一个命令终端，输入 \"regedit\"。使用regedit导入`这个文件<https://www.nitrokey.com/sites/"
"default/files/nk-hsm.reg>`_。"

#: ../pro/smart-policy.rst:52
msgid ""
"Now you can enroll Nitrokeys for your users managed in Microsoft Active "
"Directory. You may either use Microsoft PKI, `gpgsm "
"<https://www.gnupg.org/documentation/manuals/gnupg/Howto-Create-a-Server-"
"Cert.html>`_, or `Smart Policy <https://www.mysmartlogon.com/products"
"/smart-policy.html>`_. The following steps describe the usage of Smart "
"Policy."
msgstr ""
"现在你可以为你在微软活动目录中管理的用户注册Nitrokeys。你可以使用微软的PKI，`gpgsm <https://www.gnupg.org/"
"documentation/manuals/gnupg/Howto-Create-a-Server-Cert.html>`_，或者`Smart "
"Policy <https://www.mysmartlogon.com/products/smart-policy."
"html>`_。下面的步骤描述了智能策略的用法。"

#: ../pro/smart-policy.rst:58
msgid ""
"`Download "
"<http://download.mysmartlogon.com/SmartPolicyv2/SmartPolicy%20-%20Stage%203.exe>`_"
" and install Smart Policy."
msgstr ""
"`下载<http://download.mysmartlogon.com/SmartPolicyv2/"
"SmartPolicy%20-%20Stage%203.exe>`_并安装Smart Policy。"

#: ../pro/smart-policy.rst:60
msgid "Select “Read a smart card”"
msgstr "选择 \"读取智能卡\""

#: ../pro/smart-policy.rst:67
msgid "Select the certificate, mapping, and user."
msgstr "选择证书、映射和用户。"

#: ../pro/smart-policy.rst:74
msgid "Verify the device status via CRL."
msgstr "通过CRL验证设备状态。"

#: ../pro/smart-policy.rst:81
msgid "Choose a Group Policy Object (GPO)."
msgstr "选择一个组策略对象（GPO）。"

#: ../pro/smart-policy.rst:88
msgid "Confirm applying the mapping."
msgstr "确认应用该映射。"

#: ../storage/windows/product_platform_heading.rst:3
msgid "(Nitrokey Storage 2 - Windows)"
msgstr "(Nitrokey Storage 2 - Windows)"

#: ../pro/windows/2fa-microsoft.rst:2
msgid "Two-factor Authentication for Microsoft Account"
msgstr "微软账户的双因素认证"

#: ../pro/windows/2fa-microsoft.rst:8
msgid ""
"These are the basic steps for registering the Nitrokey Pro or Nitrokey "
"Storage as a second factor of a Microsoft account."
msgstr "这些是注册Nitrokey Pro或Nitrokey Storage作为微软账户第二要素的基本步骤。"

#: ../pro/windows/2fa-microsoft.rst:10
msgid ""
"Visit https://account.live.com/proofs/Manage/additional and log in to "
"your Microsoft account if prompted."
msgstr "访问https://account.live.com/proofs/Manage/additional，如果有提示，请登录你的微软账户。"

#: ../pro/windows/2fa-microsoft.rst:22
msgid "Click on “Set up two-step verification”."
msgstr "点击 \"设置两步验证\"。"

#: ../pro/windows/2fa-microsoft.rst:29
msgid "Click on “Next”."
msgstr "点击 \"下一步\"。"

#: ../pro/windows/2fa-microsoft.rst:36
msgid "Now it is important to click on “set up a different Authenticator app”."
msgstr "现在必须点击 \"设置不同的认证器应用程序\"。"

#: ../pro/windows/2fa-microsoft.rst:43
msgid "Click on “I can’t scan the bar code”."
msgstr "点击 \"我无法扫描条形码\"。"

#: ../pro/windows/2fa-microsoft.rst:50
msgid "Insert and save secret code into the Nitrokey App."
msgstr "在Nitrokey应用程序中插入并保存秘密代码。"

#: ../pro/windows/2fa-microsoft.rst:67
msgid "Enter code generated by Nitrokey App to confirm."
msgstr "输入由Nitrokey应用程序生成的代码进行确认。"

#: ../pro/windows/2fa-microsoft.rst:79
msgid "Click “Next” and then “Finish”."
msgstr "点击 \"下一步\"，然后点击 \"完成\"。"

#: ../pro/windows/2fa-microsoft.rst:91
msgid ""
"From now on, when signing in you need an OTP additionally to your "
"password."
msgstr "从现在开始，当你登录时，除了你的密码外，还需要一个OTP。"

#: ../storage/windows/index.rst:2
msgid "Nitrokey Storage, Windows"
msgstr "Nitrokey Storage, Windows"

#: ../storage/windows/index.rst:13
msgid ""
"Connect your Nitrokey to your computer and confirm all dialogs so that "
"the USB smart card device driver gets installed almost automatically."
msgstr "将你的Nitrokey连接到电脑上，并确认所有的对话框，这样USB智能卡设备的驱动程序就会几乎自动安装。"

#: ../storage/windows/index.rst:17
msgid ""
"Windows may fail to install an additional device driver for the smart "
"card. Its safe to ignore this warning."
msgstr "Windows可能无法为智能卡安装一个额外的设备驱动程序。忽略这个警告是安全的。"

#: ../storage/windows/index.rst:19
msgid ""
"Download and start the `Nitrokey App "
"<https://www.nitrokey.com/download>`_. Perhaps you want to store it on "
"the unencrypted partition of your Nitrokey Storage. There won’t open a "
"window, but an icon appears in the system tray (see screenshot below). "
"Please right-click on this icon to use all the options of the App."
msgstr ""
"下载并启动`Nitrokey应用程序<https://www.nitrokey.com/download>`_。也许你想把它储存在你的Nitrokey存储"
"的未加密分区。那里不会打开一个窗口，但在系统托盘上会出现一个图标（见下面的截图）。请右击这个图标，以使用该应用程序的所有选项。"

#: ../storage/windows/index.rst:42
msgid ""
"`Instructions <openpgp.html>`_ for using the OpenPGP standard with the "
"Nitrokey"
msgstr "`说明 <openpgp.html>`_使用Nitrokey的OpenPGP标准。"

#: ../storage/windows/index.rst:44
msgid "`Instructions <smime.html>`_ for using S/MIME with the Nitrokey"
msgstr "`说明 <smime.html>`_用Nitrokey使用S/MIME。"

#: ../pro/windows/openpgp-csp.rst:2
msgid "Windows Logon and S/MIME Email Encryption with Active Directory"
msgstr "使用活动目录的Windows登录和S/MIME电子邮件加密"

#: ../pro/windows/openpgp-csp.rst:8
msgid ""
"Please note that this driver is still in development/testing. Please tell"
" us your experiences! See our `contact page "
"<https://www.nitrokey.com/contact>`_."
msgstr ""
"请注意，这个驱动程序仍在开发/测试中。请告诉我们你的经验!请参阅我们的`联系页面<https://www.nitrokey.com/contact>`_。"

#: ../pro/windows/openpgp-csp.rst:13
msgid ""
"This guide assumes that an Active Directory server with role ‘Active "
"Directory Certificate Services’ is installed and running on a server. "
"These instructions are based on Nitrokey Storage 2 and Nitrokey Pro 2 "
"only."
msgstr ""
"本指南假定在一台服务器上安装并运行了具有 \"活动目录证书服务 \"角色的活动目录服务器。这些说明仅基于Nitrokey Storage "
"2和Nitrokey Pro 2。"

#: ../pro/windows/openpgp-csp.rst:16
msgid "Installing OpenPGP-CSP"
msgstr "安装OpenPGP-CSP"

#: ../pro/windows/openpgp-csp.rst:18
msgid ""
"This step is needed for clients to use the OpenPGP-CSP driver. Download "
"and install the `latest version <https://github.com/vletoux/OpenPGP-"
"CSP/releases/tag/1.3>`_ of the installer file ‘SetupOpenPGPCsp’ for your "
"system architecture, for ‘SetupOpenPGPCsp_x64.msi’ for 64-bit systems."
msgstr ""
"客户端使用OpenPGP-CSP驱动时需要这个步骤。下载并安装`最新版本<https://github.com/vletoux/OpenPGP-CSP/"
"releases/tag/1."
"3>`_的安装文件'SetupOpenPGPCsp'，适用于您的系统架构，对于64位系统的'SetupOpenPGPCsp_x64.msi'。"

#: ../pro/windows/openpgp-csp.rst:20
msgid ""
"You may want to install the driver on the server as well for being able "
"to enforce the use of this driver in the template (see below)."
msgstr "你可能想在服务器上也安装该驱动，以便能够在模板中强制使用该驱动（见下文）。"

#: ../pro/windows/openpgp-csp.rst:23
msgid "Creating Certificate Template on Server Side"
msgstr "在服务器端创建证书模板"

#: ../pro/windows/openpgp-csp.rst:25
msgid ""
"On Active Directory Server open certsrv.msc to manage your certificate "
"templates. Right click on ‘Certificate Templates’ and choose ‘Manage’"
msgstr "在活动目录服务器上打开certsrv.msc来管理你的证书模板。在 \"证书模板 \"上点击右键，选择 \"管理\"。"

#: ../pro/windows/openpgp-csp.rst:32
msgid ""
"Now right click on ‘Smartcard Logon’ template and click ‘Duplicate’, to "
"create a new template on basis of this standard template. Rename template"
" to ‘OpenPGP Card Logon and Email’ or alike."
msgstr ""
"现在，右击 \"智能卡登录 \"模板，点击 \"复制\"，在这个标准模板的基础上创建一个新模板。将模板重命名为 \"OpenPGP卡登录和电子邮件 "
"\"或类似的内容。"

#: ../pro/windows/openpgp-csp.rst:39
msgid ""
"Under ‘Request Handling’, you can choose the OpenPGP-CSP as the one and "
"only Cryptography Service Provider (click the Button labeled ‘CSPs…’). "
"For this to work, you need to install the driver on the server as well "
"and you have to insert a Nitrokey beforehand. This is optional. You can "
"let the user choose, which CSP to use."
msgstr ""
"在 \"请求处理 \"下，你可以选择OpenPGP-CSP作为唯一的加密服务提供商（点击标有 \"CSPs... \"的按钮"
"）。要做到这一点，你需要在服务器上安装驱动程序，而且你必须事先插入一个Nitrokey。这是可选的。你可以让用户选择使用哪个CSP。"

#: ../pro/windows/openpgp-csp.rst:51
msgid ""
"For enabling S/MIME email encryption go to ‘Subject name’. Tick the "
"checkbox ‘E-Mail name’ (note: You must save the mail addresses of your "
"users in the corresponding Active Directory field!)."
msgstr ""
"对于启用S/MIME电子邮件加密，请进入'主题名称'。勾选'E-Mail name'（注意：你必须在相应的活动目录字段中保存用户的邮件地址！）。"

#: ../pro/windows/openpgp-csp.rst:58
msgid ""
"Then go to ‘Extensions’, there you edit the applications guideline and "
"add ‘Secure Email’."
msgstr "然后进入 \"扩展\"，在那里编辑应用指南并添加 \"安全电子邮件\"。"

#: ../pro/windows/openpgp-csp.rst:71
msgid "Request Certificate on Client (Domain Member)"
msgstr "在客户（域成员）上申请证书"

#: ../pro/windows/openpgp-csp.rst:73
msgid ""
"To request a certificate for a domain member, you have to open "
"certmgr.msc. Right click on folder ‘Personal->Certificates’ and click "
"’All Tasks->Request New Certificate and choose the template you created "
"on the AD."
msgstr ""
"要为一个域成员申请证书，你必须打开certmgr.msc。在 \"个人->证书 \"文件夹上点击右键，并点击 \"所有任务->请求新证书\""
"，选择你在AD上创建的模板。"

#: ../pro/windows/openpgp-csp.rst:81
msgid ""
"If you did not enforce the usage of OpenPGP-CSP you have to choose it "
"here now."
msgstr "如果你没有强制使用OpenPGP-CSP，你现在必须在这里选择它。"

#: ../pro/windows/openpgp-csp.rst:93
msgid "Next you choose the Authentication slot for the certificate."
msgstr "接下来你选择证书的认证槽。"

#: ../pro/windows/openpgp-csp.rst:95
msgid ""
"You are now ready to logon on the computer with the Nitrokey instead of "
"your password and you can use `S/MIME email encryption/signing "
"<smime.html>`_ with the Nitrokey. The driver has to be installed on every"
" computer you want to use the certificate on."
msgstr ""
"你现在可以用Nitrokey代替你的密码登录电脑了，你可以用Nitrokey使用`S/MIME电子邮件加密/签名<smime."
"html>`_。驱动程序必须安装在你想使用证书的每台电脑上。"
