# SOME DESCRIPTIVE TITLE.
# Copyright (C) Nitrokey
# This file is distributed under the same license as the Nitrokey Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nitrokey Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-04 13:01+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../hsm/apache2-tls.rst:2
#: ../hsm/apache2-tls.rst:2
#: ../hsm/apache2-tls.rst:2
#: ../hsm/apache2-tls.rst:2
msgid "TLS Setup with Apache2"
msgstr ""

#: ../hsm/apache2-tls.rst:10
#: ../hsm/apache2-tls.rst:10
#: ../hsm/apache2-tls.rst:10
#: ../hsm/apache2-tls.rst:10
msgid "The very same concept as descriped here can be used for many applications using openssl as crypto-backend. The concept mostly boils down to: replace (secret) key-file with PKCS#11 URL referencing a key on a security token (Nitrokey)"
msgstr ""

#: ../hsm/apache2-tls.rst:17
#: ../hsm/import-keys-certs.rst:26
#: ../hsm/apache2-tls.rst:17
#: ../hsm/import-keys-certs.rst:26
#: ../hsm/pkcs11-url.rst:14
#: ../hsm/apache2-tls.rst:17
#: ../hsm/import-keys-certs.rst:26
#: ../hsm/pkcs11-url.rst:14
#: ../hsm/pkcs11-url.rst:14
#: ../hsm/apache2-tls.rst:17
#: ../hsm/import-keys-certs.rst:26
#: ../hsm/pkcs11-url.rst:14
msgid "Preparation"
msgstr ""

#: ../hsm/apache2-tls.rst:19
#: ../hsm/apache2-tls.rst:19
#: ../hsm/apache2-tls.rst:19
#: ../hsm/apache2-tls.rst:19
msgid "ensure that the `apache2` version is at least 2.4.42 for proper ``mod_ssl`` support"
msgstr ""

#: ../hsm/apache2-tls.rst:21
#: ../hsm/apache2-tls.rst:21
#: ../hsm/apache2-tls.rst:21
#: ../hsm/apache2-tls.rst:21
msgid "activate ``mod_ssl`` using ``a2enmod ssl``, if not already done"
msgstr ""

#: ../hsm/apache2-tls.rst:23
#: ../hsm/apache2-tls.rst:23
#: ../hsm/apache2-tls.rst:23
#: ../hsm/apache2-tls.rst:23
msgid "additionally ``openssl`` is needed and ``libengine-pkcs11-openssl`` see :doc:`PKCS#11 URL<pkcs11-url>`"
msgstr ""

#: ../hsm/apache2-tls.rst:29
#: ../hsm/apache2-tls.rst:29
#: ../hsm/apache2-tls.rst:29
#: ../hsm/apache2-tls.rst:29
msgid "Configure Apache2 to Use a Security Key"
msgstr ""

#: ../hsm/apache2-tls.rst:31
#: ../hsm/apache2-tls.rst:31
#: ../hsm/apache2-tls.rst:31
#: ../hsm/apache2-tls.rst:31
msgid "Basically the only thing to do is replace ``SSLCertificateFile`` with the proper PKCS#11 URL and delete any other references to keys or certificates. E.g., ``SSLCertificateKeyFile`` is not needed anymore."
msgstr ""

#: ../hsm/apache2-tls.rst:35
#: ../hsm/apache2-tls.rst:35
#: ../hsm/apache2-tls.rst:35
#: ../hsm/apache2-tls.rst:35
msgid "An example directive might look like this:"
msgstr ""

#: ../hsm/apache2-tls.rst:41
#: ../hsm/apache2-tls.rst:41
#: ../hsm/apache2-tls.rst:41
#: ../hsm/apache2-tls.rst:41
msgid "The proper PKCS#11 URL can be extracted as documented in :doc:`PKCS#11 URL Generation<pkcs11-url>`"
msgstr ""

#: ../hsm/apache2-tls.rst:43
#: ../hsm/apache2-tls.rst:43
#: ../hsm/apache2-tls.rst:43
#: ../hsm/apache2-tls.rst:43
msgid "Be sure to place the directive inside a `VirtualHost` configuration."
msgstr ""

#: ../hsm/apache2-tls.rst:46
#: ../hsm/apache2-tls.rst:46
#: ../hsm/apache2-tls.rst:46
#: ../hsm/apache2-tls.rst:46
msgid "Provide PIN During Apache2 Startup"
msgstr ""

#: ../hsm/apache2-tls.rst:48
#: ../hsm/apache2-tls.rst:48
#: ../hsm/apache2-tls.rst:48
#: ../hsm/apache2-tls.rst:48
msgid "Using the previously described method Apache2 will ask on every startup for the User-PIN, thus basically declining batch startup. Apache2 provides another directive to provide the PIN during startup."
msgstr ""

#: ../hsm/apache2-tls.rst:56
#: ../hsm/apache2-tls.rst:56
#: ../hsm/apache2-tls.rst:56
#: ../hsm/apache2-tls.rst:56
msgid "Apache2 expects an executable after ``|``, which will be executed during startup and it's output (trailing newline is expected) will be used as PIN. Obviously arbitrary complex PIN retrieval methods can be implemented using this approach. Although here a trivial example has been chosen to just ``echo`` the PIN during startup."
msgstr ""

#: ../hsm/apache2-tls.rst:61
#: ../hsm/apache2-tls.rst:61
#: ../hsm/apache2-tls.rst:61
#: ../hsm/apache2-tls.rst:61
msgid "Further ``SSLPassPhraseDialog`` is a global directive, thus has to be placed in the global configuration scope in Apache2."
msgstr ""

#: ../hsm/apache2-tls.rst:66
#: ../hsm/apache2-tls.rst:66
#: ../hsm/apache2-tls.rst:66
#: ../hsm/apache2-tls.rst:66
msgid "This shown example is not a secure mechanism to pass your PIN, as it will be written in plain-text inside your configuration"
msgstr ""

#: ../hsm/apache2-tls.rst:69
#: ../hsm/apache2-tls.rst:69
#: ../hsm/apache2-tls.rst:69
#: ../hsm/apache2-tls.rst:69
msgid "See the `Apache2 mod_ssl documentation`_ for more details on this feature."
msgstr ""

#: ../hsm/apache2-tls.rst:72
#: ../hsm/apache2-tls.rst:72
#: ../hsm/apache2-tls.rst:72
#: ../hsm/apache2-tls.rst:72
msgid "Complete Apache2 Config Example"
msgstr ""

#: ../hsm/apache2-tls.rst:73
#: ../hsm/apache2-tls.rst:73
#: ../hsm/apache2-tls.rst:73
#: ../hsm/apache2-tls.rst:73
msgid "A complete Apache2 (``VirtualHost``) config snippet might look like this:"
msgstr ""

#: ../hsm/certificate-authority.rst:2
#: ../hsm/certificate-authority.rst:2
#: ../hsm/certificate-authority.rst:2
#: ../hsm/certificate-authority.rst:2
msgid "Creating a Certificate Authority"
msgstr ""

#: ../hsm/certificate-authority.rst:8
#: ../hsm/certificate-authority.rst:8
#: ../hsm/certificate-authority.rst:8
#: ../hsm/certificate-authority.rst:8
msgid "This article shows you how to setup your own private certificate authority backed by a Nitrokey HSM. This certificate authority has no automation and does not really scale. Other open source projects can be referenced for automation and scalability."
msgstr ""

#: ../hsm/certificate-authority.rst:11
#: ../hsm/certificate-authority.rst:11
#: ../hsm/certificate-authority.rst:11
#: ../hsm/certificate-authority.rst:11
msgid "Choose Cryptographic Algorithms"
msgstr ""

#: ../hsm/certificate-authority.rst:13
#: ../hsm/certificate-authority.rst:13
#: ../hsm/certificate-authority.rst:13
#: ../hsm/certificate-authority.rst:13
msgid "I’m going to assume that you’re as paranoid as I am, so I will be using the following command for generating private keys:"
msgstr ""

#: ../hsm/certificate-authority.rst:19
#: ../hsm/certificate-authority.rst:19
#: ../hsm/certificate-authority.rst:19
#: ../hsm/certificate-authority.rst:19
msgid "But, if you’re less paranoid that I am, you can safely choose the following options:"
msgstr ""

#: ../hsm/certificate-authority.rst:26
#: ../hsm/certificate-authority.rst:26
#: ../hsm/certificate-authority.rst:26
#: ../hsm/certificate-authority.rst:26
msgid "Likewise, I will be using the sha512 algorithm throughout this article, but sha256 can safely be used."
msgstr ""

#: ../hsm/certificate-authority.rst:29
#: ../hsm/certificate-authority.rst:29
#: ../hsm/certificate-authority.rst:29
#: ../hsm/certificate-authority.rst:29
msgid "Preparing to Start"
msgstr ""

#: ../hsm/certificate-authority.rst:31
#: ../hsm/certificate-authority.rst:31
#: ../hsm/certificate-authority.rst:31
#: ../hsm/certificate-authority.rst:31
msgid "To start with, you need to pick a directory to store your CA."
msgstr ""

#: ../hsm/certificate-authority.rst:42
#: ../hsm/certificate-authority.rst:42
#: ../hsm/certificate-authority.rst:42
#: ../hsm/certificate-authority.rst:42
msgid "Install the necessary tools:"
msgstr ""

#: ../hsm/certificate-authority.rst:52
#: ../hsm/certificate-authority.rst:52
#: ../hsm/certificate-authority.rst:52
#: ../hsm/certificate-authority.rst:52
msgid "For Windows download the official `OpenSC releases <https://github.com/OpenSC/OpenSC/releases>`__ and make sure you install `p11tool as described <https://github.com/thales-e-security/p11tool>`__. Using the PowerShell most commands should be identical as long as both tools and their binaries are within your ``PATH``."
msgstr ""

#: ../hsm/certificate-authority.rst:58
#: ../hsm/certificate-authority.rst:58
#: ../hsm/certificate-authority.rst:58
#: ../hsm/certificate-authority.rst:58
msgid "Creating the Root Certificate Authority"
msgstr ""

#: ../hsm/certificate-authority.rst:60
#: ../hsm/certificate-authority.rst:60
#: ../hsm/certificate-authority.rst:60
#: ../hsm/certificate-authority.rst:60
msgid "We start by generating the private key for the certificate authority directly on the Nitrokey HSM. This allows us to use the private key in the future, but not access it."
msgstr ""

#: ../hsm/certificate-authority.rst:83
#: ../hsm/certificate-authority.rst:83
#: ../hsm/certificate-authority.rst:83
#: ../hsm/certificate-authority.rst:83
msgid "Note the ID number (e0161cc8b6f5d66ac6835ecdecb623fc0506a675), we’ll need it later."
msgstr ""

#: ../hsm/certificate-authority.rst:85
#: ../hsm/certificate-authority.rst:240
#: ../hsm/certificate-authority.rst:85
#: ../hsm/certificate-authority.rst:240
#: ../hsm/certificate-authority.rst:85
#: ../hsm/certificate-authority.rst:240
#: ../hsm/certificate-authority.rst:85
#: ../hsm/certificate-authority.rst:240
msgid "If you need the ID in the future, you can list the keys on the Nitrokey HSM:"
msgstr ""

#: ../hsm/certificate-authority.rst:91
#: ../hsm/certificate-authority.rst:246
#: ../hsm/certificate-authority.rst:91
#: ../hsm/certificate-authority.rst:246
#: ../hsm/certificate-authority.rst:91
#: ../hsm/certificate-authority.rst:246
#: ../hsm/certificate-authority.rst:91
#: ../hsm/certificate-authority.rst:246
msgid "We need to create a config file to generate a self-signed public certificate."
msgstr ""

#: ../hsm/certificate-authority.rst:97
#: ../hsm/certificate-authority.rst:252
#: ../hsm/certificate-authority.rst:97
#: ../hsm/certificate-authority.rst:252
#: ../hsm/certificate-authority.rst:97
#: ../hsm/certificate-authority.rst:252
#: ../hsm/certificate-authority.rst:97
#: ../hsm/certificate-authority.rst:252
msgid "Fill out the request information in <angle brackets> with information for your CA."
msgstr ""

#: ../hsm/certificate-authority.rst:157
#: ../hsm/certificate-authority.rst:157
#: ../hsm/certificate-authority.rst:157
#: ../hsm/certificate-authority.rst:157
msgid "Generate the self-signed public certificate from the private key. Use the private key id value from earlier."
msgstr ""

#: ../hsm/certificate-authority.rst:165
#: ../hsm/certificate-authority.rst:165
#: ../hsm/certificate-authority.rst:165
#: ../hsm/certificate-authority.rst:165
msgid "Verify that the root certificate was generated correctly. Verify that Signature-Algorithm matches above and below. Verify that Issuer and Subject match, all root certificates are self signed. Verify that Key Usage matches what was in the v3_ca information in our config file."
msgstr ""

#: ../hsm/certificate-authority.rst:213
#: ../hsm/certificate-authority.rst:213
#: ../hsm/certificate-authority.rst:213
#: ../hsm/certificate-authority.rst:213
msgid "Creating the Intermediate Certificate Authority"
msgstr ""

#: ../hsm/certificate-authority.rst:215
#: ../hsm/certificate-authority.rst:215
#: ../hsm/certificate-authority.rst:215
#: ../hsm/certificate-authority.rst:215
msgid "We continue by generating the private key for the intermediate certificate authority directly on the Nitrokey HSM. This allows us to use the private key in the future, but not access it."
msgstr ""

#: ../hsm/certificate-authority.rst:238
#: ../hsm/certificate-authority.rst:238
#: ../hsm/certificate-authority.rst:238
#: ../hsm/certificate-authority.rst:238
msgid "Note the ID number (bcb48fe9b566ae61891aabbfde6a23d4ff3ab639), we’ll need it later."
msgstr ""

#: ../hsm/certificate-authority.rst:279
#: ../hsm/certificate-authority.rst:279
#: ../hsm/certificate-authority.rst:279
#: ../hsm/certificate-authority.rst:279
msgid "Generate the certificate signing request for the intermediate CA from the intermediate CA’s private key. Use the private key ID value from earlier."
msgstr ""

#: ../hsm/certificate-authority.rst:287
#: ../hsm/certificate-authority.rst:287
#: ../hsm/certificate-authority.rst:287
#: ../hsm/certificate-authority.rst:287
msgid "Verify that the CSR was created correctly. Verify that your Subject is correct. Verify that your Public Key and Signature Algorithm are correct."
msgstr ""

#: ../hsm/certificate-authority.rst:320
#: ../hsm/certificate-authority.rst:525
#: ../hsm/certificate-authority.rst:320
#: ../hsm/certificate-authority.rst:525
#: ../hsm/certificate-authority.rst:320
#: ../hsm/certificate-authority.rst:525
#: ../hsm/certificate-authority.rst:320
#: ../hsm/certificate-authority.rst:525
msgid "We need to find out the fully qualified PKCS#11 URI for your private key:"
msgstr ""

#: ../hsm/certificate-authority.rst:358
#: ../hsm/certificate-authority.rst:563
#: ../hsm/certificate-authority.rst:358
#: ../hsm/certificate-authority.rst:563
#: ../hsm/certificate-authority.rst:358
#: ../hsm/certificate-authority.rst:563
#: ../hsm/certificate-authority.rst:358
#: ../hsm/certificate-authority.rst:563
msgid "In this instance, the fully qualified PKCS#11 URI is:"
msgstr ""

#: ../hsm/certificate-authority.rst:364
#: ../hsm/certificate-authority.rst:364
#: ../hsm/certificate-authority.rst:364
#: ../hsm/certificate-authority.rst:364
msgid "Now, we need to create a config file to use the private key of the root certificate to sign the csr of the intermediate certificate."
msgstr ""

#: ../hsm/certificate-authority.rst:416
#: ../hsm/certificate-authority.rst:416
#: ../hsm/certificate-authority.rst:416
#: ../hsm/certificate-authority.rst:416
msgid "Then sign the intermediate certificate with the root certificate."
msgstr ""

#: ../hsm/certificate-authority.rst:456
#: ../hsm/certificate-authority.rst:456
#: ../hsm/certificate-authority.rst:456
#: ../hsm/certificate-authority.rst:456
msgid "Verify that the root certificate was generated correctly. Verify that the Issuer and Subject are different, and correct. Verify that the Key Usage matches the config file. Verify that the signature algorithm are correct above and below."
msgstr ""

#: ../hsm/certificate-authority.rst:503
#: ../hsm/certificate-authority.rst:503
#: ../hsm/certificate-authority.rst:503
#: ../hsm/certificate-authority.rst:503
msgid "Verify that the intermediate certificate verifies against the root certificate."
msgstr ""

#: ../hsm/certificate-authority.rst:510
#: ../hsm/certificate-authority.rst:510
#: ../hsm/certificate-authority.rst:510
#: ../hsm/certificate-authority.rst:510
msgid "Create a certificate chain file:"
msgstr ""

#: ../hsm/certificate-authority.rst:516
#: ../hsm/certificate-authority.rst:516
#: ../hsm/certificate-authority.rst:516
#: ../hsm/certificate-authority.rst:516
msgid "You now have a certificate authority backed by an HSM."
msgstr ""

#: ../hsm/certificate-authority.rst:519
#: ../hsm/certificate-authority.rst:519
#: ../hsm/certificate-authority.rst:519
#: ../hsm/certificate-authority.rst:519
msgid "Sign a Server Certificate"
msgstr ""

#: ../hsm/certificate-authority.rst:521
#: ../hsm/certificate-authority.rst:521
#: ../hsm/certificate-authority.rst:521
#: ../hsm/certificate-authority.rst:521
msgid "Now that you have a certificate authority, you’d probably like to know how to use it."
msgstr ""

#: ../hsm/certificate-authority.rst:523
#: ../hsm/certificate-authority.rst:523
#: ../hsm/certificate-authority.rst:523
#: ../hsm/certificate-authority.rst:523
msgid "Create a CSR in the normal method for your application. Proper creation of your certificate, including SAN, for your particular application is outside the scope of this document."
msgstr ""

#: ../hsm/certificate-authority.rst:569
#: ../hsm/certificate-authority.rst:569
#: ../hsm/certificate-authority.rst:569
#: ../hsm/certificate-authority.rst:569
msgid "Create a config file to use the private key of the intermediate certificate to sign the CSRs of your servers."
msgstr ""

#: ../hsm/certificate-authority.rst:624
#: ../hsm/certificate-authority.rst:624
#: ../hsm/certificate-authority.rst:624
#: ../hsm/certificate-authority.rst:624
msgid "Then run openssl to sign the server’s CSR."
msgstr ""

#: ../hsm/certificate-authority.rst:673
#: ../hsm/certificate-authority.rst:673
#: ../hsm/certificate-authority.rst:673
#: ../hsm/certificate-authority.rst:673
msgid "References"
msgstr ""

#: ../hsm/certificate-authority.rst:675
#: ../hsm/certificate-authority.rst:675
#: ../hsm/certificate-authority.rst:675
#: ../hsm/certificate-authority.rst:675
msgid "I used the following resources to help in compiling this document."
msgstr ""

#: ../hsm/certificate-authority.rst:677
#: ../hsm/certificate-authority.rst:677
#: ../hsm/certificate-authority.rst:677
#: ../hsm/certificate-authority.rst:677
msgid "`How to initialize your Nitrokey HSM <https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM#initialize-the-device>`_"
msgstr ""

#: ../hsm/certificate-authority.rst:678
#: ../hsm/certificate-authority.rst:678
#: ../hsm/certificate-authority.rst:678
#: ../hsm/certificate-authority.rst:678
msgid "`How to create a root and intermediate CA <https://jamielinux.com/docs/openssl-certificate-authority/create-the-root-pair.html>`_"
msgstr ""

#: ../hsm/certificate-authority.rst:679
#: ../hsm/certificate-authority.rst:679
#: ../hsm/certificate-authority.rst:679
#: ../hsm/certificate-authority.rst:679
msgid "`How to ensure the serial numbers of your intermediate CA and server certs are up to spec <https://www.phildev.net/ssl/creating_ca.html>`_"
msgstr ""

#: ../hsm/certificate-authority.rst:680
#: ../hsm/certificate-authority.rst:680
#: ../hsm/certificate-authority.rst:680
#: ../hsm/certificate-authority.rst:680
msgid "`How to generate ECC private keys <https://dev.to/benjaminblack/obtaining-an-elliptic-curve-dsa-certificate-with-lets-encrypt-51bc>`_"
msgstr ""

#: ../hsm/certificate-authority.rst:681
#: ../hsm/certificate-authority.rst:681
#: ../hsm/certificate-authority.rst:681
#: ../hsm/certificate-authority.rst:681
msgid "`How to find the PCKS11 URI from your HSM <https://www.infradead.org/openconnect/pkcs11.html>`_"
msgstr ""

#: ../hsm/certificate-authority.rst:682
#: ../hsm/certificate-authority.rst:682
#: ../hsm/certificate-authority.rst:682
#: ../hsm/certificate-authority.rst:682
msgid "`Troubleshooting (forum) <https://support.nitrokey.com/t/pki-ca-nitrokey-hsm-does-not-support-signing/2598/14>`_"
msgstr ""

#: ../hsm/certificate-authority.rst:685
#: ../hsm/certificate-authority.rst:685
#: ../hsm/certificate-authority.rst:685
#: ../hsm/certificate-authority.rst:685
msgid "This document was originally `written by lyntux <https://gist.github.com/lyntux/f02c6c3414ce48bc8ea8ab6dcdba1623>`_."
msgstr ""

#: ../hsm/faq.rst:2
msgid "Nitrokey HSM FAQ"
msgstr ""

#: ../shared-faqs/nitrokeys.rst:2
msgid "**Q:** Which Operating Systems are supported?"
msgstr ""

#: ../shared-faqs/nitrokeys.rst:2
msgid "Windows, Linux, and Mac OS X."
msgstr ""

#: ../shared-faqs/nitrokeys.rst:5
msgid "**Q:** What can I use the Nitrokey for?"
msgstr ""

#: ../shared-faqs/nitrokeys.rst:5
msgid "See the `frontpage`_ for an overview of supported use cases."
msgstr ""

#: ../hsm/faq.rst:17
msgid "**Q:** What is the maximum length of the PIN?"
msgstr ""

#: ../hsm/faq.rst:9
msgid "Nitrokey uses PINs instead of passwords. The main difference is that the hardware limits the amount of tries to three while a limit doesn't exist for passwords. Because of this, a short PIN is still secure and there is not need to choose a long and complex PIN."
msgstr ""

#: ../hsm/faq.rst:14
msgid "Nitrokey PINs can be up to 16 digits long and can consist of numbers, characters and special characters. Note: When using GnuPG or OpenSC, 32 character long PINs can be used but aren't supported by Nitrokey App."
msgstr ""

#: ../hsm/faq.rst:27
msgid "**Q:** What is the User PIN for?"
msgstr ""

#: ../hsm/faq.rst:20
msgid "The PIN is at least 6-digits long and is used to get access to the contect of the Nitrokey. This is the PIN you will use a lot in every day use"
msgstr ""

#: ../hsm/faq.rst:24
msgid "The PIN can have up to 16 digits and other characters (e.g. alphabetic and special characters). But as the PIN is blocked as soon three wrong PIN attempts were done, it is sufficiently secure to only have a 6 digits PIN."
msgstr ""

#: ../hsm/faq.rst:34
msgid "**Q:** What is the SO PIN for?"
msgstr ""

#: ../hsm/faq.rst:30
msgid "The SO PIN is used in the Nitrokey HSM only and is something like a \"master\" PIN with special properties. Please read this instructions carefully to understand the SO PIN of the Nitrokey HSM."
msgstr ""

#: ../hsm/faq.rst:34
msgid "The SO PIN has to be exactly 16 digits long."
msgstr ""

#: ../hsm/faq.rst:38
msgid "**Q:** How many data objects (DF, EF) can be stored?"
msgstr ""

#: ../hsm/faq.rst:37
msgid "76 KB EEPROM total, max. 150 x ECC-521 keys, max. 300 x ECC/AES-256 keys, max. 19 x RSA-4096 keys, max. 38 x RSA-2048 keys"
msgstr ""

#: ../hsm/faq.rst:41
msgid "**Q:** How many keys can I store?"
msgstr ""

#: ../hsm/faq.rst:41
msgid "Nitrokey HSM can store 20 RSA-2048 and 31 ECC-256 key pairs."
msgstr ""

#: ../hsm/faq.rst:49
msgid "**Q:** How fast is encryption and signing?"
msgstr ""

#: ../hsm/faq.rst:44
msgid "Key generation on-card: RSA 2048: 2 per minute"
msgstr ""

#: ../hsm/faq.rst:45
msgid "Key generation on-card: ECC 256: 10 per minute."
msgstr ""

#: ../hsm/faq.rst:46
msgid "Signature creation with off-card hash: RSA 2048; 100 per minute"
msgstr ""

#: ../hsm/faq.rst:47
msgid "Signature creation with off-card hash: ECDSA 256: 360 per minute"
msgstr ""

#: ../hsm/faq.rst:48
msgid "Signature creation with on-card SHA-256 and 1 kb data: RSA 2048; 68 per minute"
msgstr ""

#: ../hsm/faq.rst:49
msgid "Signature creation with on-card SHA-256 and 1 kb data: ECDSA 256: 125 per minute"
msgstr ""

#: ../hsm/faq.rst:53
msgid "**Q:** How can I distinguish a Nitrokey HSM1 from an Nitrokey HSM2?"
msgstr ""

#: ../hsm/faq.rst:52
msgid "Use ``opensc-tool --list-algorithms`` and compare with the table below. Please also see `this thread`_ for the factsheets and more details."
msgstr ""

#: ../shared-faqs/algos.rst:3
msgid "**Q:** Which algorithms and maximum key length are supported?"
msgstr ""

#: ../shared-faqs/algos.rst:3
msgid "See the following table:"
msgstr ""

#: ../shared-faqs/algos.rst:6
msgid "Start"
msgstr ""

#: ../shared-faqs/algos.rst:6
msgid "Pro + Storage"
msgstr ""

#: ../shared-faqs/algos.rst:6
msgid "Pro 2 + Storage 2"
msgstr ""

#: ../shared-faqs/algos.rst:6
msgid "HSM"
msgstr ""

#: ../shared-faqs/algos.rst:6
msgid "HSM2"
msgstr ""

#: ../shared-faqs/algos.rst:8
msgid "rsa1024"
msgstr ""

#: ../shared-faqs/algos.rst:8
#: ../shared-faqs/algos.rst:8
#: ../shared-faqs/algos.rst:8
#: ../shared-faqs/algos.rst:8
#: ../shared-faqs/algos.rst:10
#: ../shared-faqs/algos.rst:10
#: ../shared-faqs/algos.rst:10
#: ../shared-faqs/algos.rst:10
#: ../shared-faqs/algos.rst:10
#: ../shared-faqs/algos.rst:12
#: ../shared-faqs/algos.rst:12
#: ../shared-faqs/algos.rst:12
#: ../shared-faqs/algos.rst:14
#: ../shared-faqs/algos.rst:14
#: ../shared-faqs/algos.rst:14
#: ../shared-faqs/algos.rst:16
#: ../shared-faqs/algos.rst:18
#: ../shared-faqs/algos.rst:20
#: ../shared-faqs/algos.rst:20
#: ../shared-faqs/algos.rst:20
#: ../shared-faqs/algos.rst:22
#: ../shared-faqs/algos.rst:22
#: ../shared-faqs/algos.rst:24
#: ../shared-faqs/algos.rst:24
#: ../shared-faqs/algos.rst:26
#: ../shared-faqs/algos.rst:26
#: ../shared-faqs/algos.rst:26
#: ../shared-faqs/algos.rst:28
#: ../shared-faqs/algos.rst:28
#: ../shared-faqs/algos.rst:30
#: ../shared-faqs/algos.rst:30
#: ../shared-faqs/algos.rst:32
#: ../shared-faqs/algos.rst:32
#: ../shared-faqs/algos.rst:32
#: ../shared-faqs/algos.rst:34
msgid "✓"
msgstr ""

#: ../shared-faqs/algos.rst:10
msgid "rsa2048"
msgstr ""

#: ../shared-faqs/algos.rst:12
msgid "rsa3072"
msgstr ""

#: ../shared-faqs/algos.rst:14
msgid "rsa4096"
msgstr ""

#: ../shared-faqs/algos.rst:16
msgid "curve25519"
msgstr ""

#: ../shared-faqs/algos.rst:18
msgid "NIST-P 192"
msgstr ""

#: ../shared-faqs/algos.rst:20
msgid "NIST-P 256"
msgstr ""

#: ../shared-faqs/algos.rst:22
msgid "NIST-P 384-521"
msgstr ""

#: ../shared-faqs/algos.rst:24
msgid "Brainpool 192"
msgstr ""

#: ../shared-faqs/algos.rst:26
msgid "Brainpool 256-320"
msgstr ""

#: ../shared-faqs/algos.rst:28
msgid "Brainpool 384-521"
msgstr ""

#: ../shared-faqs/algos.rst:30
msgid "secp192"
msgstr ""

#: ../shared-faqs/algos.rst:32
msgid "secp256"
msgstr ""

#: ../shared-faqs/algos.rst:34
msgid "secp521"
msgstr ""

#: ../hsm/faq.rst:60
msgid "**Q:** How good is the Random Number Generator (RNG)?"
msgstr ""

#: ../hsm/faq.rst:59
msgid "Nitrokey HSM uses the TRNG of JCOP 2.4.1r3 which has a quality of DRNG.2 (according to AIS 31 of the BSI)."
msgstr ""

#: ../hsm/faq.rst:76
msgid "**Q:** Which API can I use?"
msgstr ""

#: ../hsm/faq.rst:63
msgid "OpenSC: Comprehensive instructions exist for OpenSC framework. There is nitrotool as a more comfortable frontend to OpenSC."
msgstr ""

#: ../hsm/faq.rst:66
msgid "Embedded Systems: For systems with minimal memory footprint a read/only PKCS#11 module is provided by the sc-hsm-embedded project.  This PKCS#11 module is useful for deployments where key generation at the user's workplace is not required. The PKCS#11 module also supports major electronic signature cards available in the German market."
msgstr ""

#: ../hsm/faq.rst:72
msgid "OpenSCDP: The SmartCard-HSM is fully integrated with OpenSCDP, the open smart card development platform. See the public support scripts for details. To import existing keys you can use its SCSH or NitroKeyWrapper."
msgstr ""

#: ../hsm/faq.rst:82
msgid "**Q:** Is the Nitrokey Pro Common Criteria or FIPS certified?"
msgstr ""

#: ../hsm/faq.rst:79
msgid "The security controler's hardware and operating system are Common Criteria certified (`Security Target`_; `HSM2 Report`_; See `here`_, click \"ICs, Smart Cards and Smart Card-Related Devices and Systems\" and search for \"NXP JCOP 3 P60\")."
msgstr ""

#: ../hsm/import-keys-certs.rst:2
#: ../hsm/import-keys-certs.rst:2
#: ../hsm/import-keys-certs.rst:2
#: ../hsm/import-keys-certs.rst:2
msgid "Importing Keys and Certificates"
msgstr ""

#: ../hsm/import-keys-certs.rst:8
#: ../hsm/import-keys-certs.rst:8
#: ../hsm/import-keys-certs.rst:8
#: ../hsm/import-keys-certs.rst:8
msgid "Generally the concept to import key-pairs and/or certificates is the following:"
msgstr ""

#: ../hsm/import-keys-certs.rst:11
#: ../hsm/import-keys-certs.rst:11
#: ../hsm/import-keys-certs.rst:11
#: ../hsm/import-keys-certs.rst:11
msgid "Create a DKEK (Device Key Encryption Key) share"
msgstr ""

#: ../hsm/import-keys-certs.rst:12
#: ../hsm/import-keys-certs.rst:12
#: ../hsm/import-keys-certs.rst:12
#: ../hsm/import-keys-certs.rst:12
msgid "Initialize device and enable DKEK as \"Device Encryption Scheme\""
msgstr ""

#: ../hsm/import-keys-certs.rst:13
#: ../hsm/import-keys-certs.rst:13
#: ../hsm/import-keys-certs.rst:13
#: ../hsm/import-keys-certs.rst:13
msgid "Import DKEK share into device"
msgstr ""

#: ../hsm/import-keys-certs.rst:14
#: ../hsm/import-keys-certs.rst:14
#: ../hsm/import-keys-certs.rst:14
#: ../hsm/import-keys-certs.rst:14
msgid "Import PKCS#12 container(s) into DKEK"
msgstr ""

#: ../hsm/import-keys-certs.rst:16
#: ../hsm/import-keys-certs.rst:16
#: ../hsm/import-keys-certs.rst:16
#: ../hsm/import-keys-certs.rst:16
msgid "This documentation covers only one specific use-case and should serve as an example for the overall workflow. For further information please read `this thread`_ and `this blog post`_."
msgstr ""

#: ../hsm/import-keys-certs.rst:22
#: ../hsm/import-keys-certs.rst:22
#: ../hsm/import-keys-certs.rst:22
#: ../hsm/import-keys-certs.rst:22
msgid "This procedure will reset your Nitrokey HSM 2 device and all data on it will be deleted!"
msgstr ""

#: ../hsm/import-keys-certs.rst:28
#: ../hsm/import-keys-certs.rst:28
#: ../hsm/import-keys-certs.rst:28
#: ../hsm/import-keys-certs.rst:28
msgid "make sure all the keys you would like to import are available as PKCS#12 containers (`.p12`) and you know the password, if needed"
msgstr ""

#: ../hsm/import-keys-certs.rst:31
#: ../hsm/import-keys-certs.rst:31
#: ../hsm/import-keys-certs.rst:31
#: ../hsm/import-keys-certs.rst:31
msgid "be sure that nothing on the used Nitrokey HSM 2 is needed, it will be deleted during this procedure"
msgstr ""

#: ../hsm/import-keys-certs.rst:34
#: ../hsm/import-keys-certs.rst:34
#: ../hsm/import-keys-certs.rst:34
#: ../hsm/import-keys-certs.rst:34
msgid "download the latest `Smart Card Shell`_ and unpack it into your work-directory"
msgstr ""

#: ../hsm/import-keys-certs.rst:37
#: ../hsm/import-keys-certs.rst:37
#: ../hsm/import-keys-certs.rst:37
#: ../hsm/import-keys-certs.rst:37
msgid "Importing via the SCSH3 GUI"
msgstr ""

#: ../hsm/import-keys-certs.rst:39
#: ../hsm/import-keys-certs.rst:39
#: ../hsm/import-keys-certs.rst:39
#: ../hsm/import-keys-certs.rst:39
msgid "Inside the unpacked directory you will find ``scsh3gui``, which can be started using ``bash scsh3gui`` (for windows double-click on: ``scsh3gui.cmd``)."
msgstr ""

#: ../hsm/import-keys-certs.rst:42
#: ../hsm/import-keys-certs.rst:42
#: ../hsm/import-keys-certs.rst:42
#: ../hsm/import-keys-certs.rst:42
msgid "Once the SCSH3 Tool is open, you should see your Nitrokey HSM 2 inside the tree view. Please follow these steps to import:"
msgstr ""

#: ../hsm/import-keys-certs.rst:45
#: ../hsm/import-keys-certs.rst:45
#: ../hsm/import-keys-certs.rst:45
#: ../hsm/import-keys-certs.rst:45
msgid "Start key-manager (File -> Keymanager)"
msgstr ""

#: ../hsm/import-keys-certs.rst:47
#: ../hsm/import-keys-certs.rst:47
#: ../hsm/import-keys-certs.rst:47
#: ../hsm/import-keys-certs.rst:47
msgid "Right-click \"Smartcard-HSM\" -> create DKEK share"
msgstr ""

#: ../hsm/import-keys-certs.rst:49
#: ../hsm/import-keys-certs.rst:49
#: ../hsm/import-keys-certs.rst:49
#: ../hsm/import-keys-certs.rst:49
msgid "Choose file location"
msgstr ""

#: ../hsm/import-keys-certs.rst:51
#: ../hsm/import-keys-certs.rst:51
#: ../hsm/import-keys-certs.rst:51
#: ../hsm/import-keys-certs.rst:51
msgid "Choose DKEK share password"
msgstr ""

#: ../hsm/import-keys-certs.rst:53
#: ../hsm/import-keys-certs.rst:53
#: ../hsm/import-keys-certs.rst:53
#: ../hsm/import-keys-certs.rst:53
msgid "Right-click \"Smartcard-HSM\" -> Initialize device"
msgstr ""

#: ../hsm/import-keys-certs.rst:55
#: ../hsm/import-keys-certs.rst:55
#: ../hsm/import-keys-certs.rst:55
#: ../hsm/import-keys-certs.rst:55
msgid "Enter SO-PIN"
msgstr ""

#: ../hsm/import-keys-certs.rst:57
#: ../hsm/import-keys-certs.rst:57
#: ../hsm/import-keys-certs.rst:57
#: ../hsm/import-keys-certs.rst:57
msgid "(optional) Enter label and enter URL/Host"
msgstr ""

#: ../hsm/import-keys-certs.rst:59
#: ../hsm/import-keys-certs.rst:59
#: ../hsm/import-keys-certs.rst:59
#: ../hsm/import-keys-certs.rst:59
msgid "Select authentication method: \"User PIN\""
msgstr ""

#: ../hsm/import-keys-certs.rst:61
#: ../hsm/import-keys-certs.rst:61
#: ../hsm/import-keys-certs.rst:61
#: ../hsm/import-keys-certs.rst:61
msgid "Allow RESET RETRY COUNTER: \"Resetting and unblocking PIN with SO-PIN not allowed\""
msgstr ""

#: ../hsm/import-keys-certs.rst:63
#: ../hsm/import-keys-certs.rst:63
#: ../hsm/import-keys-certs.rst:63
#: ../hsm/import-keys-certs.rst:63
msgid "Enter and confirm User PIN"
msgstr ""

#: ../hsm/import-keys-certs.rst:65
#: ../hsm/import-keys-certs.rst:65
#: ../hsm/import-keys-certs.rst:65
#: ../hsm/import-keys-certs.rst:65
msgid "\"Select Device Key Encryption scheme\" -> \"DKEK shares\""
msgstr ""

#: ../hsm/import-keys-certs.rst:67
#: ../hsm/import-keys-certs.rst:67
#: ../hsm/import-keys-certs.rst:67
#: ../hsm/import-keys-certs.rst:67
msgid "Enter number of DKEK shares: 1"
msgstr ""

#: ../hsm/import-keys-certs.rst:69
#: ../hsm/import-keys-certs.rst:69
#: ../hsm/import-keys-certs.rst:69
#: ../hsm/import-keys-certs.rst:69
msgid "Right-click DKEK set-up in progress -> \"Import DKEK share\""
msgstr ""

#: ../hsm/import-keys-certs.rst:71
#: ../hsm/import-keys-certs.rst:71
#: ../hsm/import-keys-certs.rst:71
#: ../hsm/import-keys-certs.rst:71
msgid "Choose DKEK share file location"
msgstr ""

#: ../hsm/import-keys-certs.rst:73
#: ../hsm/import-keys-certs.rst:73
#: ../hsm/import-keys-certs.rst:73
#: ../hsm/import-keys-certs.rst:73
msgid "Password for DKEK share"
msgstr ""

#: ../hsm/import-keys-certs.rst:75
#: ../hsm/import-keys-certs.rst:75
#: ../hsm/import-keys-certs.rst:75
#: ../hsm/import-keys-certs.rst:75
msgid "Right-click \"SmartCard-HSM\" -> \"Import from PKCS#12\""
msgstr ""

#: ../hsm/import-keys-certs.rst:77
#: ../hsm/import-keys-certs.rst:77
#: ../hsm/import-keys-certs.rst:77
#: ../hsm/import-keys-certs.rst:77
msgid "Enter number of shares -> 1"
msgstr ""

#: ../hsm/import-keys-certs.rst:79
#: ../hsm/import-keys-certs.rst:79
#: ../hsm/import-keys-certs.rst:79
#: ../hsm/import-keys-certs.rst:79
msgid "Enter file location of DKEK share"
msgstr ""

#: ../hsm/import-keys-certs.rst:81
#: ../hsm/import-keys-certs.rst:81
#: ../hsm/import-keys-certs.rst:81
#: ../hsm/import-keys-certs.rst:81
msgid "Enter Password for DKEK share"
msgstr ""

#: ../hsm/import-keys-certs.rst:83
#: ../hsm/import-keys-certs.rst:83
#: ../hsm/import-keys-certs.rst:83
#: ../hsm/import-keys-certs.rst:83
msgid "Select PKCS#12 container for import (Enter password, if set)"
msgstr ""

#: ../hsm/import-keys-certs.rst:85
#: ../hsm/import-keys-certs.rst:85
#: ../hsm/import-keys-certs.rst:85
#: ../hsm/import-keys-certs.rst:85
msgid "Select Key"
msgstr ""

#: ../hsm/import-keys-certs.rst:87
#: ../hsm/import-keys-certs.rst:87
#: ../hsm/import-keys-certs.rst:87
#: ../hsm/import-keys-certs.rst:87
msgid "Select Name to be used (This is the Label used for the key on the device)"
msgstr ""

#: ../hsm/import-keys-certs.rst:89
#: ../hsm/import-keys-certs.rst:89
#: ../hsm/import-keys-certs.rst:89
#: ../hsm/import-keys-certs.rst:89
msgid "Import more keys, if needed"
msgstr ""

#: ../hsm/import-keys-certs.rst:91
#: ../hsm/import-keys-certs.rst:91
#: ../hsm/import-keys-certs.rst:91
#: ../hsm/import-keys-certs.rst:91
msgid "Once this is done, you can check that the keys have been successfully imported using:"
msgstr ""

#: ../hsm/import-keys-certs.rst:98
#: ../hsm/import-keys-certs.rst:98
#: ../hsm/import-keys-certs.rst:98
#: ../hsm/import-keys-certs.rst:98
msgid "In the resulting output you will find the imported keys labeled by the name you chose previously."
msgstr ""

#: ../hsm/index.rst:2
msgid "Nitrokey HSM 2"
msgstr ""

#: ../hsm/index.rst:6
msgid "First check the:"
msgstr ""

#: ../hsm/index.rst:14
msgid "or choose your operating system:"
msgstr ""

#: ../hsm/linux/product_platform_heading.rst:3
#: ../hsm/linux/product_platform_heading.rst:3
#: ../hsm/linux/product_platform_heading.rst:3
#: ../hsm/linux/product_platform_heading.rst:3
#: ../hsm/linux/product_platform_heading.rst:3
#: ../hsm/linux/product_platform_heading.rst:3
#: ../hsm/linux/product_platform_heading.rst:3
#: ../hsm/linux/product_platform_heading.rst:3
#: ../hsm/linux/product_platform_heading.rst:3
msgid "(Nitrokey HSM 2 - Linux)"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:2
msgid "Automatic Screen Lock at Removal"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:8
msgid "This guide will walk you through the configuration of your computer, to automatically lock your session when you remove the Nitrokey."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:10
msgid "The configuration requires the creation of two files under two different directories."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:13
msgid "Requirements"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:15
msgid "Ubuntu 20.04 or Debian 10 (Buster), both with `Gnome Display Manager <https://wiki.gnome.org/Projects/GDM>`__ installed."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:18
msgid "Nitrokey Pro 2, Nitrokey Storage 2, or Nitrokey HSM 2"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:21
msgid "Configuration"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:24
msgid "Create the ``.rules`` file"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:26
msgid "With your favorite text editor create a file called ``85-nitrokey.rules``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:32
msgid "Add the following line to the file"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:38
msgid "Save the file and quit the editor."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:40
msgid "This file sets up a new hardware rule that executes the ``gnome-screensaver-lock`` at removal of the Nitrokey device."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:42
msgid "You should change the configuration according to the device you are using as following:"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:44
msgid "Nitrokey Pro: ``ENV{PRODUCT}==\"20a0/4108/101\"``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:45
msgid "Nitrokey HSM: ``ENV{PRODUCT}==\"20a0/4230/101\"``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:46
msgid "Nitrokey Storage: ``ENV{PRODUCT}==\"20a0/4109/101\"``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:49
msgid "Create the ``gnome-screensaver-lock`` script"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:51
msgid "With your favorite text editor create a file called ``gnome-screensaver-lock``"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:57
msgid "Add the following text"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:67
msgid "In the first step, this script looks for the user-name of the gnome session, i.e. ``user``."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:69
msgid "When it is called at Nitrokey removal, the script queries ``user``, switches to its session, and locks the screen by prompting the screen-saver screen."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:72
msgid "Execute the script"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:74
msgid "Once all set up, execute the script once, and it will lock the screen. It does not matter if the Nitrokey is plugged or not for this first execution."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:77
#: ../pro/smime.rst:57
#: ../pro/smime-outlook.rst:36
#: ../pro/smime-thunderbird.rst:45
#: ../pro/smime.rst:57
#: ../pro/smime-outlook.rst:36
#: ../pro/smime-thunderbird.rst:45
#: ../pro/smime.rst:57
#: ../pro/smime-outlook.rst:36
#: ../pro/smime-thunderbird.rst:45
msgid "Usage"
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:79
msgid "By now you can log back to your session by entering your password, and (re)plug you Nitrokey if you did not do it before."
msgstr ""

#: ../pro/linux/automatic-screen-lock.rst:81
msgid "The next time(s) you unplug your Nitrokey from the computer, it will automatically lock the screen."
msgstr ""

#: ../pro/gpa.rst:2
#: ../pro/gpa.rst:2
#: ../pro/gpa.rst:2
msgid "Setup with Gnu Privacy Assistant (GPA)"
msgstr ""

#: ../pro/gpa.rst:4
#: ../pro/gpa.rst:4
#: ../pro/gpa.rst:4
msgid "This document describes how to use Gnu Privacy Assistant (GPA) to set up the Nitrokey for its first usage."
msgstr ""

#: ../pro/gpa.rst:6
#: ../pro/gpa.rst:6
#: ../pro/gpa.rst:6
msgid "First you need to install Gnu Privacy Assistant (GPA). For Windows you should download and install the `GPG4Win <https://www.gpg4win.org/>`_ package which contains GPA. For Linux you should install the GPA package of your distribution (e.g. on Ubuntu: sudo apt-get install gpa )."
msgstr ""

#: ../pro/gpa.rst:8
#: ../pro/gpa.rst:8
#: ../pro/gpa.rst:8
msgid "Start GPA and select the Card Manager; either by pressing the icon at the top or by choosing Card Manager in the Windows menu."
msgstr ""

#: ../pro/gpa.rst:13
#: ../pro/gpa.rst:13
#: ../pro/gpa.rst:13
msgid "The window of the Card Manager will appear. Enter your salutation, name and optional other information. While doing so you might be asked to enter the admin PIN."
msgstr ""

#: ../pro/gpa.rst:18
#: ../pro/gpa.rst:18
#: ../pro/gpa.rst:18
msgid "Confirm this window and enter the admin PIN in the next window."
msgstr ""

#: ../pro/gpa.rst:23
#: ../pro/gpa.rst:23
#: ../pro/gpa.rst:23
msgid "In the Card Manager window you might need to scroll down until you see the buttons to change the PINs. The term PIN is used interchangeable with \"password\". Press the first button \"Change PIN\" in order to change the user password. Read and confirm the following information window."
msgstr ""

#: ../pro/gpa.rst:28
#: ../pro/gpa.rst:28
#: ../pro/gpa.rst:28
msgid "Choose and enter your own PIN with a minimum length of six characters. This PIN is required for the daily usage of the Nitrokey."
msgstr ""

#: ../pro/gpa.rst:33
#: ../pro/gpa.rst:33
#: ../pro/gpa.rst:33
msgid "Go back to the Card Manager window in step three. This time you choose the third button Change PIN in order to change the admin PIN. The admin PIN is required to change the information on the Nitrokey and to change the cryptographic keys. Proceed as described in steps four and five."
msgstr ""

#: ../pro/gpa.rst:35
#: ../pro/gpa.rst:35
#: ../pro/gpa.rst:35
msgid "After changing both the user and the admin PIN, you are back in the Card Manager window. Select \"Generate key\" in the \"Card\" menu."
msgstr ""

#: ../pro/gpa.rst:40
#: ../pro/gpa.rst:40
#: ../pro/gpa.rst:40
msgid "Enter your name and e-mail address. You should keep \"backup\" enabled in order to create a backup file of your cryptographic keys. Optionally you might select an expiration date for your cryptographic keys."
msgstr ""

#: ../pro/gpa.rst:45
#: ../pro/gpa.rst:45
#: ../pro/gpa.rst:45
msgid "Wait until the keys are generated successfully."
msgstr ""

#: ../pro/gpa.rst:50
#: ../pro/gpa.rst:50
#: ../pro/gpa.rst:50
msgid "Enter a strong passphrase for your backup keys. We strongly recommend to store the backup file on a separate storage(e.g. CD-ROM) and on a safe location."
msgstr ""

#: ../pro/gpa.rst:55
#: ../pro/gpa.rst:55
#: ../pro/gpa.rst:55
msgid "Congratulations, your Nitrokey is now ready to use. Please see the `applications <https://www.nitrokey.com/documentation/applications>`_ section for further information of its usage."
msgstr ""

#: ../hsm/linux/index.rst:2
msgid "Nitrokey HSM with GNU/Linux"
msgstr ""

#: ../hsm/linux/index.rst:13
msgid "Install `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`__. You need at least version 0.19. You can find recent builds for debian-based systems like Ubuntu `here <https://github.com/Nitrokey/opensc-build>`__ if your system does not have the newest version of OpenSC. Alternatively, install `this <https://www.cardcontact.de/download/sc-hsm-starterkit.zip>`__ driver (`source <https://github.com/CardContact/sc-hsm-embedded>`__)."
msgstr ""

#: ../hsm/linux/index.rst:20
#: ../hsm/mac/index.rst:17
#: ../hsm/windows/index.rst:17
msgid "Define SO-PIN and PIN of your own choices. See `these instructions <https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM#initialize-the-device>`__. Afterwards you can begin to `generate new keys <https://github.com/OpenSC/OpenSC/wiki/SmartCardHSM#generate-key-pair>`__."
msgstr ""

#: ../hsm/linux/index.rst:25
#: ../hsm/mac/index.rst:22
#: ../hsm/windows/index.rst:22
msgid "Your Nitrokey is now ready to use. `Checkout <https://www.nitrokey.com/documentation/applications>`__ the various use cases and supported applications."
msgstr ""

#: ../hsm/pkcs11-url.rst:2
#: ../hsm/pkcs11-url.rst:2
#: ../hsm/pkcs11-url.rst:2
#: ../hsm/pkcs11-url.rst:2
msgid "PKCS#11 URL Generation"
msgstr ""

#: ../hsm/pkcs11-url.rst:9
#: ../hsm/pkcs11-url.rst:9
#: ../hsm/pkcs11-url.rst:9
#: ../hsm/pkcs11-url.rst:9
msgid "Various applications use openssl to handle e.g., TLS certificates. This concept mostly allows simply replacing a file-path (for the secret) with a so-called **PKCS#11 URL** to use a secret from a e.g., Nitrokey."
msgstr ""

#: ../hsm/pkcs11-url.rst:16
#: ../hsm/pkcs11-url.rst:16
#: ../hsm/pkcs11-url.rst:16
#: ../hsm/pkcs11-url.rst:16
msgid "ensure ``openssl`` is installed"
msgstr ""

#: ../hsm/pkcs11-url.rst:18
#: ../hsm/pkcs11-url.rst:18
#: ../hsm/pkcs11-url.rst:18
#: ../hsm/pkcs11-url.rst:18
msgid "ensure ``openssl`` can use the PKCS#11 engine by installing ``libengine-pkcs11-openssl``"
msgstr ""

#: ../hsm/pkcs11-url.rst:27
#: ../hsm/pkcs11-url.rst:27
#: ../hsm/pkcs11-url.rst:27
#: ../hsm/pkcs11-url.rst:27
msgid "install ``opensc`` and ``gnutls-bin`` for necessary tools"
msgstr ""

#: ../hsm/pkcs11-url.rst:29
#: ../hsm/pkcs11-url.rst:29
#: ../hsm/pkcs11-url.rst:29
#: ../hsm/pkcs11-url.rst:29
msgid "verify that your needed keys and/or certificates are available on your Nitrokey using ``pkcs15-tool -D``"
msgstr ""

#: ../hsm/pkcs11-url.rst:31
#: ../hsm/pkcs11-url.rst:31
#: ../hsm/pkcs11-url.rst:31
#: ../hsm/pkcs11-url.rst:31
msgid "if you want to use ECC keys/mechanisms through ``libengine-pkcs11-openssl``, you'll have to ensure its version is at least 0.4.10"
msgstr ""

#: ../hsm/pkcs11-url.rst:35
#: ../hsm/pkcs11-url.rst:35
#: ../hsm/pkcs11-url.rst:35
#: ../hsm/pkcs11-url.rst:35
msgid "List and Generate PKCS#11 URLs"
msgstr ""

#: ../hsm/pkcs11-url.rst:37
#: ../hsm/pkcs11-url.rst:37
#: ../hsm/pkcs11-url.rst:37
#: ../hsm/pkcs11-url.rst:37
msgid "Use the following command to get a list of available tokens (Nitrokeys):"
msgstr ""

#: ../hsm/pkcs11-url.rst:44
#: ../hsm/pkcs11-url.rst:44
#: ../hsm/pkcs11-url.rst:44
#: ../hsm/pkcs11-url.rst:44
msgid "Choose the token (Nitrokey) URL you want to generate URL tokens for and use it like this:"
msgstr ""

#: ../hsm/pkcs11-url.rst:53
#: ../hsm/pkcs11-url.rst:53
#: ../hsm/pkcs11-url.rst:53
#: ../hsm/pkcs11-url.rst:53
msgid "If you inspect the tail of the URL you'll recognize: ``label``, ``id`` and more, these can be partly removed as long as the necessary objects can be uniquely identified using the resulting URL, see :doc:`TLS Apache2 Configuration<apache2-tls>` for an example using ``id`` only."
msgstr ""

#: ../pro/smime.rst:2
#: ../pro/smime.rst:2
#: ../pro/smime.rst:2
msgid "S/MIME Email Encryption"
msgstr ""

#: ../pro/smime.rst:9
#: ../pro/smime-outlook.rst:9
#: ../pro/smime-thunderbird.rst:9
#: ../pro/smime.rst:9
#: ../pro/smime-outlook.rst:9
#: ../pro/smime-thunderbird.rst:9
#: ../pro/smime.rst:9
#: ../pro/smime-outlook.rst:9
#: ../pro/smime-thunderbird.rst:9
msgid "Prerequisites"
msgstr ""

#: ../pro/smime.rst:11
#: ../pro/smime.rst:11
#: ../pro/smime.rst:11
msgid "There are two widely used standards for email encryption."
msgstr ""

#: ../pro/smime.rst:13
#: ../pro/smime.rst:13
#: ../pro/smime.rst:13
msgid "OpenPGP/GnuPG is popular among individuals,"
msgstr ""

#: ../pro/smime.rst:15
#: ../pro/smime.rst:15
#: ../pro/smime.rst:15
msgid "S/MIME/X.509 is mostly used by enterprises."
msgstr ""

#: ../pro/smime.rst:17
#: ../pro/smime.rst:17
#: ../pro/smime.rst:17
msgid "If you are in doubt which one to choose, you should use OpenPGP, see `here <openpgp.html>`__. This page describes the usage of S/MIME email encryption."
msgstr ""

#: ../pro/smime.rst:19
#: ../pro/smime.rst:19
#: ../pro/smime.rst:19
msgid "You need to purchase a S/MIME certificate or may already got one by your company. Furthermore, you need to install `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`__ on your System. While GNU/Linux users usually can install OpenSC over the package manager (e.g. ``sudo apt install opensc`` on Ubuntu), macOS and Windows users can download the installation files from the `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`__ page."
msgstr ""

#: ../pro/smime.rst:22
#: ../pro/smime-outlook.rst:17
#: ../pro/smime-thunderbird.rst:17
#: ../pro/smime.rst:22
#: ../pro/smime-outlook.rst:17
#: ../pro/smime-thunderbird.rst:17
#: ../pro/smime.rst:22
#: ../pro/smime-outlook.rst:17
#: ../pro/smime-thunderbird.rst:17
msgid "Windows users with 64-bit system (standard) need to install both, the 32-bit and the 64-bit version of OpenSC!"
msgstr ""

#: ../pro/smime.rst:25
#: ../pro/smime.rst:25
#: ../pro/smime.rst:25
msgid "Import Existing Key and Certificate"
msgstr ""

#: ../pro/smime.rst:27
#: ../pro/smime.rst:27
#: ../pro/smime.rst:27
msgid "The following instructions are based on the `wiki of OpenSC <https://github.com/OpenSC/OpenSC/wiki/OpenPGP-card>`__. We will assume, that you already got a key-certificate pair as a .p12 file. Please have a look at the wiki page, if you got a separate key and certificate file."
msgstr ""

#: ../pro/smime.rst:29
#: ../pro/smime.rst:29
#: ../pro/smime.rst:29
msgid "To open the Windows command line please push the Windows-key and R-key. Now type ‘cmd.exe’ in the text field and hit enter. To open a Terminal on macOS or GNU/Linux please use the application search (e.g. spotlight on macOS)."
msgstr ""

#: ../pro/smime.rst:31
#: ../pro/smime.rst:31
#: ../pro/smime.rst:31
msgid "To make these commands as simple as possible, the .p12 file needs to be in your home folder. On Windows this is usually ‘C:\\Users\\yourusername’ and on macOS and GNU/Linux system it will be ‘/home/yourusername’. If you do not store the .p12 file there, you have to adapt the path in the commands below. Please plug in the Nitrokey before submitting the commands."
msgstr ""

#: ../pro/smime.rst:33
#: ../pro/smime.rst:33
#: ../pro/smime.rst:33
msgid "Assuming that your key-certificate file reads ‘myprivate.p12’ the commands for Windows looks like this:"
msgstr ""

#: ../pro/smime.rst:40
#: ../pro/smime.rst:40
#: ../pro/smime.rst:40
msgid "and on macOS and GNU/Linux it will be"
msgstr ""

#: ../pro/smime.rst:47
#: ../pro/smime.rst:47
#: ../pro/smime.rst:47
msgid "The two commands copy the key-certificate pair to the slot 2 (needed for decrypting emails) and slot 3 (needed for signing). The output looks on both systems something like this:"
msgstr ""

#: ../pro/smime.rst:54
#: ../pro/smime.rst:54
#: ../pro/smime.rst:54
msgid "Please note that there will be error messages that can be safely ignored (see output example above). You now have the key-certificate pair loaded on the Nitrokey."
msgstr ""

#: ../pro/smime.rst:59
#: ../pro/smime.rst:59
#: ../pro/smime.rst:59
msgid "You can find further information about the usage on these pages:"
msgstr ""

#: ../pro/smime.rst:61
#: ../pro/smime.rst:61
#: ../pro/smime.rst:61
msgid "for using `S/MIME encryption on Thunderbird <smime-thunderbird.html>`__"
msgstr ""

#: ../pro/smime.rst:64
#: ../pro/smime.rst:64
#: ../pro/smime.rst:64
msgid "for using `S/MIME encryption on Outlook <smime-outlook.html>`__"
msgstr ""

#: ../pro/smime.rst:67
#: ../pro/smime.rst:67
#: ../pro/smime.rst:67
msgid "for using `Evolution <https://help.gnome.org/users/evolution/stable/mail-encryption.html.en>`__, an email client for the Gnome Desktop on Linux systems"
msgstr ""

#: ../pro/smime.rst:72
#: ../pro/smime.rst:72
#: ../pro/smime.rst:72
msgid "Troubleshooting"
msgstr ""

#: ../pro/smime.rst:74
#: ../pro/smime.rst:74
#: ../pro/smime.rst:74
msgid "On Windows: Did you install **both**, the 32-bit and the 64-bit version of OpenSC?"
msgstr ""

#: ../pro/smime.rst:77
#: ../pro/smime.rst:77
#: ../pro/smime.rst:77
msgid "Nitrokey Storage 2: You need to install OpenSC in version 0.18 or higher. You can find the files on the `OpenSC website <https://github.com/OpenSC/OpenSC/releases>`__ for Windows and macOS user or `here <https://github.com/Nitrokey/opensc-build>`__ for Debian/Ubuntu users."
msgstr ""

#: ../pro/smime-outlook.rst:2
#: ../pro/smime-outlook.rst:2
#: ../pro/smime-outlook.rst:2
msgid "S/MIME Email Encryption with Outlook"
msgstr ""

#: ../pro/smime-outlook.rst:11
#: ../pro/smime-outlook.rst:11
#: ../pro/smime-outlook.rst:11
msgid "If you do not have a S/MIME key-certificate pair installed on your Nitrokey yet, please look at `this page <smime.html>`__ first."
msgstr ""

#: ../pro/smime-outlook.rst:13
#: ../pro/smime-outlook.rst:13
#: ../pro/smime-outlook.rst:13
msgid "You need to have OpenSC installed on your System. Please have a look at the `wiki page of the OpenSC project <https://github.com/OpenSC/OpenSC/wiki>`__."
msgstr ""

#: ../pro/smime-outlook.rst:21
#: ../pro/smime-outlook.rst:21
#: ../pro/smime-outlook.rst:21
msgid "Settings in Outlook"
msgstr ""

#: ../pro/smime-outlook.rst:23
#: ../pro/smime-outlook.rst:23
#: ../pro/smime-outlook.rst:23
msgid "Before you can use the Nitrokey in Outlook you have to activate S/MIME encryption. You can achieve this by clicking on to ‘Start’ -> ‘Options’ and clicking on ‘Trust Center’ in the options window. In section ‘Email Security’ you can choose your S/MIME identity. Your certificate should already be recognized by Outlook."
msgstr ""

#: ../pro/smime-outlook.rst:38
#: ../pro/smime-outlook.rst:38
#: ../pro/smime-outlook.rst:38
msgid "When composing a mail you can now choose to encrypt and sign the message in the ‘Options’ ribbon of the compose window."
msgstr ""

#: ../pro/smime-outlook.rst:45
#: ../pro/smime-outlook.rst:45
#: ../pro/smime-outlook.rst:45
msgid "Outlook will only encrypt message to mail addresses which are saved in your address book. So make sure, that the persons you want to write an encrypted mail to have an entry in Outlook’s contacts. You can ask the person to write you a signed mail, so that you can import the certificate information."
msgstr ""

#: ../pro/smime-outlook.rst:47
#: ../pro/smime-outlook.rst:47
#: ../pro/smime-outlook.rst:47
msgid "Depending on your certificate or the certificate of your partners you may have to import a so-called root certificate. This is the certificate of the party which issued the certificate you or your partner uses. You should usually got informed if this is necessary."
msgstr ""

#: ../pro/smime-thunderbird.rst:2
#: ../pro/smime-thunderbird.rst:2
#: ../pro/smime-thunderbird.rst:2
msgid "S/MIME Email Encryption with Thunderbird"
msgstr ""

#: ../pro/smime-thunderbird.rst:11
#: ../pro/smime-thunderbird.rst:11
#: ../pro/smime-thunderbird.rst:11
msgid "If you do not have a S/MIME key-certificate pair installed on your Nitrokey yet or if you did not installed OpenSC, please look at `this page <smime.html>`__ first."
msgstr ""

#: ../pro/smime-thunderbird.rst:13
#: ../pro/smime-thunderbird.rst:13
#: ../pro/smime-thunderbird.rst:13
msgid "You need to have `OpenSC installed <https://github.com/OpenSC/OpenSC/wiki>`__ on your System. While GNU/Linux users usually can install OpenSC over the package manager (e.g. ``sudo apt update && sudo apt install opensc`` on Ubuntu), macOS and Windows users can download the installation files from OpenSC directly."
msgstr ""

#: ../pro/smime-thunderbird.rst:21
#: ../pro/smime-thunderbird.rst:21
#: ../pro/smime-thunderbird.rst:21
msgid "Settings in Thunderbird"
msgstr ""

#: ../pro/smime-thunderbird.rst:23
#: ../pro/smime-thunderbird.rst:23
#: ../pro/smime-thunderbird.rst:23
msgid "Before you can use the Nitrokey in Thunderbird you have to activate S/MIME encryption in the account settings. You can achieve this by clicking on the menu and go to ‘Preferences’ -> ‘Account Settings’ and clicking on ‘Security’ in the account settings window."
msgstr ""

#: ../pro/smime-thunderbird.rst:30
#: ../pro/smime-thunderbird.rst:30
#: ../pro/smime-thunderbird.rst:30
msgid "Click on “Security Devices” to import the right PCKS11 module. Click on “Load” on the right-hand side. Now give the Module a name (like “OpenSC Module”) and click on “Browse” to choose the location of the Module (see below)."
msgstr ""

#: ../pro/smime-thunderbird.rst:37
#: ../pro/smime-thunderbird.rst:37
#: ../pro/smime-thunderbird.rst:37
msgid "On Windows the right file lays under “C:\\Windows\\System32\\opensc-pkcs11.dll”. On macOS and GNU/Linux the file should be in “/lib/pkcs11/opensc-pkcs11.so” or “/usr/lib/pkcs11/opensc-pkcs11.so” or alike. Press “OK” twice and you are back in security section of the account settings. Now you can actually choose a certificate on the upper part of the window. You should get asked for a PIN to unlock your Nitrokey. Please type in your User PIN."
msgstr ""

#: ../pro/smime-thunderbird.rst:47
#: ../pro/smime-thunderbird.rst:47
#: ../pro/smime-thunderbird.rst:47
msgid "When composing an email you can now choose to encrypt and sign the message."
msgstr ""

#: ../hsm/mac/product_platform_heading.rst:3
#: ../hsm/mac/product_platform_heading.rst:3
#: ../hsm/mac/product_platform_heading.rst:3
#: ../hsm/mac/product_platform_heading.rst:3
#: ../hsm/mac/product_platform_heading.rst:3
#: ../hsm/mac/product_platform_heading.rst:3
#: ../hsm/mac/product_platform_heading.rst:3
#: ../hsm/mac/product_platform_heading.rst:3
msgid "(Nitrokey HSM 2 - macOS)"
msgstr ""

#: ../hsm/mac/index.rst:2
msgid "Nitrokey HSM with macOS"
msgstr ""

#: ../hsm/mac/index.rst:13
#: ../hsm/windows/index.rst:13
msgid "Install `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`__. Alternatively, install `this <https://www.cardcontact.de/download/sc-hsm-starterkit.zip>`__ driver (`source <https://github.com/CardContact/sc-hsm-embedded>`__)."
msgstr ""

#: ../hsm/windows/product_platform_heading.rst:3
#: ../hsm/windows/product_platform_heading.rst:3
#: ../hsm/windows/product_platform_heading.rst:3
#: ../hsm/windows/product_platform_heading.rst:3
#: ../hsm/windows/product_platform_heading.rst:3
#: ../hsm/windows/product_platform_heading.rst:3
#: ../hsm/windows/product_platform_heading.rst:3
#: ../hsm/windows/product_platform_heading.rst:3
#: ../hsm/windows/product_platform_heading.rst:3
msgid "(Nitrokey HSM 2 - Windows)"
msgstr ""

#: ../hsm/windows/index.rst:2
msgid "Nitrokey HSM with Windows"
msgstr ""

#: ../pro/smart-policy.rst:2
msgid "Login to Windows Domain Computers With MS Active Directory"
msgstr ""

#: ../pro/smart-policy.rst:8
msgid "Download and install the latest `OpenSC <https://github.com/OpenSC/OpenSC/wiki>`__."
msgstr ""

#: ../pro/smart-policy.rst:10
msgid "Use a text editor to add the following settings to *C:\\Program Files:\\OpenSC Project\\OpenSC\\opensc.conf*."
msgstr ""

#: ../pro/smart-policy.rst:49
msgid "Open a command terminal and enter “regedit”. Use regedit to import `this file <https://www.nitrokey.com/sites/default/files/nk-hsm.reg>`__."
msgstr ""

#: ../pro/smart-policy.rst:52
msgid "Now you can enroll Nitrokeys for your users managed in Microsoft Active Directory. You may either use Microsoft PKI, `gpgsm <https://www.gnupg.org/documentation/manuals/gnupg/Howto-Create-a-Server-Cert.html>`__, or `Smart Policy <https://www.mysmartlogon.com/products/smart-policy.html>`__. The following steps describe the usage of Smart Policy."
msgstr ""

#: ../pro/smart-policy.rst:58
msgid "`Download <http://download.mysmartlogon.com/SmartPolicyv2/SmartPolicy%20-%20Stage%203.exe>`__ and install Smart Policy."
msgstr ""

#: ../pro/smart-policy.rst:60
msgid "Select “Read a smart card”"
msgstr ""

#: ../pro/smart-policy.rst:67
msgid "Select the certificate, mapping, and user."
msgstr ""

#: ../pro/smart-policy.rst:74
msgid "Verify the device status via CRL."
msgstr ""

#: ../pro/smart-policy.rst:81
msgid "Choose a Group Policy Object (GPO)."
msgstr ""

#: ../pro/smart-policy.rst:88
msgid "Confirm applying the mapping."
msgstr ""

#: ../pro/smart-policy.rst:95
msgid "From now on, when logging on to your Windows computer you need to connect the Nitrokey and enter your PIN."
msgstr ""

