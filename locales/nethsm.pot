# SOME DESCRIPTIVE TITLE.
# Copyright (C) Nitrokey
# This file is distributed under the same license as the Nitrokey Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nitrokey Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-05 12:32+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../nethsm/api.rst:2
msgid "Accessing a NetHSM using the REST API"
msgstr ""

#: ../nethsm/api.rst:6
msgid "This tutorial demonstrates how to access the NetHMS via REST API. The interface is `documented here <https://nethsmdemo.nitrokey.com/api_docs/index.html#docs/summary/summary>`_ and it's specification is available as `RAML <https://nethsmdemo.nitrokey.com/api_docs/nethsm-api.raml>`_ and as `OpenAPI (Swagger) <https://nethsmdemo.nitrokey.com/api_docs/gen_nethsm_api_oas20.json>`_."
msgstr ""

#: ../nethsm/_tutorial.rst:2
#: ../nethsm/_tutorial.rst:2
msgid "Before we start, we store the host name of the NetHSM instance in the ``NETHSM_HOST`` environment variable.  You can use the public NetHSM demo instance ``nethsmdemo.nitrokey.com`` or run a local demo instance using the NetHSM docker image, see the `Development and Testing </index.html#development-and-testing>`_ section of the NetHSM documentation."
msgstr ""

#: ../nethsm/api.rst:17
msgid "If you use a NetHSM demo instance with a self-signed certificate, for example using the Docker image, you will have to use the ``--insecure``/``-k`` option for ``curl`` to skip the certificate check."
msgstr ""

#: ../nethsm/_tutorial.rst:2
#: ../nethsm/_tutorial.rst:2
msgid "First, let’s see what we have here:"
msgstr ""

#: ../nethsm/api.rst:40
msgid "The ``-i``/``--include`` option causes ``curl`` to print the HTTP status code and the response headers.  The ``-w '\\n'``/``--write-out '\\n'`` option adds a newline after the response body."
msgstr ""

#: ../nethsm/_tutorial.rst:2
#: ../nethsm/_tutorial.rst:2
msgid "See what the device’s status is:"
msgstr ""

#: ../nethsm/_tutorial.rst:3
#: ../nethsm/_tutorial.rst:3
msgid "Initialization"
msgstr ""

#: ../nethsm/_tutorial.rst:5
#: ../nethsm/_tutorial.rst:5
msgid "A new NetHSM needs to be provisioned first with passphrases and the current time. The *Admin Passphrase* is the *Administrator*’s passphrase, which is the super user of the NetHSM. The *Unlock Passphrase* is used to encrypt NetHSM’s confidential data store."
msgstr ""

#: ../nethsm/_tutorial.rst:12
#: ../nethsm/_tutorial.rst:12
msgid "The NetHSM demo instance at ``nethsmdemo.nitrokey.com`` is already provisioned."
msgstr ""

#: ../nethsm/_tutorial.rst:2
#: ../nethsm/_tutorial.rst:2
msgid "NetHSM can be used in *Attended Boot* mode and *Unattended Boot* mode."
msgstr ""

#: ../nethsm/_tutorial.rst:4
#: ../nethsm/_tutorial.rst:4
msgid "In *Attended Boot* mode the *Unlock Passphrase* needs to be entered during each start which is used to encrypt the data store. For security reasons this mode is recommended."
msgstr ""

#: ../nethsm/_tutorial.rst:7
#: ../nethsm/_tutorial.rst:7
msgid "In *Unattended Boot* mode no Unlock Passphrase is required, therefore the NetHSM can start unattended and the data store is stored unencrypted. Use this mode if your availability requirements can’t be fulfilled with *Attended Boot* mode."
msgstr ""

#: ../nethsm/_tutorial.rst:12
#: ../nethsm/_tutorial.rst:12
msgid "Retrieve the current mode:"
msgstr ""

#: ../nethsm/_tutorial.rst:2
#: ../nethsm/_tutorial.rst:2
msgid "Switch to *Unattended Boot* mode:"
msgstr ""

#: ../nethsm/_tutorial.rst:2
#: ../nethsm/_tutorial.rst:2
msgid "Or switch back to *Attended Boot* mode:"
msgstr ""

#: ../nethsm/_tutorial.rst:3
#: ../nethsm/_tutorial.rst:3
msgid "User Management"
msgstr ""

#: ../nethsm/_tutorial.rst:3
#: ../nethsm/_tutorial.rst:3
msgid "Roles"
msgstr ""

#: ../nethsm/_tutorial.rst:5
#: ../nethsm/_tutorial.rst:5
msgid "Separation of duties can be implemented by using the available Roles. Each user account configured on the NetHSM has one of the following Roles assigned to it. Following is a high-level description of the operations allowed by individual Roles, for endpoint-specific details please refer to the REST API documentation."
msgstr ""

#: ../nethsm/_tutorial.rst:11
#: ../nethsm/_tutorial.rst:11
msgid "*R-Administrator*: A user account with this Role has access to all operations provided by the REST API, with the exception of key usage operations, i.e. message signing and decryption."
msgstr ""

#: ../nethsm/_tutorial.rst:14
#: ../nethsm/_tutorial.rst:14
msgid "*R-Operator*: A user account with this Role has access to all key usage operations, a read-only subset of key management operations and user management operations allowing changes to their own account only."
msgstr ""

#: ../nethsm/_tutorial.rst:18
#: ../nethsm/_tutorial.rst:18
msgid "*R-Metrics*: A user account with this Role has access to read-only metrics operations only."
msgstr ""

#: ../nethsm/_tutorial.rst:20
#: ../nethsm/_tutorial.rst:20
msgid "*R-Backup*: A user account with this Role has access to the operations required to initiate a system backup only."
msgstr ""

#: ../nethsm/_tutorial.rst:23
#: ../nethsm/_tutorial.rst:23
msgid "Note: In a future release another Role will be implemented which is allowed to /keys/ POST, /keys/generate POST, /keys/{KeyID} PUT & DELETE, /keys/{KeyID}/cert PUT & DELETE in addition to what R-Operator is allowed to do."
msgstr ""

#: ../nethsm/_tutorial.rst:3
#: ../nethsm/_tutorial.rst:3
msgid "Create a User"
msgstr ""

#: ../nethsm/_tutorial.rst:5
#: ../nethsm/_tutorial.rst:5
msgid "Now create a new user with the operator role that can be used to sign and decrypt data.  Note that the NetHSM assigns a random user ID if we don’t specify it."
msgstr ""

#: ../nethsm/_tutorial.rst:3
#: ../nethsm/_tutorial.rst:3
msgid "Key Management"
msgstr ""

#: ../nethsm/_tutorial.rst:5
#: ../nethsm/_tutorial.rst:5
msgid "The NetHSM supports RSA, ED25519 and ECDSA keys.  When creating a key, you have to select both the key algorithm and the key mechanisms to use.  RSA keys can be used for decryption (with the modes raw, PKCS #1 and OAEP with MD5, SHA1, SHA224, SHA256, SHA384 or SHA512) and for signatures (with the modes PKCS #1 and PSS with MD5, SHA1, SHA224, SHA256, SHA384 or SHA512).  The other algorithms only support the signature mechanism."
msgstr ""

#: ../nethsm/_tutorial.rst:12
#: ../nethsm/_tutorial.rst:12
msgid "For a complete list of available key algorithms and key mechanisms, see the API documentation for the KeyAlgorithm_ and KeyMechanism_ types."
msgstr ""

#: ../nethsm/_tutorial.rst:3
#: ../nethsm/_tutorial.rst:3
msgid "Generate Keys"
msgstr ""

#: ../nethsm/_tutorial.rst:5
#: ../nethsm/_tutorial.rst:5
msgid "In this guide, we want to use an RSA key to decrypt data using PKCS #1 and to sign data with PSS using SHA256.  So let’s generate a new key on the NetHSM. Make sure to use the ``RSA`` algorithm and to select the ``RSA_Signature_PSS_SHA256`` and ``RSA_Decryption_PKCS1`` key mechanisms.  If you don’t specify a key ID, the NetHSM will generate a random ID for the new key."
msgstr ""

#: ../nethsm/_tutorial.rst:3
#: ../nethsm/_tutorial.rst:3
msgid "Import Keys"
msgstr ""

#: ../nethsm/_tutorial.rst:5
#: ../nethsm/_tutorial.rst:5
msgid "Instead of generating a key on the NetHSM, you can also import existing private keys into the NetHSM:"
msgstr ""

#: ../nethsm/_tutorial.rst:3
#: ../nethsm/_tutorial.rst:3
msgid "List Keys"
msgstr ""

#: ../nethsm/_tutorial.rst:5
#: ../nethsm/_tutorial.rst:5
msgid "To make sure that the key has been created and has the correct algorithm and mechanism settings, we can query all keys on the NetHSM:"
msgstr ""

#: ../nethsm/_tutorial.rst:5
#: ../nethsm/_tutorial.rst:5
msgid "Show Key Details"
msgstr ""

#: ../nethsm/_tutorial.rst:7
#: ../nethsm/_tutorial.rst:7
msgid "We can also query the public key of the generated key pair:"
msgstr ""

#: ../nethsm/_tutorial.rst:2
#: ../nethsm/_tutorial.rst:2
msgid "To be able to use the key with ``openssl``, we export it as a PEM file and store it as ``public.pem``:"
msgstr ""

#: ../nethsm/_tutorial.rst:2
#: ../nethsm/_tutorial.rst:2
msgid "We can inspect the key with ``openssl`` and use it for encryption or signature verification (as described in the next section):"
msgstr ""

#: ../nethsm/_tutorial.rst:3
#: ../nethsm/_tutorial.rst:3
msgid "Key Certificates"
msgstr ""

#: ../nethsm/_tutorial.rst:5
#: ../nethsm/_tutorial.rst:5
msgid "It is possible to set and query certificates for the keys stored on a NetHSM instance:"
msgstr ""

#: ../nethsm/_tutorial.rst:3
#: ../nethsm/_tutorial.rst:3
msgid "Key Certificate Signing Requests"
msgstr ""

#: ../nethsm/_tutorial.rst:5
#: ../nethsm/_tutorial.rst:5
msgid "The NetHSM supports generating Certificate Signing Requests (CSR) for the stored keys:"
msgstr ""

#: ../nethsm/_tutorial.rst:3
#: ../nethsm/_tutorial.rst:3
msgid "Key Operations"
msgstr ""

#: ../nethsm/_tutorial.rst:3
#: ../nethsm/_tutorial.rst:3
msgid "Decryption"
msgstr ""

#: ../nethsm/_tutorial.rst:5
#: ../nethsm/_tutorial.rst:5
msgid "We can encrypt data for the key stored on the NetHSM using ``openssl``. (``public.pem`` is the public key file that we created in the `Show Key Details`_ section.)"
msgstr ""

#: ../nethsm/_tutorial.rst:15
#: ../nethsm/_tutorial.rst:15
msgid "Now we can use the NetHSM to decrypt the data:"
msgstr ""

#: ../nethsm/_tutorial.rst:3
#: ../nethsm/_tutorial.rst:3
#: ../nethsm/pkcs11.rst:34
msgid "Signing"
msgstr ""

#: ../nethsm/_tutorial.rst:5
#: ../nethsm/_tutorial.rst:5
msgid "Similarily, we can sign data using the key on the NetHSM.  For RSA and ECDSA, we have to calculate a digest first:"
msgstr ""

#: ../nethsm/_tutorial.rst:13
#: ../nethsm/_tutorial.rst:13
msgid "Then we can create a signature from this digest using the NetHSM:"
msgstr ""

#: ../nethsm/_tutorial.rst:2
#: ../nethsm/_tutorial.rst:2
msgid "And then use ``openssl`` to verify the signature:"
msgstr ""

#: ../nethsm/_tutorial.rst:3
#: ../nethsm/_tutorial.rst:3
msgid "Backups"
msgstr ""

#: ../nethsm/_tutorial.rst:5
#: ../nethsm/_tutorial.rst:5
msgid "It is possible to crate a backup of the NetHSM that captures both the configuration and the stored keys.  In order to create a backup, you first have to set a backup passphrase that is used to encrypt the backup file:"
msgstr ""

#: ../nethsm/_tutorial.rst:2
#: ../nethsm/_tutorial.rst:2
msgid "Now you have to create a user with the *R-Backup* role:"
msgstr ""

#: ../nethsm/_tutorial.rst:2
#: ../nethsm/_tutorial.rst:2
msgid "Then can you generate the backup and write it to a file:"
msgstr ""

#: ../nethsm/_tutorial.rst:2
#: ../nethsm/_tutorial.rst:2
msgid "This backup file can be restored on an unprovisioned NetHSM instance:"
msgstr ""

#: ../nethsm/_tutorial.rst:3
#: ../nethsm/_tutorial.rst:3
msgid "Updates"
msgstr ""

#: ../nethsm/_tutorial.rst:5
#: ../nethsm/_tutorial.rst:5
msgid "Updates for the NetHSM can be installed in a two-step process.  First you have to upload the update image to the NetHSM.  The image is then checked and validated.  If the validation is successful, the release notes for the update are returned by the NetHSM:"
msgstr ""

#: ../nethsm/_tutorial.rst:2
#: ../nethsm/_tutorial.rst:2
msgid "If you want to continue with the installation, you can now commit the update:"
msgstr ""

#: ../nethsm/_tutorial.rst:2
#: ../nethsm/_tutorial.rst:2
msgid "Alternatively, you can cancel the update:"
msgstr ""

#: ../nethsm/cli.rst:2
msgid "Accessing a NetHSM with the nitropy command line tool"
msgstr ""

#: ../nethsm/cli.rst:6
msgid "This tutorial demonstrates how to access the NetHMS via `nitropy <https://github.com/Nitrokey/pynitrokey>`_ command line tool, which you need to download and install."
msgstr ""

#: ../nethsm/cli.rst:14
msgid "If you use a NetHSM demo instance with a self-signed certificate, for example using the Docker image, you will have to use the ``--no-verify-tls`` option for ``nitropy`` to skip the certificate check."
msgstr ""

#: ../nethsm/index.rst:2
msgid "NetHSM"
msgstr ""

#: ../nethsm/index.rst:7
msgid "Getting Started"
msgstr ""

#: ../nethsm/index.rst:9
msgid "Connect the NetHSM's ETH3 port with the network. Don't use the ETH0 port because it allows wider system access."
msgstr ""

#: ../nethsm/index.rst:14
msgid "The NetHSM appliance is available at address 192.168.1.1. Access and initialize the NetHSM using `nitropy command line tool <cli.html>`_. Alternatively, the `REST API <api.html>`_ and `PKCS#11 driver <pkcs11.html>`_ can be used."
msgstr ""

#: ../nethsm/index.rst:17
msgid "Development and Testing"
msgstr ""

#: ../nethsm/index.rst:19
msgid "A public NetHSM demo instance is available at `nethsmdemo.nitrokey.com <https://nethsmdemo.nitrokey.com>`_."
msgstr ""

#: ../nethsm/index.rst:21
msgid "Alternatively you can run the `NetHSM Docker container <https://hub.docker.com/r/nitrokey/nethsm>`_ locally. The NetHSM container requires nested virtualization for strong separation with other containers. Thus, to start a NetHSM container you need a Linux host with /dev/kvm available. Execute this command:"
msgstr ""

#: ../nethsm/index.rst:31
msgid "Integration to Custom Application"
msgstr ""

#: ../nethsm/index.rst:33
msgid "To integrate the NetHSM into own custom applications client libraries are available for almost all programming languages, including JavaScript, C++ and Python for example. Therefore we recommend using `OpenAPI Generator <https://github.com/OpenAPITools/openapi-generator>`_."
msgstr ""

#: ../nethsm/index.rst:35
msgid "To list all the available languages, you enter"
msgstr ""

#: ../nethsm/index.rst:41
msgid "Then you can generate the NetHSM client for your programming language like this:"
msgstr ""

#: ../nethsm/index.rst:49
msgid "The generated client code, in this example JavaScript, will be created in the ``./out/`` directory. This folder also contains the necessary documentation how to use it."
msgstr ""

#: ../nethsm/pkcs11.rst:2
msgid "This driver is still an early Proof of Concept implementation that only implements the functions that are necessary for operating TLS servers like for example an HTTPS server."
msgstr ""

#: ../nethsm/pkcs11.rst:6
msgid "Accessing a NetHSM using the PKCS#11 driver"
msgstr ""

#: ../nethsm/pkcs11.rst:10
msgid "Download the `PKCS#11 driver <https://github.com/Nitrokey/nethsm-pkcs11>`_ for NetHSM."
msgstr ""

#: ../nethsm/pkcs11.rst:11
msgid "Modify the configuration file ``p11nethsm.conf`` according to your setup (e.g. address, operator name) and store it in ``$HOME/.nitrokey``, ``/etc/nitrokey/``, or in the folder where your application is executed."
msgstr ""

#: ../nethsm/pkcs11.rst:16
msgid "Decrypting"
msgstr ""

#: ../nethsm/pkcs11.rst:18
msgid "After creating a key (here: ID 42) with the according mechanism, you can use it for decryption:"
msgstr ""

#: ../nethsm/pkcs11.rst:36
msgid "After creating a key (here: ID 23) with the according mechanism, you can use it for decryption:"
msgstr ""

